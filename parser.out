Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    MONT
    OR
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
Rule 26    fcn1 -> empty
Rule 27    fcn2 -> empty
Rule 28    fcn3 -> empty
Rule 29    funccall2 -> COMMA expresion fcn2 funccall2
Rule 30    funccall2 -> ID fcn2 funccall2
Rule 31    funccall2 -> empty
Rule 32    modules2 -> vars
Rule 33    modules2 -> empty
Rule 34    funblock -> OBRACKET block2 CBRACKET
Rule 35    block -> OBRACKET block2 CBRACKET
Rule 36    block2 -> estatuto
Rule 37    block2 -> estatuto block2
Rule 38    block2 -> empty
Rule 39    tipo -> INT
Rule 40    tipo -> BOOL
Rule 41    tipo -> DOUBLE
Rule 42    tipo -> STRING
Rule 43    tipo -> CHAR
Rule 44    tipo -> VOID
Rule 45    estatuto -> asign
Rule 46    estatuto -> cond
Rule 47    estatuto -> escrt
Rule 48    estatuto -> plot
Rule 49    estatuto -> count
Rule 50    estatuto -> countif
Rule 51    estatuto -> metodos
Rule 52    estatuto -> dwhile
Rule 53    estatuto -> readln
Rule 54    estatuto -> funccall
Rule 55    estatuto -> regreso
Rule 56    regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON
Rule 57    regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON
Rule 58    regreso -> RETURN OPAREN funccall CPAREN SCOLON
Rule 59    regnum1 -> <empty>
Rule 60    regnum2 -> <empty>
Rule 61    afcn1 -> empty
Rule 62    asign -> ID EQUALS expresion SCOLON
Rule 63    asign -> ID EQUALS ID SCOLON
Rule 64    asign -> ID EQUALS ID asign2 SCOLON
Rule 65    asign -> ID asign2 EQUALS ID SCOLON
Rule 66    asign -> ID asign2 EQUALS expresion SCOLON
Rule 67    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 68    asign -> ID EQUALS funccall afcn1
Rule 69    asign2 -> LCOR expresion RCOR LCOR varcte RCOR
Rule 70    asign2 -> LCOR expresion RCOR LCOR expresion RCOR
Rule 71    asign2 -> LCOR varcte RCOR LCOR expresion RCOR
Rule 72    asign2 -> LCOR varcte RCOR LCOR varcte RCOR
Rule 73    asign2 -> LCOR expresion RCOR
Rule 74    asign2 -> LCOR varcte RCOR
Rule 75    asign3 -> LCOR expresion RCOR
Rule 76    asign3 -> LCOR varcte RCOR
Rule 77    asign3 -> empty
Rule 78    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 79    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 80    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 81    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 82    escrt2 -> COMMA escrt3
Rule 83    escrt2 -> empty
Rule 84    escrt3 -> ID escrt2
Rule 85    escrt3 -> ID
Rule 86    escrt3 -> STRING escrt2 escrt2
Rule 87    en1 -> empty
Rule 88    en2 -> empty
Rule 89    en3 -> empty
Rule 90    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 91    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 92    cn1 -> empty
Rule 93    cn2 -> empty
Rule 94    cn3 -> empty
Rule 95    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 96    ifblock2 -> estatuto
Rule 97    ifblock2 -> estatuto ifblock2
Rule 98    ifblock2 -> empty
Rule 99    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 100   countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 101   plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 102   plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 103   plot2 -> LCOR varcte COMMA varcte RCOR
Rule 104   plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 105   plot2 -> empty
Rule 106   xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 107   xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 108   xyfunc -> empty
Rule 109   expresion -> exp
Rule 110   expresion -> expresion RELOP exp
Rule 111   exp -> termino
Rule 112   exp -> termino PLUS exp
Rule 113   exp -> termino MINUS exp
Rule 114   termino -> factor
Rule 115   termino -> factor MULT termino
Rule 116   termino -> factor DIV termino
Rule 117   factor -> OPAREN expresion CPAREN
Rule 118   factor -> varcte
Rule 119   varcte -> ID
Rule 120   varcte -> ID asign2
Rule 121   varcte -> NUMERIC
Rule 122   varcte -> NUMBER
Rule 123   varcte -> LOGICAL
Rule 124   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 125   wn1 -> empty
Rule 126   wn2 -> empty
Rule 127   wblock -> OBRACKET block2 CBRACKET
Rule 128   dwhileconds -> expresion dwhileconds
Rule 129   dwhileconds -> empty
Rule 130   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 131   rn1 -> empty
Rule 132   metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON
Rule 133   metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
Rule 134   metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON
Rule 135   metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON
Rule 136   metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON
Rule 137   metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON
Rule 138   metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
Rule 139   metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
Rule 140   metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
Rule 141   metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
Rule 142   metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
Rule 143   metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON
Rule 144   metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON
Rule 145   metodos -> EULER tp6 OPAREN CPAREN SCOLON
Rule 146   fe1 -> empty
Rule 147   fe2 -> empty
Rule 148   fe3 -> empty
Rule 149   fe4 -> empty
Rule 150   fe5 -> empty
Rule 151   kval -> varcte COMMA arrfun2 COMMA arrfun3
Rule 152   arrfun -> LCOR datasetarr RCOR
Rule 153   arrfun2 -> LCOR datasetarr RCOR
Rule 154   arrfun3 -> LCOR datasetarr2 RCOR
Rule 155   datasetarr -> varcte
Rule 156   datasetarr -> varcte COMMA datasetarr
Rule 157   datasetarr2 -> varcte
Rule 158   datasetarr2 -> varcte COMMA datasetarr2
Rule 159   dmn1 -> empty
Rule 160   dbrn1 -> empty
Rule 161   dp1 -> empty
Rule 162   tp1 -> empty
Rule 163   tp2 -> empty
Rule 164   tp3 -> empty
Rule 165   tp4 -> empty
Rule 166   tp5 -> empty
Rule 167   tp6 -> empty
Rule 168   expfunc -> ID COMMA ID COMMA ID
Rule 169   expfunc -> varcte COMMA varcte COMMA varcte
Rule 170   expfunc2 -> ID COMMA ID
Rule 171   expfunc2 -> varcte COMMA varcte
Rule 172   mmmfunc -> LCOR RCOR
Rule 173   mmmfunc -> LCOR mmmarray RCOR
Rule 174   mmmfunc -> ID
Rule 175   mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray
Rule 176   mmmarray -> libero LCOR datasetarr4 RCOR
Rule 177   libero -> empty
Rule 178   datasetarr4 -> varcte
Rule 179   datasetarr4 -> varcte COMMA datasetarr4
Rule 180   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 40
CBRACKET             : 34 35 95 127
CHAR                 : 43
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 29 82 99 99 100 100 100 103 104 104 151 151 156 158 168 168 169 169 170 171 175 179
COMMENT              : 
COUNT                : 99
COUNTIF              : 100
CPAREN               : 19 24 25 56 57 58 78 79 80 81 90 91 99 100 101 102 117 124 130 132 133 134 135 136 137 138 139 140 141 142 143 144 145
CTED                 : 
CTEI                 : 
DBERN                : 138
DERL                 : 137
DIFF                 : 
DIV                  : 116
DO                   : 124
DOUBLE               : 41
DPOI                 : 139
ELSE                 : 91
EQ                   : 
EQUALS               : 62 63 64 65 66 67 68 106 107
EULER                : 145
FUNC                 : 19
FX                   : 106
FY                   : 107
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 25 25 30 56 62 63 63 64 64 65 65 66 67 67 68 78 84 85 99 100 119 120 130 168 168 168 170 170 174
IF                   : 90 91
INT                  : 39
INTEGER              : 
INVERSE              : 141
KMEANS               : 136
LCOR                 : 12 13 14 14 15 15 69 69 70 70 71 71 72 72 73 74 75 76 103 104 152 153 154 172 173 175 176
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 123
LUGSTAT              : 1
MEAN                 : 132
MEDIAN               : 133
MINUS                : 113
MODE                 : 134
MONT                 : 
MULT                 : 115
NUMBER               : 12 13 14 14 15 15 122
NUMERIC              : 121
OBRACKET             : 34 35 95 127
OPAREN               : 19 24 25 56 57 58 78 79 80 81 90 91 99 100 101 102 117 124 130 132 133 134 135 136 137 138 139 140 141 142 143 144 145
OR                   : 
PER                  : 
PLOT                 : 101 102
PLUS                 : 112
PRINT                : 78 79 80 81
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 69 69 70 70 71 71 72 72 73 74 75 76 103 104 152 153 154 172 173 175 176
READ                 : 130
REF                  : 143
RELOP                : 110
RETURN               : 56 57 58
ROTATE               : 142
RREF                 : 144
SCOLON               : 1 11 12 13 14 15 16 56 57 58 62 63 64 65 66 67 78 79 80 81 90 91 99 100 101 102 106 107 124 130 132 133 134 135 136 137 138 139 140 141 142 143 144 145
STDV                 : 135
STRING               : 42 80 81 86
TIPO                 : 
TRANSPOSE            : 140
VAR                  : 9
VOID                 : 44
WHILE                : 124
error                : 

Nonterminals, with rules where they appear

addmain              : 1
afcn1                : 68
arrfun               : 132 133 134 135
arrfun2              : 151
arrfun3              : 151
asign                : 45
asign2               : 16 17 64 65 66 67 67 120
asign3               : 
block                : 1
block2               : 34 35 37 127
cn1                  : 90 91
cn2                  : 90 91
cn3                  : 91
cond                 : 46 100
count                : 49
countif              : 50
datasetarr           : 152 153 156
datasetarr2          : 154 158
datasetarr4          : 175 176 179
dbrn1                : 138
dmn1                 : 137
dp1                  : 139
dwhile               : 52
dwhileconds          : 124 128
empty                : 2 3 5 8 18 20 21 23 26 27 28 31 33 38 61 77 83 87 88 89 92 93 94 98 105 108 125 126 129 131 146 147 148 149 150 159 160 161 162 163 164 165 166 167 177
en1                  : 79
en2                  : 80 81
en3                  : 78
escrt                : 47
escrt2               : 78 81 84 86 86
escrt3               : 82
estatuto             : 36 37 96 97
exp                  : 106 107 109 110 112 113
expfunc              : 137
expfunc2             : 138 139
expresion            : 24 29 57 62 66 69 70 70 71 73 75 79 90 91 110 117 128
factor               : 114 115 116
fcn1                 : 24 25
fcn2                 : 24 25 29 30
fcn3                 : 24
fe1                  : 132
fe2                  : 133
fe3                  : 134
fe4                  : 135
fe5                  : 136
funblock             : 19
funccall             : 54 58 68
funccall2            : 24 25 29 30
ifblock              : 90 91 91
ifblock2             : 95 97
kval                 : 136
libero               : 175 176
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 51
mmmarray             : 173 175
mmmfunc              : 140 141 142 143 144
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 48
plot2                : 102 104
readln               : 53
regnum1              : 56
regnum2              : 57
regreso              : 55
rn1                  : 130
savename             : 
termino              : 111 112 113 115 116
tipo                 : 11 12 13 14 15 16 19
tp1                  : 140
tp2                  : 141
tp3                  : 142
tp4                  : 143
tp5                  : 144
tp6                  : 145
varcte               : 69 71 72 72 74 76 99 99 100 100 103 103 104 104 118 151 155 156 157 158 169 169 169 171 171 178 179
vars                 : 4 32
vars1                : 9 10 17
wblock               : 124
wn1                  : 124
wn2                  : 124
xyfunc               : 101 106 107

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (180) empty -> .

    VAR             reduce using rule 180 (empty -> .)
    FUNC            reduce using rule 180 (empty -> .)
    OBRACKET        reduce using rule 180 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (180) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 180 (empty -> .)
    OBRACKET        reduce using rule 180 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (180) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 180 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (180) empty -> .

    OBRACKET        reduce using rule 180 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (180) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 180 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (35) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (69) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (70) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (71) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (72) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (73) asign2 -> LCOR . expresion RCOR
    (74) asign2 -> LCOR . varcte RCOR
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte

    NUMBER          shift and go to state 37
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 38
    varcte                         shift and go to state 39
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 46
    COMMA           shift and go to state 47


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (35) block -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (180) empty -> .
    (62) asign -> . ID EQUALS expresion SCOLON
    (63) asign -> . ID EQUALS ID SCOLON
    (64) asign -> . ID EQUALS ID asign2 SCOLON
    (65) asign -> . ID asign2 EQUALS ID SCOLON
    (66) asign -> . ID asign2 EQUALS expresion SCOLON
    (67) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) asign -> . ID EQUALS funccall afcn1
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (101) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (102) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (99) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (100) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (132) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (136) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (137) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (138) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (140) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (145) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (124) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (130) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> . RETURN OPAREN funccall CPAREN SCOLON

    CBRACKET        reduce using rule 180 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    block2                         shift and go to state 48
    estatuto                       shift and go to state 49
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 85

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 86


state 30

    (39) tipo -> INT .

    SCOLON          reduce using rule 39 (tipo -> INT .)
    OPAREN          reduce using rule 39 (tipo -> INT .)


state 31

    (40) tipo -> BOOL .

    SCOLON          reduce using rule 40 (tipo -> BOOL .)
    OPAREN          reduce using rule 40 (tipo -> BOOL .)


state 32

    (41) tipo -> DOUBLE .

    SCOLON          reduce using rule 41 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 41 (tipo -> DOUBLE .)


state 33

    (42) tipo -> STRING .

    SCOLON          reduce using rule 42 (tipo -> STRING .)
    OPAREN          reduce using rule 42 (tipo -> STRING .)


state 34

    (43) tipo -> CHAR .

    SCOLON          reduce using rule 43 (tipo -> CHAR .)
    OPAREN          reduce using rule 43 (tipo -> CHAR .)


state 35

    (44) tipo -> VOID .

    SCOLON          reduce using rule 44 (tipo -> VOID .)
    OPAREN          reduce using rule 44 (tipo -> VOID .)


state 36

    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

    RCOR            reduce using rule 119 (varcte -> ID .)
    MULT            reduce using rule 119 (varcte -> ID .)
    DIV             reduce using rule 119 (varcte -> ID .)
    PLUS            reduce using rule 119 (varcte -> ID .)
    MINUS           reduce using rule 119 (varcte -> ID .)
    RELOP           reduce using rule 119 (varcte -> ID .)
    CPAREN          reduce using rule 119 (varcte -> ID .)
    SCOLON          reduce using rule 119 (varcte -> ID .)
    COMMA           reduce using rule 119 (varcte -> ID .)
    ID              reduce using rule 119 (varcte -> ID .)
    OPAREN          reduce using rule 119 (varcte -> ID .)
    NUMERIC         reduce using rule 119 (varcte -> ID .)
    NUMBER          reduce using rule 119 (varcte -> ID .)
    LOGICAL         reduce using rule 119 (varcte -> ID .)
    LCOR            shift and go to state 88

    asign2                         shift and go to state 87

state 37

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (122) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 89
    MULT            reduce using rule 122 (varcte -> NUMBER .)
    DIV             reduce using rule 122 (varcte -> NUMBER .)
    PLUS            reduce using rule 122 (varcte -> NUMBER .)
    MINUS           reduce using rule 122 (varcte -> NUMBER .)
    RELOP           reduce using rule 122 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 122 (varcte -> NUMBER .) ]


state 38

    (69) asign2 -> LCOR expresion . RCOR LCOR varcte RCOR
    (70) asign2 -> LCOR expresion . RCOR LCOR expresion RCOR
    (73) asign2 -> LCOR expresion . RCOR
    (110) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 90
    RELOP           shift and go to state 91


state 39

    (71) asign2 -> LCOR varcte . RCOR LCOR expresion RCOR
    (72) asign2 -> LCOR varcte . RCOR LCOR varcte RCOR
    (74) asign2 -> LCOR varcte . RCOR
    (118) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 92
    MULT            reduce using rule 118 (factor -> varcte .)
    DIV             reduce using rule 118 (factor -> varcte .)
    PLUS            reduce using rule 118 (factor -> varcte .)
    MINUS           reduce using rule 118 (factor -> varcte .)
    RELOP           reduce using rule 118 (factor -> varcte .)

  ! RCOR            [ reduce using rule 118 (factor -> varcte .) ]


state 40

    (109) expresion -> exp .

    RCOR            reduce using rule 109 (expresion -> exp .)
    RELOP           reduce using rule 109 (expresion -> exp .)
    CPAREN          reduce using rule 109 (expresion -> exp .)
    SCOLON          reduce using rule 109 (expresion -> exp .)
    COMMA           reduce using rule 109 (expresion -> exp .)
    ID              reduce using rule 109 (expresion -> exp .)
    OPAREN          reduce using rule 109 (expresion -> exp .)
    NUMERIC         reduce using rule 109 (expresion -> exp .)
    NUMBER          reduce using rule 109 (expresion -> exp .)
    LOGICAL         reduce using rule 109 (expresion -> exp .)


state 41

    (121) varcte -> NUMERIC .

    RCOR            reduce using rule 121 (varcte -> NUMERIC .)
    MULT            reduce using rule 121 (varcte -> NUMERIC .)
    DIV             reduce using rule 121 (varcte -> NUMERIC .)
    PLUS            reduce using rule 121 (varcte -> NUMERIC .)
    MINUS           reduce using rule 121 (varcte -> NUMERIC .)
    RELOP           reduce using rule 121 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 121 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 121 (varcte -> NUMERIC .)
    COMMA           reduce using rule 121 (varcte -> NUMERIC .)
    ID              reduce using rule 121 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 121 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 121 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 121 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 121 (varcte -> NUMERIC .)


state 42

    (123) varcte -> LOGICAL .

    RCOR            reduce using rule 123 (varcte -> LOGICAL .)
    MULT            reduce using rule 123 (varcte -> LOGICAL .)
    DIV             reduce using rule 123 (varcte -> LOGICAL .)
    PLUS            reduce using rule 123 (varcte -> LOGICAL .)
    MINUS           reduce using rule 123 (varcte -> LOGICAL .)
    RELOP           reduce using rule 123 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 123 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 123 (varcte -> LOGICAL .)
    COMMA           reduce using rule 123 (varcte -> LOGICAL .)
    ID              reduce using rule 123 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 123 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 123 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 123 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 123 (varcte -> LOGICAL .)


state 43

    (111) exp -> termino .
    (112) exp -> termino . PLUS exp
    (113) exp -> termino . MINUS exp

    RCOR            reduce using rule 111 (exp -> termino .)
    RELOP           reduce using rule 111 (exp -> termino .)
    CPAREN          reduce using rule 111 (exp -> termino .)
    SCOLON          reduce using rule 111 (exp -> termino .)
    COMMA           reduce using rule 111 (exp -> termino .)
    ID              reduce using rule 111 (exp -> termino .)
    OPAREN          reduce using rule 111 (exp -> termino .)
    NUMERIC         reduce using rule 111 (exp -> termino .)
    NUMBER          reduce using rule 111 (exp -> termino .)
    LOGICAL         reduce using rule 111 (exp -> termino .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94


state 44

    (114) termino -> factor .
    (115) termino -> factor . MULT termino
    (116) termino -> factor . DIV termino

    PLUS            reduce using rule 114 (termino -> factor .)
    MINUS           reduce using rule 114 (termino -> factor .)
    RCOR            reduce using rule 114 (termino -> factor .)
    RELOP           reduce using rule 114 (termino -> factor .)
    CPAREN          reduce using rule 114 (termino -> factor .)
    SCOLON          reduce using rule 114 (termino -> factor .)
    COMMA           reduce using rule 114 (termino -> factor .)
    ID              reduce using rule 114 (termino -> factor .)
    OPAREN          reduce using rule 114 (termino -> factor .)
    NUMERIC         reduce using rule 114 (termino -> factor .)
    NUMBER          reduce using rule 114 (termino -> factor .)
    LOGICAL         reduce using rule 114 (termino -> factor .)
    MULT            shift and go to state 95
    DIV             shift and go to state 96


state 45

    (117) factor -> OPAREN . expresion CPAREN
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 97
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 46

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 100

state 47

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 101

state 48

    (35) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 102


state 49

    (36) block2 -> estatuto .
    (37) block2 -> estatuto . block2
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (180) empty -> .
    (62) asign -> . ID EQUALS expresion SCOLON
    (63) asign -> . ID EQUALS ID SCOLON
    (64) asign -> . ID EQUALS ID asign2 SCOLON
    (65) asign -> . ID asign2 EQUALS ID SCOLON
    (66) asign -> . ID asign2 EQUALS expresion SCOLON
    (67) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) asign -> . ID EQUALS funccall afcn1
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (101) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (102) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (99) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (100) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (132) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (136) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (137) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (138) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (140) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (145) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (124) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (130) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> . RETURN OPAREN funccall CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 36 (block2 -> estatuto .)
    CBRACKET        reduce using rule 36 (block2 -> estatuto .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

  ! CBRACKET        [ reduce using rule 180 (empty -> .) ]

    estatuto                       shift and go to state 49
    block2                         shift and go to state 103
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 50

    (38) block2 -> empty .

    CBRACKET        reduce using rule 38 (block2 -> empty .)


state 51

    (45) estatuto -> asign .

    ID              reduce using rule 45 (estatuto -> asign .)
    IF              reduce using rule 45 (estatuto -> asign .)
    PRINT           reduce using rule 45 (estatuto -> asign .)
    PLOT            reduce using rule 45 (estatuto -> asign .)
    COUNT           reduce using rule 45 (estatuto -> asign .)
    COUNTIF         reduce using rule 45 (estatuto -> asign .)
    MEAN            reduce using rule 45 (estatuto -> asign .)
    MEDIAN          reduce using rule 45 (estatuto -> asign .)
    MODE            reduce using rule 45 (estatuto -> asign .)
    STDV            reduce using rule 45 (estatuto -> asign .)
    KMEANS          reduce using rule 45 (estatuto -> asign .)
    DERL            reduce using rule 45 (estatuto -> asign .)
    DBERN           reduce using rule 45 (estatuto -> asign .)
    DPOI            reduce using rule 45 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 45 (estatuto -> asign .)
    INVERSE         reduce using rule 45 (estatuto -> asign .)
    ROTATE          reduce using rule 45 (estatuto -> asign .)
    REF             reduce using rule 45 (estatuto -> asign .)
    RREF            reduce using rule 45 (estatuto -> asign .)
    EULER           reduce using rule 45 (estatuto -> asign .)
    DO              reduce using rule 45 (estatuto -> asign .)
    READ            reduce using rule 45 (estatuto -> asign .)
    RETURN          reduce using rule 45 (estatuto -> asign .)
    CBRACKET        reduce using rule 45 (estatuto -> asign .)


state 52

    (46) estatuto -> cond .

    ID              reduce using rule 46 (estatuto -> cond .)
    IF              reduce using rule 46 (estatuto -> cond .)
    PRINT           reduce using rule 46 (estatuto -> cond .)
    PLOT            reduce using rule 46 (estatuto -> cond .)
    COUNT           reduce using rule 46 (estatuto -> cond .)
    COUNTIF         reduce using rule 46 (estatuto -> cond .)
    MEAN            reduce using rule 46 (estatuto -> cond .)
    MEDIAN          reduce using rule 46 (estatuto -> cond .)
    MODE            reduce using rule 46 (estatuto -> cond .)
    STDV            reduce using rule 46 (estatuto -> cond .)
    KMEANS          reduce using rule 46 (estatuto -> cond .)
    DERL            reduce using rule 46 (estatuto -> cond .)
    DBERN           reduce using rule 46 (estatuto -> cond .)
    DPOI            reduce using rule 46 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 46 (estatuto -> cond .)
    INVERSE         reduce using rule 46 (estatuto -> cond .)
    ROTATE          reduce using rule 46 (estatuto -> cond .)
    REF             reduce using rule 46 (estatuto -> cond .)
    RREF            reduce using rule 46 (estatuto -> cond .)
    EULER           reduce using rule 46 (estatuto -> cond .)
    DO              reduce using rule 46 (estatuto -> cond .)
    READ            reduce using rule 46 (estatuto -> cond .)
    RETURN          reduce using rule 46 (estatuto -> cond .)
    CBRACKET        reduce using rule 46 (estatuto -> cond .)


state 53

    (47) estatuto -> escrt .

    ID              reduce using rule 47 (estatuto -> escrt .)
    IF              reduce using rule 47 (estatuto -> escrt .)
    PRINT           reduce using rule 47 (estatuto -> escrt .)
    PLOT            reduce using rule 47 (estatuto -> escrt .)
    COUNT           reduce using rule 47 (estatuto -> escrt .)
    COUNTIF         reduce using rule 47 (estatuto -> escrt .)
    MEAN            reduce using rule 47 (estatuto -> escrt .)
    MEDIAN          reduce using rule 47 (estatuto -> escrt .)
    MODE            reduce using rule 47 (estatuto -> escrt .)
    STDV            reduce using rule 47 (estatuto -> escrt .)
    KMEANS          reduce using rule 47 (estatuto -> escrt .)
    DERL            reduce using rule 47 (estatuto -> escrt .)
    DBERN           reduce using rule 47 (estatuto -> escrt .)
    DPOI            reduce using rule 47 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 47 (estatuto -> escrt .)
    INVERSE         reduce using rule 47 (estatuto -> escrt .)
    ROTATE          reduce using rule 47 (estatuto -> escrt .)
    REF             reduce using rule 47 (estatuto -> escrt .)
    RREF            reduce using rule 47 (estatuto -> escrt .)
    EULER           reduce using rule 47 (estatuto -> escrt .)
    DO              reduce using rule 47 (estatuto -> escrt .)
    READ            reduce using rule 47 (estatuto -> escrt .)
    RETURN          reduce using rule 47 (estatuto -> escrt .)
    CBRACKET        reduce using rule 47 (estatuto -> escrt .)


state 54

    (48) estatuto -> plot .

    ID              reduce using rule 48 (estatuto -> plot .)
    IF              reduce using rule 48 (estatuto -> plot .)
    PRINT           reduce using rule 48 (estatuto -> plot .)
    PLOT            reduce using rule 48 (estatuto -> plot .)
    COUNT           reduce using rule 48 (estatuto -> plot .)
    COUNTIF         reduce using rule 48 (estatuto -> plot .)
    MEAN            reduce using rule 48 (estatuto -> plot .)
    MEDIAN          reduce using rule 48 (estatuto -> plot .)
    MODE            reduce using rule 48 (estatuto -> plot .)
    STDV            reduce using rule 48 (estatuto -> plot .)
    KMEANS          reduce using rule 48 (estatuto -> plot .)
    DERL            reduce using rule 48 (estatuto -> plot .)
    DBERN           reduce using rule 48 (estatuto -> plot .)
    DPOI            reduce using rule 48 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 48 (estatuto -> plot .)
    INVERSE         reduce using rule 48 (estatuto -> plot .)
    ROTATE          reduce using rule 48 (estatuto -> plot .)
    REF             reduce using rule 48 (estatuto -> plot .)
    RREF            reduce using rule 48 (estatuto -> plot .)
    EULER           reduce using rule 48 (estatuto -> plot .)
    DO              reduce using rule 48 (estatuto -> plot .)
    READ            reduce using rule 48 (estatuto -> plot .)
    RETURN          reduce using rule 48 (estatuto -> plot .)
    CBRACKET        reduce using rule 48 (estatuto -> plot .)


state 55

    (49) estatuto -> count .

    ID              reduce using rule 49 (estatuto -> count .)
    IF              reduce using rule 49 (estatuto -> count .)
    PRINT           reduce using rule 49 (estatuto -> count .)
    PLOT            reduce using rule 49 (estatuto -> count .)
    COUNT           reduce using rule 49 (estatuto -> count .)
    COUNTIF         reduce using rule 49 (estatuto -> count .)
    MEAN            reduce using rule 49 (estatuto -> count .)
    MEDIAN          reduce using rule 49 (estatuto -> count .)
    MODE            reduce using rule 49 (estatuto -> count .)
    STDV            reduce using rule 49 (estatuto -> count .)
    KMEANS          reduce using rule 49 (estatuto -> count .)
    DERL            reduce using rule 49 (estatuto -> count .)
    DBERN           reduce using rule 49 (estatuto -> count .)
    DPOI            reduce using rule 49 (estatuto -> count .)
    TRANSPOSE       reduce using rule 49 (estatuto -> count .)
    INVERSE         reduce using rule 49 (estatuto -> count .)
    ROTATE          reduce using rule 49 (estatuto -> count .)
    REF             reduce using rule 49 (estatuto -> count .)
    RREF            reduce using rule 49 (estatuto -> count .)
    EULER           reduce using rule 49 (estatuto -> count .)
    DO              reduce using rule 49 (estatuto -> count .)
    READ            reduce using rule 49 (estatuto -> count .)
    RETURN          reduce using rule 49 (estatuto -> count .)
    CBRACKET        reduce using rule 49 (estatuto -> count .)


state 56

    (50) estatuto -> countif .

    ID              reduce using rule 50 (estatuto -> countif .)
    IF              reduce using rule 50 (estatuto -> countif .)
    PRINT           reduce using rule 50 (estatuto -> countif .)
    PLOT            reduce using rule 50 (estatuto -> countif .)
    COUNT           reduce using rule 50 (estatuto -> countif .)
    COUNTIF         reduce using rule 50 (estatuto -> countif .)
    MEAN            reduce using rule 50 (estatuto -> countif .)
    MEDIAN          reduce using rule 50 (estatuto -> countif .)
    MODE            reduce using rule 50 (estatuto -> countif .)
    STDV            reduce using rule 50 (estatuto -> countif .)
    KMEANS          reduce using rule 50 (estatuto -> countif .)
    DERL            reduce using rule 50 (estatuto -> countif .)
    DBERN           reduce using rule 50 (estatuto -> countif .)
    DPOI            reduce using rule 50 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 50 (estatuto -> countif .)
    INVERSE         reduce using rule 50 (estatuto -> countif .)
    ROTATE          reduce using rule 50 (estatuto -> countif .)
    REF             reduce using rule 50 (estatuto -> countif .)
    RREF            reduce using rule 50 (estatuto -> countif .)
    EULER           reduce using rule 50 (estatuto -> countif .)
    DO              reduce using rule 50 (estatuto -> countif .)
    READ            reduce using rule 50 (estatuto -> countif .)
    RETURN          reduce using rule 50 (estatuto -> countif .)
    CBRACKET        reduce using rule 50 (estatuto -> countif .)


state 57

    (51) estatuto -> metodos .

    ID              reduce using rule 51 (estatuto -> metodos .)
    IF              reduce using rule 51 (estatuto -> metodos .)
    PRINT           reduce using rule 51 (estatuto -> metodos .)
    PLOT            reduce using rule 51 (estatuto -> metodos .)
    COUNT           reduce using rule 51 (estatuto -> metodos .)
    COUNTIF         reduce using rule 51 (estatuto -> metodos .)
    MEAN            reduce using rule 51 (estatuto -> metodos .)
    MEDIAN          reduce using rule 51 (estatuto -> metodos .)
    MODE            reduce using rule 51 (estatuto -> metodos .)
    STDV            reduce using rule 51 (estatuto -> metodos .)
    KMEANS          reduce using rule 51 (estatuto -> metodos .)
    DERL            reduce using rule 51 (estatuto -> metodos .)
    DBERN           reduce using rule 51 (estatuto -> metodos .)
    DPOI            reduce using rule 51 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 51 (estatuto -> metodos .)
    INVERSE         reduce using rule 51 (estatuto -> metodos .)
    ROTATE          reduce using rule 51 (estatuto -> metodos .)
    REF             reduce using rule 51 (estatuto -> metodos .)
    RREF            reduce using rule 51 (estatuto -> metodos .)
    EULER           reduce using rule 51 (estatuto -> metodos .)
    DO              reduce using rule 51 (estatuto -> metodos .)
    READ            reduce using rule 51 (estatuto -> metodos .)
    RETURN          reduce using rule 51 (estatuto -> metodos .)
    CBRACKET        reduce using rule 51 (estatuto -> metodos .)


state 58

    (52) estatuto -> dwhile .

    ID              reduce using rule 52 (estatuto -> dwhile .)
    IF              reduce using rule 52 (estatuto -> dwhile .)
    PRINT           reduce using rule 52 (estatuto -> dwhile .)
    PLOT            reduce using rule 52 (estatuto -> dwhile .)
    COUNT           reduce using rule 52 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 52 (estatuto -> dwhile .)
    MEAN            reduce using rule 52 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 52 (estatuto -> dwhile .)
    MODE            reduce using rule 52 (estatuto -> dwhile .)
    STDV            reduce using rule 52 (estatuto -> dwhile .)
    KMEANS          reduce using rule 52 (estatuto -> dwhile .)
    DERL            reduce using rule 52 (estatuto -> dwhile .)
    DBERN           reduce using rule 52 (estatuto -> dwhile .)
    DPOI            reduce using rule 52 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 52 (estatuto -> dwhile .)
    INVERSE         reduce using rule 52 (estatuto -> dwhile .)
    ROTATE          reduce using rule 52 (estatuto -> dwhile .)
    REF             reduce using rule 52 (estatuto -> dwhile .)
    RREF            reduce using rule 52 (estatuto -> dwhile .)
    EULER           reduce using rule 52 (estatuto -> dwhile .)
    DO              reduce using rule 52 (estatuto -> dwhile .)
    READ            reduce using rule 52 (estatuto -> dwhile .)
    RETURN          reduce using rule 52 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 52 (estatuto -> dwhile .)


state 59

    (53) estatuto -> readln .

    ID              reduce using rule 53 (estatuto -> readln .)
    IF              reduce using rule 53 (estatuto -> readln .)
    PRINT           reduce using rule 53 (estatuto -> readln .)
    PLOT            reduce using rule 53 (estatuto -> readln .)
    COUNT           reduce using rule 53 (estatuto -> readln .)
    COUNTIF         reduce using rule 53 (estatuto -> readln .)
    MEAN            reduce using rule 53 (estatuto -> readln .)
    MEDIAN          reduce using rule 53 (estatuto -> readln .)
    MODE            reduce using rule 53 (estatuto -> readln .)
    STDV            reduce using rule 53 (estatuto -> readln .)
    KMEANS          reduce using rule 53 (estatuto -> readln .)
    DERL            reduce using rule 53 (estatuto -> readln .)
    DBERN           reduce using rule 53 (estatuto -> readln .)
    DPOI            reduce using rule 53 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 53 (estatuto -> readln .)
    INVERSE         reduce using rule 53 (estatuto -> readln .)
    ROTATE          reduce using rule 53 (estatuto -> readln .)
    REF             reduce using rule 53 (estatuto -> readln .)
    RREF            reduce using rule 53 (estatuto -> readln .)
    EULER           reduce using rule 53 (estatuto -> readln .)
    DO              reduce using rule 53 (estatuto -> readln .)
    READ            reduce using rule 53 (estatuto -> readln .)
    RETURN          reduce using rule 53 (estatuto -> readln .)
    CBRACKET        reduce using rule 53 (estatuto -> readln .)


state 60

    (54) estatuto -> funccall .

    ID              reduce using rule 54 (estatuto -> funccall .)
    IF              reduce using rule 54 (estatuto -> funccall .)
    PRINT           reduce using rule 54 (estatuto -> funccall .)
    PLOT            reduce using rule 54 (estatuto -> funccall .)
    COUNT           reduce using rule 54 (estatuto -> funccall .)
    COUNTIF         reduce using rule 54 (estatuto -> funccall .)
    MEAN            reduce using rule 54 (estatuto -> funccall .)
    MEDIAN          reduce using rule 54 (estatuto -> funccall .)
    MODE            reduce using rule 54 (estatuto -> funccall .)
    STDV            reduce using rule 54 (estatuto -> funccall .)
    KMEANS          reduce using rule 54 (estatuto -> funccall .)
    DERL            reduce using rule 54 (estatuto -> funccall .)
    DBERN           reduce using rule 54 (estatuto -> funccall .)
    DPOI            reduce using rule 54 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 54 (estatuto -> funccall .)
    INVERSE         reduce using rule 54 (estatuto -> funccall .)
    ROTATE          reduce using rule 54 (estatuto -> funccall .)
    REF             reduce using rule 54 (estatuto -> funccall .)
    RREF            reduce using rule 54 (estatuto -> funccall .)
    EULER           reduce using rule 54 (estatuto -> funccall .)
    DO              reduce using rule 54 (estatuto -> funccall .)
    READ            reduce using rule 54 (estatuto -> funccall .)
    RETURN          reduce using rule 54 (estatuto -> funccall .)
    CBRACKET        reduce using rule 54 (estatuto -> funccall .)


state 61

    (55) estatuto -> regreso .

    ID              reduce using rule 55 (estatuto -> regreso .)
    IF              reduce using rule 55 (estatuto -> regreso .)
    PRINT           reduce using rule 55 (estatuto -> regreso .)
    PLOT            reduce using rule 55 (estatuto -> regreso .)
    COUNT           reduce using rule 55 (estatuto -> regreso .)
    COUNTIF         reduce using rule 55 (estatuto -> regreso .)
    MEAN            reduce using rule 55 (estatuto -> regreso .)
    MEDIAN          reduce using rule 55 (estatuto -> regreso .)
    MODE            reduce using rule 55 (estatuto -> regreso .)
    STDV            reduce using rule 55 (estatuto -> regreso .)
    KMEANS          reduce using rule 55 (estatuto -> regreso .)
    DERL            reduce using rule 55 (estatuto -> regreso .)
    DBERN           reduce using rule 55 (estatuto -> regreso .)
    DPOI            reduce using rule 55 (estatuto -> regreso .)
    TRANSPOSE       reduce using rule 55 (estatuto -> regreso .)
    INVERSE         reduce using rule 55 (estatuto -> regreso .)
    ROTATE          reduce using rule 55 (estatuto -> regreso .)
    REF             reduce using rule 55 (estatuto -> regreso .)
    RREF            reduce using rule 55 (estatuto -> regreso .)
    EULER           reduce using rule 55 (estatuto -> regreso .)
    DO              reduce using rule 55 (estatuto -> regreso .)
    READ            reduce using rule 55 (estatuto -> regreso .)
    RETURN          reduce using rule 55 (estatuto -> regreso .)
    CBRACKET        reduce using rule 55 (estatuto -> regreso .)


state 62

    (62) asign -> ID . EQUALS expresion SCOLON
    (63) asign -> ID . EQUALS ID SCOLON
    (64) asign -> ID . EQUALS ID asign2 SCOLON
    (65) asign -> ID . asign2 EQUALS ID SCOLON
    (66) asign -> ID . asign2 EQUALS expresion SCOLON
    (67) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (68) asign -> ID . EQUALS funccall afcn1
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

    EQUALS          shift and go to state 104
    OPAREN          shift and go to state 106
    LCOR            shift and go to state 88

    asign2                         shift and go to state 105

state 63

    (90) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 107


state 64

    (78) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 108


state 65

    (101) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (102) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 109


state 66

    (99) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 110


state 67

    (100) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 111


state 68

    (132) metodos -> MEAN . fe1 OPAREN arrfun CPAREN SCOLON
    (146) fe1 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    fe1                            shift and go to state 112
    empty                          shift and go to state 113

state 69

    (133) metodos -> MEDIAN . fe2 OPAREN arrfun CPAREN SCOLON
    (147) fe2 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    fe2                            shift and go to state 114
    empty                          shift and go to state 115

state 70

    (134) metodos -> MODE . fe3 OPAREN arrfun CPAREN SCOLON
    (148) fe3 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    fe3                            shift and go to state 116
    empty                          shift and go to state 117

state 71

    (135) metodos -> STDV . fe4 OPAREN arrfun CPAREN SCOLON
    (149) fe4 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    fe4                            shift and go to state 118
    empty                          shift and go to state 119

state 72

    (136) metodos -> KMEANS . fe5 OPAREN kval CPAREN SCOLON
    (150) fe5 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    fe5                            shift and go to state 120
    empty                          shift and go to state 121

state 73

    (137) metodos -> DERL . dmn1 OPAREN expfunc CPAREN SCOLON
    (159) dmn1 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    dmn1                           shift and go to state 122
    empty                          shift and go to state 123

state 74

    (138) metodos -> DBERN . dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (160) dbrn1 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    dbrn1                          shift and go to state 124
    empty                          shift and go to state 125

state 75

    (139) metodos -> DPOI . dp1 OPAREN expfunc2 CPAREN SCOLON
    (161) dp1 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    dp1                            shift and go to state 126
    empty                          shift and go to state 127

state 76

    (140) metodos -> TRANSPOSE . tp1 OPAREN mmmfunc CPAREN SCOLON
    (162) tp1 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    tp1                            shift and go to state 128
    empty                          shift and go to state 129

state 77

    (141) metodos -> INVERSE . tp2 OPAREN mmmfunc CPAREN SCOLON
    (163) tp2 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    tp2                            shift and go to state 130
    empty                          shift and go to state 131

state 78

    (142) metodos -> ROTATE . tp3 OPAREN mmmfunc CPAREN SCOLON
    (164) tp3 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    tp3                            shift and go to state 132
    empty                          shift and go to state 133

state 79

    (143) metodos -> REF . tp4 OPAREN mmmfunc CPAREN SCOLON
    (165) tp4 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    tp4                            shift and go to state 134
    empty                          shift and go to state 135

state 80

    (144) metodos -> RREF . tp5 OPAREN mmmfunc CPAREN SCOLON
    (166) tp5 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    tp5                            shift and go to state 136
    empty                          shift and go to state 137

state 81

    (145) metodos -> EULER . tp6 OPAREN CPAREN SCOLON
    (167) tp6 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    tp6                            shift and go to state 138
    empty                          shift and go to state 139

state 82

    (124) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (125) wn1 -> . empty
    (180) empty -> .

    OBRACKET        reduce using rule 180 (empty -> .)

    wn1                            shift and go to state 140
    empty                          shift and go to state 141

state 83

    (130) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 142


state 84

    (56) regreso -> RETURN . OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> RETURN . OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> RETURN . OPAREN funccall CPAREN SCOLON

    OPAREN          shift and go to state 143


state 85

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (180) empty -> .

    OPAREN          reduce using rule 180 (empty -> .)

    mn1                            shift and go to state 144
    empty                          shift and go to state 145

state 86

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (180) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 180 (empty -> .)
    OBRACKET        reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    lugstat2                       shift and go to state 146
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 87

    (120) varcte -> ID asign2 .

    RCOR            reduce using rule 120 (varcte -> ID asign2 .)
    MULT            reduce using rule 120 (varcte -> ID asign2 .)
    DIV             reduce using rule 120 (varcte -> ID asign2 .)
    PLUS            reduce using rule 120 (varcte -> ID asign2 .)
    MINUS           reduce using rule 120 (varcte -> ID asign2 .)
    RELOP           reduce using rule 120 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 120 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 120 (varcte -> ID asign2 .)
    COMMA           reduce using rule 120 (varcte -> ID asign2 .)
    ID              reduce using rule 120 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 120 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 120 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 120 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 120 (varcte -> ID asign2 .)


state 88

    (69) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (70) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (71) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (72) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (73) asign2 -> LCOR . expresion RCOR
    (74) asign2 -> LCOR . varcte RCOR
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 38
    varcte                         shift and go to state 39
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 89

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 148
    LCOR            shift and go to state 147


state 90

    (69) asign2 -> LCOR expresion RCOR . LCOR varcte RCOR
    (70) asign2 -> LCOR expresion RCOR . LCOR expresion RCOR
    (73) asign2 -> LCOR expresion RCOR .

    LCOR            shift and go to state 149
    COLON           reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    MULT            reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    DIV             reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    ID              reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 73 (asign2 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 73 (asign2 -> LCOR expresion RCOR .)


state 91

    (110) expresion -> expresion RELOP . exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    exp                            shift and go to state 150
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 92

    (71) asign2 -> LCOR varcte RCOR . LCOR expresion RCOR
    (72) asign2 -> LCOR varcte RCOR . LCOR varcte RCOR
    (74) asign2 -> LCOR varcte RCOR .

    LCOR            shift and go to state 151
    COLON           reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    MULT            reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    DIV             reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    ID              reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 74 (asign2 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 74 (asign2 -> LCOR varcte RCOR .)


state 93

    (112) exp -> termino PLUS . exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    termino                        shift and go to state 43
    exp                            shift and go to state 152
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 94

    (113) exp -> termino MINUS . exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    termino                        shift and go to state 43
    exp                            shift and go to state 153
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 95

    (115) termino -> factor MULT . termino
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    factor                         shift and go to state 44
    termino                        shift and go to state 154
    varcte                         shift and go to state 98

state 96

    (116) termino -> factor DIV . termino
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    factor                         shift and go to state 44
    termino                        shift and go to state 155
    varcte                         shift and go to state 98

state 97

    (117) factor -> OPAREN expresion . CPAREN
    (110) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 156
    RELOP           shift and go to state 91


state 98

    (118) factor -> varcte .

    MULT            reduce using rule 118 (factor -> varcte .)
    DIV             reduce using rule 118 (factor -> varcte .)
    PLUS            reduce using rule 118 (factor -> varcte .)
    MINUS           reduce using rule 118 (factor -> varcte .)
    CPAREN          reduce using rule 118 (factor -> varcte .)
    RELOP           reduce using rule 118 (factor -> varcte .)
    RCOR            reduce using rule 118 (factor -> varcte .)
    SCOLON          reduce using rule 118 (factor -> varcte .)
    COMMA           reduce using rule 118 (factor -> varcte .)
    ID              reduce using rule 118 (factor -> varcte .)
    OPAREN          reduce using rule 118 (factor -> varcte .)
    NUMERIC         reduce using rule 118 (factor -> varcte .)
    NUMBER          reduce using rule 118 (factor -> varcte .)
    LOGICAL         reduce using rule 118 (factor -> varcte .)


state 99

    (122) varcte -> NUMBER .

    MULT            reduce using rule 122 (varcte -> NUMBER .)
    DIV             reduce using rule 122 (varcte -> NUMBER .)
    PLUS            reduce using rule 122 (varcte -> NUMBER .)
    MINUS           reduce using rule 122 (varcte -> NUMBER .)
    CPAREN          reduce using rule 122 (varcte -> NUMBER .)
    RELOP           reduce using rule 122 (varcte -> NUMBER .)
    RCOR            reduce using rule 122 (varcte -> NUMBER .)
    SCOLON          reduce using rule 122 (varcte -> NUMBER .)
    COMMA           reduce using rule 122 (varcte -> NUMBER .)
    ID              reduce using rule 122 (varcte -> NUMBER .)
    OPAREN          reduce using rule 122 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 122 (varcte -> NUMBER .)
    NUMBER          reduce using rule 122 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 122 (varcte -> NUMBER .)


state 100

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 157


state 101

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 102

    (35) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 35 (block -> OBRACKET block2 CBRACKET .)


state 103

    (37) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 37 (block2 -> estatuto block2 .)


state 104

    (62) asign -> ID EQUALS . expresion SCOLON
    (63) asign -> ID EQUALS . ID SCOLON
    (64) asign -> ID EQUALS . ID asign2 SCOLON
    (68) asign -> ID EQUALS . funccall afcn1
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 158
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 159
    funccall                       shift and go to state 160
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 105

    (65) asign -> ID asign2 . EQUALS ID SCOLON
    (66) asign -> ID asign2 . EQUALS expresion SCOLON
    (67) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 161


state 106

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN . fcn1 ID fcn2 funccall2 CPAREN
    (26) fcn1 -> . empty
    (180) empty -> .

    ID              reduce using rule 180 (empty -> .)
    OPAREN          reduce using rule 180 (empty -> .)
    NUMERIC         reduce using rule 180 (empty -> .)
    NUMBER          reduce using rule 180 (empty -> .)
    LOGICAL         reduce using rule 180 (empty -> .)

    fcn1                           shift and go to state 162
    empty                          shift and go to state 163

state 107

    (90) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 164
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 108

    (78) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (80) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (81) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 165
    STRING          shift and go to state 167
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 166
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 109

    (101) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (102) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (106) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (107) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (108) xyfunc -> . empty
    (103) plot2 -> . LCOR varcte COMMA varcte RCOR
    (104) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (105) plot2 -> . empty
    (180) empty -> .

    FX              shift and go to state 170
    FY              shift and go to state 171
    LCOR            shift and go to state 173
    CPAREN          reduce using rule 180 (empty -> .)

    xyfunc                         shift and go to state 168
    plot2                          shift and go to state 169
    empty                          shift and go to state 172

state 110

    (99) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 174


state 111

    (100) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 175


state 112

    (132) metodos -> MEAN fe1 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 176


state 113

    (146) fe1 -> empty .

    OPAREN          reduce using rule 146 (fe1 -> empty .)


state 114

    (133) metodos -> MEDIAN fe2 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 177


state 115

    (147) fe2 -> empty .

    OPAREN          reduce using rule 147 (fe2 -> empty .)


state 116

    (134) metodos -> MODE fe3 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 178


state 117

    (148) fe3 -> empty .

    OPAREN          reduce using rule 148 (fe3 -> empty .)


state 118

    (135) metodos -> STDV fe4 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 179


state 119

    (149) fe4 -> empty .

    OPAREN          reduce using rule 149 (fe4 -> empty .)


state 120

    (136) metodos -> KMEANS fe5 . OPAREN kval CPAREN SCOLON

    OPAREN          shift and go to state 180


state 121

    (150) fe5 -> empty .

    OPAREN          reduce using rule 150 (fe5 -> empty .)


state 122

    (137) metodos -> DERL dmn1 . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 181


state 123

    (159) dmn1 -> empty .

    OPAREN          reduce using rule 159 (dmn1 -> empty .)


state 124

    (138) metodos -> DBERN dbrn1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 182


state 125

    (160) dbrn1 -> empty .

    OPAREN          reduce using rule 160 (dbrn1 -> empty .)


state 126

    (139) metodos -> DPOI dp1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 183


state 127

    (161) dp1 -> empty .

    OPAREN          reduce using rule 161 (dp1 -> empty .)


state 128

    (140) metodos -> TRANSPOSE tp1 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 184


state 129

    (162) tp1 -> empty .

    OPAREN          reduce using rule 162 (tp1 -> empty .)


state 130

    (141) metodos -> INVERSE tp2 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 185


state 131

    (163) tp2 -> empty .

    OPAREN          reduce using rule 163 (tp2 -> empty .)


state 132

    (142) metodos -> ROTATE tp3 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 186


state 133

    (164) tp3 -> empty .

    OPAREN          reduce using rule 164 (tp3 -> empty .)


state 134

    (143) metodos -> REF tp4 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 187


state 135

    (165) tp4 -> empty .

    OPAREN          reduce using rule 165 (tp4 -> empty .)


state 136

    (144) metodos -> RREF tp5 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 188


state 137

    (166) tp5 -> empty .

    OPAREN          reduce using rule 166 (tp5 -> empty .)


state 138

    (145) metodos -> EULER tp6 . OPAREN CPAREN SCOLON

    OPAREN          shift and go to state 189


state 139

    (167) tp6 -> empty .

    OPAREN          reduce using rule 167 (tp6 -> empty .)


state 140

    (124) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (127) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 191

    wblock                         shift and go to state 190

state 141

    (125) wn1 -> empty .

    OBRACKET        reduce using rule 125 (wn1 -> empty .)


state 142

    (130) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 192


state 143

    (56) regreso -> RETURN OPAREN . ID regnum1 CPAREN SCOLON
    (57) regreso -> RETURN OPAREN . expresion regnum2 CPAREN SCOLON
    (58) regreso -> RETURN OPAREN . funccall CPAREN SCOLON
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 193
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 194
    funccall                       shift and go to state 195
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 144

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 196


state 145

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 146

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 147

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 197


state 148

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 198

state 149

    (69) asign2 -> LCOR expresion RCOR LCOR . varcte RCOR
    (70) asign2 -> LCOR expresion RCOR LCOR . expresion RCOR
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 199
    varcte                         shift and go to state 200
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 150

    (110) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 110 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 110 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 110 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 110 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 110 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 110 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 110 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 110 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 110 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 110 (expresion -> expresion RELOP exp .)


state 151

    (71) asign2 -> LCOR varcte RCOR LCOR . expresion RCOR
    (72) asign2 -> LCOR varcte RCOR LCOR . varcte RCOR
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    varcte                         shift and go to state 201
    expresion                      shift and go to state 202
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 152

    (112) exp -> termino PLUS exp .

    RCOR            reduce using rule 112 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 112 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 112 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 112 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 112 (exp -> termino PLUS exp .)
    ID              reduce using rule 112 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 112 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 112 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 112 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 112 (exp -> termino PLUS exp .)


state 153

    (113) exp -> termino MINUS exp .

    RCOR            reduce using rule 113 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 113 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 113 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 113 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 113 (exp -> termino MINUS exp .)
    ID              reduce using rule 113 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 113 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 113 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 113 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 113 (exp -> termino MINUS exp .)


state 154

    (115) termino -> factor MULT termino .

    PLUS            reduce using rule 115 (termino -> factor MULT termino .)
    MINUS           reduce using rule 115 (termino -> factor MULT termino .)
    RCOR            reduce using rule 115 (termino -> factor MULT termino .)
    RELOP           reduce using rule 115 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 115 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 115 (termino -> factor MULT termino .)
    COMMA           reduce using rule 115 (termino -> factor MULT termino .)
    ID              reduce using rule 115 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 115 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 115 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 115 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 115 (termino -> factor MULT termino .)


state 155

    (116) termino -> factor DIV termino .

    PLUS            reduce using rule 116 (termino -> factor DIV termino .)
    MINUS           reduce using rule 116 (termino -> factor DIV termino .)
    RCOR            reduce using rule 116 (termino -> factor DIV termino .)
    RELOP           reduce using rule 116 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 116 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 116 (termino -> factor DIV termino .)
    COMMA           reduce using rule 116 (termino -> factor DIV termino .)
    ID              reduce using rule 116 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 116 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 116 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 116 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 116 (termino -> factor DIV termino .)


state 156

    (117) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 117 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 117 (factor -> OPAREN expresion CPAREN .)


state 157

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 158

    (63) asign -> ID EQUALS ID . SCOLON
    (64) asign -> ID EQUALS ID . asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 203
    OPAREN          shift and go to state 106
    MULT            reduce using rule 119 (varcte -> ID .)
    DIV             reduce using rule 119 (varcte -> ID .)
    PLUS            reduce using rule 119 (varcte -> ID .)
    MINUS           reduce using rule 119 (varcte -> ID .)
    RELOP           reduce using rule 119 (varcte -> ID .)
    LCOR            shift and go to state 88

  ! SCOLON          [ reduce using rule 119 (varcte -> ID .) ]

    asign2                         shift and go to state 204

state 159

    (62) asign -> ID EQUALS expresion . SCOLON
    (110) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 205
    RELOP           shift and go to state 91


state 160

    (68) asign -> ID EQUALS funccall . afcn1
    (61) afcn1 -> . empty
    (180) empty -> .

    ID              reduce using rule 180 (empty -> .)
    IF              reduce using rule 180 (empty -> .)
    PRINT           reduce using rule 180 (empty -> .)
    PLOT            reduce using rule 180 (empty -> .)
    COUNT           reduce using rule 180 (empty -> .)
    COUNTIF         reduce using rule 180 (empty -> .)
    MEAN            reduce using rule 180 (empty -> .)
    MEDIAN          reduce using rule 180 (empty -> .)
    MODE            reduce using rule 180 (empty -> .)
    STDV            reduce using rule 180 (empty -> .)
    KMEANS          reduce using rule 180 (empty -> .)
    DERL            reduce using rule 180 (empty -> .)
    DBERN           reduce using rule 180 (empty -> .)
    DPOI            reduce using rule 180 (empty -> .)
    TRANSPOSE       reduce using rule 180 (empty -> .)
    INVERSE         reduce using rule 180 (empty -> .)
    ROTATE          reduce using rule 180 (empty -> .)
    REF             reduce using rule 180 (empty -> .)
    RREF            reduce using rule 180 (empty -> .)
    EULER           reduce using rule 180 (empty -> .)
    DO              reduce using rule 180 (empty -> .)
    READ            reduce using rule 180 (empty -> .)
    RETURN          reduce using rule 180 (empty -> .)
    CBRACKET        reduce using rule 180 (empty -> .)

    afcn1                          shift and go to state 206
    empty                          shift and go to state 207

state 161

    (65) asign -> ID asign2 EQUALS . ID SCOLON
    (66) asign -> ID asign2 EQUALS . expresion SCOLON
    (67) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 208
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 209
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 162

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN fcn1 . ID fcn2 funccall2 CPAREN
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 210
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 211
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 163

    (26) fcn1 -> empty .

    ID              reduce using rule 26 (fcn1 -> empty .)
    OPAREN          reduce using rule 26 (fcn1 -> empty .)
    NUMERIC         reduce using rule 26 (fcn1 -> empty .)
    NUMBER          reduce using rule 26 (fcn1 -> empty .)
    LOGICAL         reduce using rule 26 (fcn1 -> empty .)


state 164

    (90) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (110) expresion -> expresion . RELOP exp
    (92) cn1 -> . empty
    (180) empty -> .

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 180 (empty -> .)

    cn1                            shift and go to state 212
    empty                          shift and go to state 213

state 165

    (78) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (89) en3 -> . empty
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR
    (180) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 119 (varcte -> ID .)
    MULT            reduce using rule 119 (varcte -> ID .)
    DIV             reduce using rule 119 (varcte -> ID .)
    PLUS            reduce using rule 119 (varcte -> ID .)
    MINUS           reduce using rule 119 (varcte -> ID .)
    RELOP           reduce using rule 119 (varcte -> ID .)
    CPAREN          reduce using rule 119 (varcte -> ID .)
    LCOR            shift and go to state 88
    COMMA           reduce using rule 180 (empty -> .)

  ! CPAREN          [ reduce using rule 180 (empty -> .) ]

    en3                            shift and go to state 214
    asign2                         shift and go to state 87
    empty                          shift and go to state 215

state 166

    (79) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (110) expresion -> expresion . RELOP exp
    (87) en1 -> . empty
    (180) empty -> .

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 180 (empty -> .)

    en1                            shift and go to state 216
    empty                          shift and go to state 217

state 167

    (80) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (81) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (82) escrt2 -> . COMMA escrt3
    (83) escrt2 -> . empty
    (180) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 218
    COMMA           shift and go to state 220

  ! CPAREN          [ reduce using rule 180 (empty -> .) ]

    escrt2                         shift and go to state 219
    empty                          shift and go to state 221

state 168

    (101) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 222


state 169

    (102) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 223


state 170

    (106) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 224


state 171

    (107) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 225


state 172

    (108) xyfunc -> empty .
    (105) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 105 (plot2 -> empty .)
    CPAREN          reduce using rule 105 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 108 (xyfunc -> empty .) ]


state 173

    (103) plot2 -> LCOR . varcte COMMA varcte RCOR
    (104) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 226

state 174

    (99) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 227


state 175

    (100) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 228


state 176

    (132) metodos -> MEAN fe1 OPAREN . arrfun CPAREN SCOLON
    (152) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 230

    arrfun                         shift and go to state 229

state 177

    (133) metodos -> MEDIAN fe2 OPAREN . arrfun CPAREN SCOLON
    (152) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 230

    arrfun                         shift and go to state 231

state 178

    (134) metodos -> MODE fe3 OPAREN . arrfun CPAREN SCOLON
    (152) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 230

    arrfun                         shift and go to state 232

state 179

    (135) metodos -> STDV fe4 OPAREN . arrfun CPAREN SCOLON
    (152) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 230

    arrfun                         shift and go to state 233

state 180

    (136) metodos -> KMEANS fe5 OPAREN . kval CPAREN SCOLON
    (151) kval -> . varcte COMMA arrfun2 COMMA arrfun3
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    kval                           shift and go to state 234
    varcte                         shift and go to state 235

state 181

    (137) metodos -> DERL dmn1 OPAREN . expfunc CPAREN SCOLON
    (168) expfunc -> . ID COMMA ID COMMA ID
    (169) expfunc -> . varcte COMMA varcte COMMA varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 237
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expfunc                        shift and go to state 236
    varcte                         shift and go to state 238

state 182

    (138) metodos -> DBERN dbrn1 OPAREN . expfunc2 CPAREN SCOLON
    (170) expfunc2 -> . ID COMMA ID
    (171) expfunc2 -> . varcte COMMA varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 240
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expfunc2                       shift and go to state 239
    varcte                         shift and go to state 241

state 183

    (139) metodos -> DPOI dp1 OPAREN . expfunc2 CPAREN SCOLON
    (170) expfunc2 -> . ID COMMA ID
    (171) expfunc2 -> . varcte COMMA varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 240
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expfunc2                       shift and go to state 242
    varcte                         shift and go to state 241

state 184

    (140) metodos -> TRANSPOSE tp1 OPAREN . mmmfunc CPAREN SCOLON
    (172) mmmfunc -> . LCOR RCOR
    (173) mmmfunc -> . LCOR mmmarray RCOR
    (174) mmmfunc -> . ID

    LCOR            shift and go to state 244
    ID              shift and go to state 245

    mmmfunc                        shift and go to state 243

state 185

    (141) metodos -> INVERSE tp2 OPAREN . mmmfunc CPAREN SCOLON
    (172) mmmfunc -> . LCOR RCOR
    (173) mmmfunc -> . LCOR mmmarray RCOR
    (174) mmmfunc -> . ID

    LCOR            shift and go to state 244
    ID              shift and go to state 245

    mmmfunc                        shift and go to state 246

state 186

    (142) metodos -> ROTATE tp3 OPAREN . mmmfunc CPAREN SCOLON
    (172) mmmfunc -> . LCOR RCOR
    (173) mmmfunc -> . LCOR mmmarray RCOR
    (174) mmmfunc -> . ID

    LCOR            shift and go to state 244
    ID              shift and go to state 245

    mmmfunc                        shift and go to state 247

state 187

    (143) metodos -> REF tp4 OPAREN . mmmfunc CPAREN SCOLON
    (172) mmmfunc -> . LCOR RCOR
    (173) mmmfunc -> . LCOR mmmarray RCOR
    (174) mmmfunc -> . ID

    LCOR            shift and go to state 244
    ID              shift and go to state 245

    mmmfunc                        shift and go to state 248

state 188

    (144) metodos -> RREF tp5 OPAREN . mmmfunc CPAREN SCOLON
    (172) mmmfunc -> . LCOR RCOR
    (173) mmmfunc -> . LCOR mmmarray RCOR
    (174) mmmfunc -> . ID

    LCOR            shift and go to state 244
    ID              shift and go to state 245

    mmmfunc                        shift and go to state 249

state 189

    (145) metodos -> EULER tp6 OPAREN . CPAREN SCOLON

    CPAREN          shift and go to state 250


state 190

    (124) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 251


state 191

    (127) wblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (180) empty -> .
    (62) asign -> . ID EQUALS expresion SCOLON
    (63) asign -> . ID EQUALS ID SCOLON
    (64) asign -> . ID EQUALS ID asign2 SCOLON
    (65) asign -> . ID asign2 EQUALS ID SCOLON
    (66) asign -> . ID asign2 EQUALS expresion SCOLON
    (67) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) asign -> . ID EQUALS funccall afcn1
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (101) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (102) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (99) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (100) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (132) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (136) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (137) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (138) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (140) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (145) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (124) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (130) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> . RETURN OPAREN funccall CPAREN SCOLON

    CBRACKET        reduce using rule 180 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    block2                         shift and go to state 252
    estatuto                       shift and go to state 49
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 192

    (130) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (131) rn1 -> . empty
    (180) empty -> .

    CPAREN          reduce using rule 180 (empty -> .)

    rn1                            shift and go to state 253
    empty                          shift and go to state 254

state 193

    (56) regreso -> RETURN OPAREN ID . regnum1 CPAREN SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (59) regnum1 -> .
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

  ! reduce/reduce conflict for CPAREN resolved using rule 59 (regnum1 -> .)
    OPAREN          shift and go to state 106
    MULT            reduce using rule 119 (varcte -> ID .)
    DIV             reduce using rule 119 (varcte -> ID .)
    PLUS            reduce using rule 119 (varcte -> ID .)
    MINUS           reduce using rule 119 (varcte -> ID .)
    RELOP           reduce using rule 119 (varcte -> ID .)
    CPAREN          reduce using rule 59 (regnum1 -> .)
    LCOR            shift and go to state 88

  ! CPAREN          [ reduce using rule 119 (varcte -> ID .) ]

    regnum1                        shift and go to state 255
    asign2                         shift and go to state 87

state 194

    (57) regreso -> RETURN OPAREN expresion . regnum2 CPAREN SCOLON
    (110) expresion -> expresion . RELOP exp
    (60) regnum2 -> .

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 60 (regnum2 -> .)

    regnum2                        shift and go to state 256

state 195

    (58) regreso -> RETURN OPAREN funccall . CPAREN SCOLON

    CPAREN          shift and go to state 257


state 196

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (180) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 180 (empty -> .)

    modules2                       shift and go to state 258
    vars                           shift and go to state 259
    empty                          shift and go to state 260

state 197

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 261


state 198

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 262


state 199

    (70) asign2 -> LCOR expresion RCOR LCOR expresion . RCOR
    (110) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 263
    RELOP           shift and go to state 91


state 200

    (69) asign2 -> LCOR expresion RCOR LCOR varcte . RCOR
    (118) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 264
    MULT            reduce using rule 118 (factor -> varcte .)
    DIV             reduce using rule 118 (factor -> varcte .)
    PLUS            reduce using rule 118 (factor -> varcte .)
    MINUS           reduce using rule 118 (factor -> varcte .)
    RELOP           reduce using rule 118 (factor -> varcte .)

  ! RCOR            [ reduce using rule 118 (factor -> varcte .) ]


state 201

    (72) asign2 -> LCOR varcte RCOR LCOR varcte . RCOR
    (118) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 265
    MULT            reduce using rule 118 (factor -> varcte .)
    DIV             reduce using rule 118 (factor -> varcte .)
    PLUS            reduce using rule 118 (factor -> varcte .)
    MINUS           reduce using rule 118 (factor -> varcte .)
    RELOP           reduce using rule 118 (factor -> varcte .)

  ! RCOR            [ reduce using rule 118 (factor -> varcte .) ]


state 202

    (71) asign2 -> LCOR varcte RCOR LCOR expresion . RCOR
    (110) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 266
    RELOP           shift and go to state 91


state 203

    (63) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    EULER           reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    RETURN          reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 63 (asign -> ID EQUALS ID SCOLON .)


state 204

    (64) asign -> ID EQUALS ID asign2 . SCOLON
    (120) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 267
    MULT            reduce using rule 120 (varcte -> ID asign2 .)
    DIV             reduce using rule 120 (varcte -> ID asign2 .)
    PLUS            reduce using rule 120 (varcte -> ID asign2 .)
    MINUS           reduce using rule 120 (varcte -> ID asign2 .)
    RELOP           reduce using rule 120 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 120 (varcte -> ID asign2 .) ]


state 205

    (62) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    EULER           reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    RETURN          reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 62 (asign -> ID EQUALS expresion SCOLON .)


state 206

    (68) asign -> ID EQUALS funccall afcn1 .

    ID              reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    IF              reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    PRINT           reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    PLOT            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    COUNT           reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    COUNTIF         reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    MEAN            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    MEDIAN          reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    MODE            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    STDV            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    KMEANS          reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    DERL            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    DBERN           reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    DPOI            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    TRANSPOSE       reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    INVERSE         reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    ROTATE          reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    REF             reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    RREF            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    EULER           reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    DO              reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    READ            reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    RETURN          reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)
    CBRACKET        reduce using rule 68 (asign -> ID EQUALS funccall afcn1 .)


state 207

    (61) afcn1 -> empty .

    ID              reduce using rule 61 (afcn1 -> empty .)
    IF              reduce using rule 61 (afcn1 -> empty .)
    PRINT           reduce using rule 61 (afcn1 -> empty .)
    PLOT            reduce using rule 61 (afcn1 -> empty .)
    COUNT           reduce using rule 61 (afcn1 -> empty .)
    COUNTIF         reduce using rule 61 (afcn1 -> empty .)
    MEAN            reduce using rule 61 (afcn1 -> empty .)
    MEDIAN          reduce using rule 61 (afcn1 -> empty .)
    MODE            reduce using rule 61 (afcn1 -> empty .)
    STDV            reduce using rule 61 (afcn1 -> empty .)
    KMEANS          reduce using rule 61 (afcn1 -> empty .)
    DERL            reduce using rule 61 (afcn1 -> empty .)
    DBERN           reduce using rule 61 (afcn1 -> empty .)
    DPOI            reduce using rule 61 (afcn1 -> empty .)
    TRANSPOSE       reduce using rule 61 (afcn1 -> empty .)
    INVERSE         reduce using rule 61 (afcn1 -> empty .)
    ROTATE          reduce using rule 61 (afcn1 -> empty .)
    REF             reduce using rule 61 (afcn1 -> empty .)
    RREF            reduce using rule 61 (afcn1 -> empty .)
    EULER           reduce using rule 61 (afcn1 -> empty .)
    DO              reduce using rule 61 (afcn1 -> empty .)
    READ            reduce using rule 61 (afcn1 -> empty .)
    RETURN          reduce using rule 61 (afcn1 -> empty .)
    CBRACKET        reduce using rule 61 (afcn1 -> empty .)


state 208

    (65) asign -> ID asign2 EQUALS ID . SCOLON
    (67) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 269
    MULT            reduce using rule 119 (varcte -> ID .)
    DIV             reduce using rule 119 (varcte -> ID .)
    PLUS            reduce using rule 119 (varcte -> ID .)
    MINUS           reduce using rule 119 (varcte -> ID .)
    RELOP           reduce using rule 119 (varcte -> ID .)
    LCOR            shift and go to state 88

  ! SCOLON          [ reduce using rule 119 (varcte -> ID .) ]

    asign2                         shift and go to state 268

state 209

    (66) asign -> ID asign2 EQUALS expresion . SCOLON
    (110) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 270
    RELOP           shift and go to state 91


state 210

    (25) funccall -> ID OPAREN fcn1 ID . fcn2 funccall2 CPAREN
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (27) fcn2 -> . empty
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR
    (180) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 119 (varcte -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 119 (varcte -> ID .)
  ! reduce/reduce conflict for CPAREN resolved using rule 119 (varcte -> ID .)
    MULT            reduce using rule 119 (varcte -> ID .)
    DIV             reduce using rule 119 (varcte -> ID .)
    PLUS            reduce using rule 119 (varcte -> ID .)
    MINUS           reduce using rule 119 (varcte -> ID .)
    RELOP           reduce using rule 119 (varcte -> ID .)
    COMMA           reduce using rule 119 (varcte -> ID .)
    ID              reduce using rule 119 (varcte -> ID .)
    CPAREN          reduce using rule 119 (varcte -> ID .)
    LCOR            shift and go to state 88

  ! COMMA           [ reduce using rule 180 (empty -> .) ]
  ! ID              [ reduce using rule 180 (empty -> .) ]
  ! CPAREN          [ reduce using rule 180 (empty -> .) ]

    fcn2                           shift and go to state 271
    asign2                         shift and go to state 87
    empty                          shift and go to state 272

state 211

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (110) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (180) empty -> .

    RELOP           shift and go to state 91
    COMMA           reduce using rule 180 (empty -> .)
    ID              reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    fcn2                           shift and go to state 273
    empty                          shift and go to state 272

state 212

    (90) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (91) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 274


state 213

    (92) cn1 -> empty .

    CPAREN          reduce using rule 92 (cn1 -> empty .)


state 214

    (78) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (82) escrt2 -> . COMMA escrt3
    (83) escrt2 -> . empty
    (180) empty -> .

    COMMA           shift and go to state 220
    CPAREN          reduce using rule 180 (empty -> .)

    escrt2                         shift and go to state 275
    empty                          shift and go to state 221

state 215

    (89) en3 -> empty .

    COMMA           reduce using rule 89 (en3 -> empty .)
    CPAREN          reduce using rule 89 (en3 -> empty .)


state 216

    (79) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 276


state 217

    (87) en1 -> empty .

    CPAREN          reduce using rule 87 (en1 -> empty .)


state 218

    (80) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (88) en2 -> . empty
    (180) empty -> .

    SCOLON          reduce using rule 180 (empty -> .)

    en2                            shift and go to state 277
    empty                          shift and go to state 278

state 219

    (81) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 279


state 220

    (82) escrt2 -> COMMA . escrt3
    (84) escrt3 -> . ID escrt2
    (85) escrt3 -> . ID
    (86) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 281
    STRING          shift and go to state 282

    escrt3                         shift and go to state 280

state 221

    (83) escrt2 -> empty .

    CPAREN          reduce using rule 83 (escrt2 -> empty .)
    COMMA           reduce using rule 83 (escrt2 -> empty .)


state 222

    (101) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 283


state 223

    (102) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 284


state 224

    (106) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    exp                            shift and go to state 285
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 225

    (107) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    exp                            shift and go to state 286
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 226

    (103) plot2 -> LCOR varcte . COMMA varcte RCOR
    (104) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 287


state 227

    (99) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 288

state 228

    (100) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 289

state 229

    (132) metodos -> MEAN fe1 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 290


state 230

    (152) arrfun -> LCOR . datasetarr RCOR
    (155) datasetarr -> . varcte
    (156) datasetarr -> . varcte COMMA datasetarr
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr                     shift and go to state 291
    varcte                         shift and go to state 292

state 231

    (133) metodos -> MEDIAN fe2 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 293


state 232

    (134) metodos -> MODE fe3 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 294


state 233

    (135) metodos -> STDV fe4 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 295


state 234

    (136) metodos -> KMEANS fe5 OPAREN kval . CPAREN SCOLON

    CPAREN          shift and go to state 296


state 235

    (151) kval -> varcte . COMMA arrfun2 COMMA arrfun3

    COMMA           shift and go to state 297


state 236

    (137) metodos -> DERL dmn1 OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 298


state 237

    (168) expfunc -> ID . COMMA ID COMMA ID
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 299
    LCOR            shift and go to state 88

  ! COMMA           [ reduce using rule 119 (varcte -> ID .) ]

    asign2                         shift and go to state 87

state 238

    (169) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 300


state 239

    (138) metodos -> DBERN dbrn1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 301


state 240

    (170) expfunc2 -> ID . COMMA ID
    (119) varcte -> ID .
    (120) varcte -> ID . asign2
    (69) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (70) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (73) asign2 -> . LCOR expresion RCOR
    (74) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 302
    LCOR            shift and go to state 88

  ! COMMA           [ reduce using rule 119 (varcte -> ID .) ]

    asign2                         shift and go to state 87

state 241

    (171) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 303


state 242

    (139) metodos -> DPOI dp1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 304


state 243

    (140) metodos -> TRANSPOSE tp1 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 305


state 244

    (172) mmmfunc -> LCOR . RCOR
    (173) mmmfunc -> LCOR . mmmarray RCOR
    (175) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (176) mmmarray -> . libero LCOR datasetarr4 RCOR
    (177) libero -> . empty
    (180) empty -> .

    RCOR            shift and go to state 306
    LCOR            reduce using rule 180 (empty -> .)

    mmmarray                       shift and go to state 307
    libero                         shift and go to state 308
    empty                          shift and go to state 309

state 245

    (174) mmmfunc -> ID .

    CPAREN          reduce using rule 174 (mmmfunc -> ID .)


state 246

    (141) metodos -> INVERSE tp2 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 310


state 247

    (142) metodos -> ROTATE tp3 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 311


state 248

    (143) metodos -> REF tp4 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 312


state 249

    (144) metodos -> RREF tp5 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 313


state 250

    (145) metodos -> EULER tp6 OPAREN CPAREN . SCOLON

    SCOLON          shift and go to state 314


state 251

    (124) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 315


state 252

    (127) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 316


state 253

    (130) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 317


state 254

    (131) rn1 -> empty .

    CPAREN          reduce using rule 131 (rn1 -> empty .)


state 255

    (56) regreso -> RETURN OPAREN ID regnum1 . CPAREN SCOLON

    CPAREN          shift and go to state 318


state 256

    (57) regreso -> RETURN OPAREN expresion regnum2 . CPAREN SCOLON

    CPAREN          shift and go to state 319


state 257

    (58) regreso -> RETURN OPAREN funccall CPAREN . SCOLON

    SCOLON          shift and go to state 320


state 258

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 321

state 259

    (32) modules2 -> vars .

    CPAREN          reduce using rule 32 (modules2 -> vars .)
    OBRACKET        reduce using rule 32 (modules2 -> vars .)


state 260

    (33) modules2 -> empty .

    CPAREN          reduce using rule 33 (modules2 -> empty .)
    OBRACKET        reduce using rule 33 (modules2 -> empty .)


state 261

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 322


state 262

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (180) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 180 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 180 (empty -> .) ]
  ! CPAREN          [ reduce using rule 180 (empty -> .) ]

    lugstat2                       shift and go to state 323
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 263

    (70) asign2 -> LCOR expresion RCOR LCOR expresion RCOR .

    COLON           reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    ID              reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 70 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)


state 264

    (69) asign2 -> LCOR expresion RCOR LCOR varcte RCOR .

    COLON           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    ID              reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)


state 265

    (72) asign2 -> LCOR varcte RCOR LCOR varcte RCOR .

    COLON           reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    ID              reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 72 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)


state 266

    (71) asign2 -> LCOR varcte RCOR LCOR expresion RCOR .

    COLON           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    ID              reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)


state 267

    (64) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    RETURN          reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 64 (asign -> ID EQUALS ID asign2 SCOLON .)


state 268

    (67) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (120) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 324
    MULT            reduce using rule 120 (varcte -> ID asign2 .)
    DIV             reduce using rule 120 (varcte -> ID asign2 .)
    PLUS            reduce using rule 120 (varcte -> ID asign2 .)
    MINUS           reduce using rule 120 (varcte -> ID asign2 .)
    RELOP           reduce using rule 120 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 120 (varcte -> ID asign2 .) ]


state 269

    (65) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    EULER           reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    RETURN          reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 65 (asign -> ID asign2 EQUALS ID SCOLON .)


state 270

    (66) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    EULER           reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RETURN          reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 66 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 271

    (25) funccall -> ID OPAREN fcn1 ID fcn2 . funccall2 CPAREN
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (180) empty -> .

    COMMA           shift and go to state 327
    ID              shift and go to state 325
    CPAREN          reduce using rule 180 (empty -> .)

    funccall2                      shift and go to state 326
    empty                          shift and go to state 328

state 272

    (27) fcn2 -> empty .

    COMMA           reduce using rule 27 (fcn2 -> empty .)
    ID              reduce using rule 27 (fcn2 -> empty .)
    CPAREN          reduce using rule 27 (fcn2 -> empty .)


state 273

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (180) empty -> .

    COMMA           shift and go to state 327
    ID              shift and go to state 325
    CPAREN          reduce using rule 180 (empty -> .)

    funccall2                      shift and go to state 329
    empty                          shift and go to state 328

state 274

    (90) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (91) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (95) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 331

    ifblock                        shift and go to state 330

state 275

    (78) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 332


state 276

    (79) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 333


state 277

    (80) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 334


state 278

    (88) en2 -> empty .

    SCOLON          reduce using rule 88 (en2 -> empty .)


state 279

    (81) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (88) en2 -> . empty
    (180) empty -> .

    SCOLON          reduce using rule 180 (empty -> .)

    en2                            shift and go to state 335
    empty                          shift and go to state 278

state 280

    (82) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 82 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 82 (escrt2 -> COMMA escrt3 .)


state 281

    (84) escrt3 -> ID . escrt2
    (85) escrt3 -> ID .
    (82) escrt2 -> . COMMA escrt3
    (83) escrt2 -> . empty
    (180) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 85 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 85 (escrt3 -> ID .)
    COMMA           shift and go to state 220

  ! COMMA           [ reduce using rule 85 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 180 (empty -> .) ]
  ! COMMA           [ reduce using rule 180 (empty -> .) ]

    escrt2                         shift and go to state 336
    empty                          shift and go to state 221

state 282

    (86) escrt3 -> STRING . escrt2 escrt2
    (82) escrt2 -> . COMMA escrt3
    (83) escrt2 -> . empty
    (180) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 220
    CPAREN          reduce using rule 180 (empty -> .)

  ! COMMA           [ reduce using rule 180 (empty -> .) ]

    escrt2                         shift and go to state 337
    empty                          shift and go to state 221

state 283

    (101) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    EULER           reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RETURN          reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 101 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 284

    (102) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    EULER           reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RETURN          reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 102 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 285

    (106) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 338


state 286

    (107) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 339


state 287

    (103) plot2 -> LCOR varcte COMMA . varcte RCOR
    (104) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 340

state 288

    (99) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 341


state 289

    (100) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 342


state 290

    (132) metodos -> MEAN fe1 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 343


state 291

    (152) arrfun -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 344


state 292

    (155) datasetarr -> varcte .
    (156) datasetarr -> varcte . COMMA datasetarr

    RCOR            reduce using rule 155 (datasetarr -> varcte .)
    COMMA           shift and go to state 345


state 293

    (133) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 346


state 294

    (134) metodos -> MODE fe3 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 347


state 295

    (135) metodos -> STDV fe4 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 348


state 296

    (136) metodos -> KMEANS fe5 OPAREN kval CPAREN . SCOLON

    SCOLON          shift and go to state 349


state 297

    (151) kval -> varcte COMMA . arrfun2 COMMA arrfun3
    (153) arrfun2 -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 351

    arrfun2                        shift and go to state 350

state 298

    (137) metodos -> DERL dmn1 OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 352


state 299

    (168) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 353


state 300

    (169) expfunc -> varcte COMMA . varcte COMMA varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 354

state 301

    (138) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 355


state 302

    (170) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 356


state 303

    (171) expfunc2 -> varcte COMMA . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 357

state 304

    (139) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 358


state 305

    (140) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 359


state 306

    (172) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 172 (mmmfunc -> LCOR RCOR .)


state 307

    (173) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 360


state 308

    (175) mmmarray -> libero . LCOR datasetarr4 RCOR COMMA mmmarray
    (176) mmmarray -> libero . LCOR datasetarr4 RCOR

    LCOR            shift and go to state 361


state 309

    (177) libero -> empty .

    LCOR            reduce using rule 177 (libero -> empty .)


state 310

    (141) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 362


state 311

    (142) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 363


state 312

    (143) metodos -> REF tp4 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 364


state 313

    (144) metodos -> RREF tp5 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 365


state 314

    (145) metodos -> EULER tp6 OPAREN CPAREN SCOLON .

    ID              reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    IF              reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    PRINT           reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    PLOT            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    COUNT           reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    COUNTIF         reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MEAN            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MEDIAN          reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MODE            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    STDV            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    KMEANS          reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DERL            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DBERN           reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DPOI            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    INVERSE         reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    ROTATE          reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    REF             reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    RREF            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    EULER           reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DO              reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    READ            reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    RETURN          reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    CBRACKET        reduce using rule 145 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)


state 315

    (124) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (128) dwhileconds -> . expresion dwhileconds
    (129) dwhileconds -> . empty
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (180) empty -> .
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    CPAREN          reduce using rule 180 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    dwhileconds                    shift and go to state 366
    expresion                      shift and go to state 367
    empty                          shift and go to state 368
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 316

    (127) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 127 (wblock -> OBRACKET block2 CBRACKET .)


state 317

    (130) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 369


state 318

    (56) regreso -> RETURN OPAREN ID regnum1 CPAREN . SCOLON

    SCOLON          shift and go to state 370


state 319

    (57) regreso -> RETURN OPAREN expresion regnum2 CPAREN . SCOLON

    SCOLON          shift and go to state 371


state 320

    (58) regreso -> RETURN OPAREN funccall CPAREN SCOLON .

    ID              reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    IF              reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    PRINT           reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    PLOT            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    COUNT           reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    COUNTIF         reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    MEAN            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    MEDIAN          reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    MODE            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    STDV            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    KMEANS          reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    DERL            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    DBERN           reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    DPOI            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    INVERSE         reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    ROTATE          reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    REF             reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    RREF            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    EULER           reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    DO              reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    READ            reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    RETURN          reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)
    CBRACKET        reduce using rule 58 (regreso -> RETURN OPAREN funccall CPAREN SCOLON .)


state 321

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 372


state 322

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 373

state 323

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 324

    (67) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RETURN          reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 67 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 325

    (30) funccall2 -> ID . fcn2 funccall2
    (27) fcn2 -> . empty
    (180) empty -> .

    COMMA           reduce using rule 180 (empty -> .)
    ID              reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    fcn2                           shift and go to state 374
    empty                          shift and go to state 272

state 326

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 . CPAREN

    CPAREN          shift and go to state 375


state 327

    (29) funccall2 -> COMMA . expresion fcn2 funccall2
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 376
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 328

    (31) funccall2 -> empty .

    CPAREN          reduce using rule 31 (funccall2 -> empty .)


state 329

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 377


state 330

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (91) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 378
    ELSE            shift and go to state 379


state 331

    (95) ifblock -> OBRACKET . ifblock2 CBRACKET
    (96) ifblock2 -> . estatuto
    (97) ifblock2 -> . estatuto ifblock2
    (98) ifblock2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (180) empty -> .
    (62) asign -> . ID EQUALS expresion SCOLON
    (63) asign -> . ID EQUALS ID SCOLON
    (64) asign -> . ID EQUALS ID asign2 SCOLON
    (65) asign -> . ID asign2 EQUALS ID SCOLON
    (66) asign -> . ID asign2 EQUALS expresion SCOLON
    (67) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) asign -> . ID EQUALS funccall afcn1
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (101) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (102) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (99) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (100) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (132) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (136) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (137) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (138) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (140) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (145) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (124) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (130) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> . RETURN OPAREN funccall CPAREN SCOLON

    CBRACKET        reduce using rule 180 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    ifblock2                       shift and go to state 380
    estatuto                       shift and go to state 381
    empty                          shift and go to state 382
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 332

    (78) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 383


state 333

    (79) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    EULER           reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RETURN          reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 79 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 334

    (80) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    EULER           reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RETURN          reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 80 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 335

    (81) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 384


state 336

    (84) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 84 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 84 (escrt3 -> ID escrt2 .)


state 337

    (86) escrt3 -> STRING escrt2 . escrt2
    (82) escrt2 -> . COMMA escrt3
    (83) escrt2 -> . empty
    (180) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 220
    CPAREN          reduce using rule 180 (empty -> .)

  ! COMMA           [ reduce using rule 180 (empty -> .) ]

    escrt2                         shift and go to state 385
    empty                          shift and go to state 221

state 338

    (106) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (106) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (107) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (108) xyfunc -> . empty
    (180) empty -> .

    FX              shift and go to state 170
    FY              shift and go to state 171
    CPAREN          reduce using rule 180 (empty -> .)

    xyfunc                         shift and go to state 386
    empty                          shift and go to state 387

state 339

    (107) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (106) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (107) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (108) xyfunc -> . empty
    (180) empty -> .

    FX              shift and go to state 170
    FY              shift and go to state 171
    CPAREN          reduce using rule 180 (empty -> .)

    xyfunc                         shift and go to state 388
    empty                          shift and go to state 387

state 340

    (103) plot2 -> LCOR varcte COMMA varcte . RCOR
    (104) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 389


state 341

    (99) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 390

state 342

    (100) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 391

state 343

    (132) metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)


state 344

    (152) arrfun -> LCOR datasetarr RCOR .

    CPAREN          reduce using rule 152 (arrfun -> LCOR datasetarr RCOR .)


state 345

    (156) datasetarr -> varcte COMMA . datasetarr
    (155) datasetarr -> . varcte
    (156) datasetarr -> . varcte COMMA datasetarr
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 292
    datasetarr                     shift and go to state 392

state 346

    (133) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 133 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)


state 347

    (134) metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 134 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)


state 348

    (135) metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 135 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)


state 349

    (136) metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .

    ID              reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    IF              reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PRINT           reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PLOT            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNT           reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNTIF         reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEAN            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEDIAN          reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MODE            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    STDV            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    KMEANS          reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DERL            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DBERN           reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DPOI            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    INVERSE         reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    ROTATE          reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    REF             reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RREF            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    EULER           reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DO              reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    READ            reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RETURN          reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    CBRACKET        reduce using rule 136 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)


state 350

    (151) kval -> varcte COMMA arrfun2 . COMMA arrfun3

    COMMA           shift and go to state 393


state 351

    (153) arrfun2 -> LCOR . datasetarr RCOR
    (155) datasetarr -> . varcte
    (156) datasetarr -> . varcte COMMA datasetarr
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr                     shift and go to state 394
    varcte                         shift and go to state 292

state 352

    (137) metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RETURN          reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 137 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)


state 353

    (168) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 395


state 354

    (169) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 396


state 355

    (138) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RETURN          reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 138 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)


state 356

    (170) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 170 (expfunc2 -> ID COMMA ID .)


state 357

    (171) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 171 (expfunc2 -> varcte COMMA varcte .)


state 358

    (139) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RETURN          reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 139 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)


state 359

    (140) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 140 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)


state 360

    (173) mmmfunc -> LCOR mmmarray RCOR .

    CPAREN          reduce using rule 173 (mmmfunc -> LCOR mmmarray RCOR .)


state 361

    (175) mmmarray -> libero LCOR . datasetarr4 RCOR COMMA mmmarray
    (176) mmmarray -> libero LCOR . datasetarr4 RCOR
    (178) datasetarr4 -> . varcte
    (179) datasetarr4 -> . varcte COMMA datasetarr4
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr4                    shift and go to state 397
    varcte                         shift and go to state 398

state 362

    (141) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 141 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)


state 363

    (142) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 142 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)


state 364

    (143) metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 143 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)


state 365

    (144) metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 144 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)


state 366

    (124) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 399


state 367

    (128) dwhileconds -> expresion . dwhileconds
    (110) expresion -> expresion . RELOP exp
    (128) dwhileconds -> . expresion dwhileconds
    (129) dwhileconds -> . empty
    (109) expresion -> . exp
    (110) expresion -> . expresion RELOP exp
    (180) empty -> .
    (111) exp -> . termino
    (112) exp -> . termino PLUS exp
    (113) exp -> . termino MINUS exp
    (114) termino -> . factor
    (115) termino -> . factor MULT termino
    (116) termino -> . factor DIV termino
    (117) factor -> . OPAREN expresion CPAREN
    (118) factor -> . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 180 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 367
    dwhileconds                    shift and go to state 400
    exp                            shift and go to state 40
    empty                          shift and go to state 368
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 368

    (129) dwhileconds -> empty .

    CPAREN          reduce using rule 129 (dwhileconds -> empty .)


state 369

    (130) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    EULER           reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RETURN          reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 130 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 370

    (56) regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .

    ID              reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    IF              reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    PRINT           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    PLOT            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    COUNT           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MEAN            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MODE            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    STDV            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    KMEANS          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DERL            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DBERN           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DPOI            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    INVERSE         reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    ROTATE          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    REF             reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    RREF            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    EULER           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DO              reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    READ            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    RETURN          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)


state 371

    (57) regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .

    ID              reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    IF              reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    PRINT           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    PLOT            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    COUNT           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MEAN            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MODE            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    STDV            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    KMEANS          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DERL            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DBERN           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DPOI            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    INVERSE         reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    ROTATE          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    REF             reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    RREF            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    EULER           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DO              reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    READ            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    RETURN          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)


state 372

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (180) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 180 (empty -> .)

    modules2                       shift and go to state 401
    vars                           shift and go to state 259
    empty                          shift and go to state 260

state 373

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 402


state 374

    (30) funccall2 -> ID fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (180) empty -> .

    COMMA           shift and go to state 327
    ID              shift and go to state 325
    CPAREN          reduce using rule 180 (empty -> .)

    funccall2                      shift and go to state 403
    empty                          shift and go to state 328

state 375

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .

    ID              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    IF              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PRINT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PLOT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNTIF         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEAN            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEDIAN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MODE            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    STDV            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    KMEANS          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DERL            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DBERN           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DPOI            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    INVERSE         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    ROTATE          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    REF             reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RREF            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    EULER           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DO              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    READ            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RETURN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CBRACKET        reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CPAREN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)


state 376

    (29) funccall2 -> COMMA expresion . fcn2 funccall2
    (110) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (180) empty -> .

    RELOP           shift and go to state 91
    COMMA           reduce using rule 180 (empty -> .)
    ID              reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    fcn2                           shift and go to state 404
    empty                          shift and go to state 272

state 377

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (28) fcn3 -> . empty
    (180) empty -> .

    ID              reduce using rule 180 (empty -> .)
    IF              reduce using rule 180 (empty -> .)
    PRINT           reduce using rule 180 (empty -> .)
    PLOT            reduce using rule 180 (empty -> .)
    COUNT           reduce using rule 180 (empty -> .)
    COUNTIF         reduce using rule 180 (empty -> .)
    MEAN            reduce using rule 180 (empty -> .)
    MEDIAN          reduce using rule 180 (empty -> .)
    MODE            reduce using rule 180 (empty -> .)
    STDV            reduce using rule 180 (empty -> .)
    KMEANS          reduce using rule 180 (empty -> .)
    DERL            reduce using rule 180 (empty -> .)
    DBERN           reduce using rule 180 (empty -> .)
    DPOI            reduce using rule 180 (empty -> .)
    TRANSPOSE       reduce using rule 180 (empty -> .)
    INVERSE         reduce using rule 180 (empty -> .)
    ROTATE          reduce using rule 180 (empty -> .)
    REF             reduce using rule 180 (empty -> .)
    RREF            reduce using rule 180 (empty -> .)
    EULER           reduce using rule 180 (empty -> .)
    DO              reduce using rule 180 (empty -> .)
    READ            reduce using rule 180 (empty -> .)
    RETURN          reduce using rule 180 (empty -> .)
    CBRACKET        reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    fcn3                           shift and go to state 405
    empty                          shift and go to state 406

state 378

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (93) cn2 -> . empty
    (180) empty -> .

    ID              reduce using rule 180 (empty -> .)
    IF              reduce using rule 180 (empty -> .)
    PRINT           reduce using rule 180 (empty -> .)
    PLOT            reduce using rule 180 (empty -> .)
    COUNT           reduce using rule 180 (empty -> .)
    COUNTIF         reduce using rule 180 (empty -> .)
    MEAN            reduce using rule 180 (empty -> .)
    MEDIAN          reduce using rule 180 (empty -> .)
    MODE            reduce using rule 180 (empty -> .)
    STDV            reduce using rule 180 (empty -> .)
    KMEANS          reduce using rule 180 (empty -> .)
    DERL            reduce using rule 180 (empty -> .)
    DBERN           reduce using rule 180 (empty -> .)
    DPOI            reduce using rule 180 (empty -> .)
    TRANSPOSE       reduce using rule 180 (empty -> .)
    INVERSE         reduce using rule 180 (empty -> .)
    ROTATE          reduce using rule 180 (empty -> .)
    REF             reduce using rule 180 (empty -> .)
    RREF            reduce using rule 180 (empty -> .)
    EULER           reduce using rule 180 (empty -> .)
    DO              reduce using rule 180 (empty -> .)
    READ            reduce using rule 180 (empty -> .)
    RETURN          reduce using rule 180 (empty -> .)
    CBRACKET        reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    cn2                            shift and go to state 407
    empty                          shift and go to state 408

state 379

    (91) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (94) cn3 -> . empty
    (180) empty -> .

    OBRACKET        reduce using rule 180 (empty -> .)

    cn3                            shift and go to state 409
    empty                          shift and go to state 410

state 380

    (95) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 411


state 381

    (96) ifblock2 -> estatuto .
    (97) ifblock2 -> estatuto . ifblock2
    (96) ifblock2 -> . estatuto
    (97) ifblock2 -> . estatuto ifblock2
    (98) ifblock2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (180) empty -> .
    (62) asign -> . ID EQUALS expresion SCOLON
    (63) asign -> . ID EQUALS ID SCOLON
    (64) asign -> . ID EQUALS ID asign2 SCOLON
    (65) asign -> . ID asign2 EQUALS ID SCOLON
    (66) asign -> . ID asign2 EQUALS expresion SCOLON
    (67) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) asign -> . ID EQUALS funccall afcn1
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (101) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (102) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (99) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (100) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (132) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (136) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (137) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (138) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (140) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (145) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (124) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (130) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> . RETURN OPAREN funccall CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 96 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 96 (ifblock2 -> estatuto .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

  ! CBRACKET        [ reduce using rule 180 (empty -> .) ]

    estatuto                       shift and go to state 381
    ifblock2                       shift and go to state 412
    empty                          shift and go to state 382
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 382

    (98) ifblock2 -> empty .

    CBRACKET        reduce using rule 98 (ifblock2 -> empty .)


state 383

    (78) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    EULER           reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RETURN          reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 78 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 384

    (81) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    EULER           reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RETURN          reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 81 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 385

    (86) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 86 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 86 (escrt3 -> STRING escrt2 escrt2 .)


state 386

    (106) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 106 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 387

    (108) xyfunc -> empty .

    CPAREN          reduce using rule 108 (xyfunc -> empty .)


state 388

    (107) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 107 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 389

    (103) plot2 -> LCOR varcte COMMA varcte RCOR .
    (104) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 103 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 413


state 390

    (99) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 414


state 391

    (100) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 415


state 392

    (156) datasetarr -> varcte COMMA datasetarr .

    RCOR            reduce using rule 156 (datasetarr -> varcte COMMA datasetarr .)


state 393

    (151) kval -> varcte COMMA arrfun2 COMMA . arrfun3
    (154) arrfun3 -> . LCOR datasetarr2 RCOR

    LCOR            shift and go to state 417

    arrfun3                        shift and go to state 416

state 394

    (153) arrfun2 -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 418


state 395

    (168) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 419


state 396

    (169) expfunc -> varcte COMMA varcte COMMA . varcte
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 420

state 397

    (175) mmmarray -> libero LCOR datasetarr4 . RCOR COMMA mmmarray
    (176) mmmarray -> libero LCOR datasetarr4 . RCOR

    RCOR            shift and go to state 421


state 398

    (178) datasetarr4 -> varcte .
    (179) datasetarr4 -> varcte . COMMA datasetarr4

    RCOR            reduce using rule 178 (datasetarr4 -> varcte .)
    COMMA           shift and go to state 422


state 399

    (124) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (126) wn2 -> . empty
    (180) empty -> .

    SCOLON          reduce using rule 180 (empty -> .)

    wn2                            shift and go to state 423
    empty                          shift and go to state 424

state 400

    (128) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 128 (dwhileconds -> expresion dwhileconds .)


state 401

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (180) empty -> .

    OBRACKET        reduce using rule 180 (empty -> .)

    mn3                            shift and go to state 425
    empty                          shift and go to state 426

state 402

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (180) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 180 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 180 (empty -> .) ]
  ! CPAREN          [ reduce using rule 180 (empty -> .) ]

    lugstat2                       shift and go to state 427
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 403

    (30) funccall2 -> ID fcn2 funccall2 .

    CPAREN          reduce using rule 30 (funccall2 -> ID fcn2 funccall2 .)


state 404

    (29) funccall2 -> COMMA expresion fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (180) empty -> .

    COMMA           shift and go to state 327
    ID              shift and go to state 325
    CPAREN          reduce using rule 180 (empty -> .)

    funccall2                      shift and go to state 428
    empty                          shift and go to state 328

state 405

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    EULER           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RETURN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CPAREN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 406

    (28) fcn3 -> empty .

    ID              reduce using rule 28 (fcn3 -> empty .)
    IF              reduce using rule 28 (fcn3 -> empty .)
    PRINT           reduce using rule 28 (fcn3 -> empty .)
    PLOT            reduce using rule 28 (fcn3 -> empty .)
    COUNT           reduce using rule 28 (fcn3 -> empty .)
    COUNTIF         reduce using rule 28 (fcn3 -> empty .)
    MEAN            reduce using rule 28 (fcn3 -> empty .)
    MEDIAN          reduce using rule 28 (fcn3 -> empty .)
    MODE            reduce using rule 28 (fcn3 -> empty .)
    STDV            reduce using rule 28 (fcn3 -> empty .)
    KMEANS          reduce using rule 28 (fcn3 -> empty .)
    DERL            reduce using rule 28 (fcn3 -> empty .)
    DBERN           reduce using rule 28 (fcn3 -> empty .)
    DPOI            reduce using rule 28 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 28 (fcn3 -> empty .)
    INVERSE         reduce using rule 28 (fcn3 -> empty .)
    ROTATE          reduce using rule 28 (fcn3 -> empty .)
    REF             reduce using rule 28 (fcn3 -> empty .)
    RREF            reduce using rule 28 (fcn3 -> empty .)
    EULER           reduce using rule 28 (fcn3 -> empty .)
    DO              reduce using rule 28 (fcn3 -> empty .)
    READ            reduce using rule 28 (fcn3 -> empty .)
    RETURN          reduce using rule 28 (fcn3 -> empty .)
    CBRACKET        reduce using rule 28 (fcn3 -> empty .)
    CPAREN          reduce using rule 28 (fcn3 -> empty .)


state 407

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    EULER           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RETURN          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 408

    (93) cn2 -> empty .

    ID              reduce using rule 93 (cn2 -> empty .)
    IF              reduce using rule 93 (cn2 -> empty .)
    PRINT           reduce using rule 93 (cn2 -> empty .)
    PLOT            reduce using rule 93 (cn2 -> empty .)
    COUNT           reduce using rule 93 (cn2 -> empty .)
    COUNTIF         reduce using rule 93 (cn2 -> empty .)
    MEAN            reduce using rule 93 (cn2 -> empty .)
    MEDIAN          reduce using rule 93 (cn2 -> empty .)
    MODE            reduce using rule 93 (cn2 -> empty .)
    STDV            reduce using rule 93 (cn2 -> empty .)
    KMEANS          reduce using rule 93 (cn2 -> empty .)
    DERL            reduce using rule 93 (cn2 -> empty .)
    DBERN           reduce using rule 93 (cn2 -> empty .)
    DPOI            reduce using rule 93 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 93 (cn2 -> empty .)
    INVERSE         reduce using rule 93 (cn2 -> empty .)
    ROTATE          reduce using rule 93 (cn2 -> empty .)
    REF             reduce using rule 93 (cn2 -> empty .)
    RREF            reduce using rule 93 (cn2 -> empty .)
    EULER           reduce using rule 93 (cn2 -> empty .)
    DO              reduce using rule 93 (cn2 -> empty .)
    READ            reduce using rule 93 (cn2 -> empty .)
    RETURN          reduce using rule 93 (cn2 -> empty .)
    CBRACKET        reduce using rule 93 (cn2 -> empty .)
    CPAREN          reduce using rule 93 (cn2 -> empty .)


state 409

    (91) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (95) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 331

    ifblock                        shift and go to state 429

state 410

    (94) cn3 -> empty .

    OBRACKET        reduce using rule 94 (cn3 -> empty .)


state 411

    (95) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 95 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 95 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 412

    (97) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 97 (ifblock2 -> estatuto ifblock2 .)


state 413

    (104) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (103) plot2 -> . LCOR varcte COMMA varcte RCOR
    (104) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (105) plot2 -> . empty
    (180) empty -> .

    LCOR            shift and go to state 173
    CPAREN          reduce using rule 180 (empty -> .)

    plot2                          shift and go to state 430
    empty                          shift and go to state 431

state 414

    (99) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 432


state 415

    (100) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 63

    cond                           shift and go to state 433

state 416

    (151) kval -> varcte COMMA arrfun2 COMMA arrfun3 .

    CPAREN          reduce using rule 151 (kval -> varcte COMMA arrfun2 COMMA arrfun3 .)


state 417

    (154) arrfun3 -> LCOR . datasetarr2 RCOR
    (157) datasetarr2 -> . varcte
    (158) datasetarr2 -> . varcte COMMA datasetarr2
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr2                    shift and go to state 434
    varcte                         shift and go to state 435

state 418

    (153) arrfun2 -> LCOR datasetarr RCOR .

    COMMA           reduce using rule 153 (arrfun2 -> LCOR datasetarr RCOR .)


state 419

    (168) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 168 (expfunc -> ID COMMA ID COMMA ID .)


state 420

    (169) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 169 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 421

    (175) mmmarray -> libero LCOR datasetarr4 RCOR . COMMA mmmarray
    (176) mmmarray -> libero LCOR datasetarr4 RCOR .

    COMMA           shift and go to state 436
    RCOR            reduce using rule 176 (mmmarray -> libero LCOR datasetarr4 RCOR .)


state 422

    (179) datasetarr4 -> varcte COMMA . datasetarr4
    (178) datasetarr4 -> . varcte
    (179) datasetarr4 -> . varcte COMMA datasetarr4
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 398
    datasetarr4                    shift and go to state 437

state 423

    (124) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 438


state 424

    (126) wn2 -> empty .

    SCOLON          reduce using rule 126 (wn2 -> empty .)


state 425

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (34) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 440

    funblock                       shift and go to state 439

state 426

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 427

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 428

    (29) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 29 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 429

    (91) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 441


state 430

    (104) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 104 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 431

    (105) plot2 -> empty .

    CPAREN          reduce using rule 105 (plot2 -> empty .)


state 432

    (99) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    EULER           reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RETURN          reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 99 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 433

    (100) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 442


state 434

    (154) arrfun3 -> LCOR datasetarr2 . RCOR

    RCOR            shift and go to state 443


state 435

    (157) datasetarr2 -> varcte .
    (158) datasetarr2 -> varcte . COMMA datasetarr2

    RCOR            reduce using rule 157 (datasetarr2 -> varcte .)
    COMMA           shift and go to state 444


state 436

    (175) mmmarray -> libero LCOR datasetarr4 RCOR COMMA . mmmarray
    (175) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (176) mmmarray -> . libero LCOR datasetarr4 RCOR
    (177) libero -> . empty
    (180) empty -> .

    LCOR            reduce using rule 180 (empty -> .)

    libero                         shift and go to state 308
    mmmarray                       shift and go to state 445
    empty                          shift and go to state 309

state 437

    (179) datasetarr4 -> varcte COMMA datasetarr4 .

    RCOR            reduce using rule 179 (datasetarr4 -> varcte COMMA datasetarr4 .)


state 438

    (124) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    EULER           reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RETURN          reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 124 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 439

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (180) empty -> .

    FUNC            reduce using rule 180 (empty -> .)
    OBRACKET        reduce using rule 180 (empty -> .)

    mn7                            shift and go to state 446
    empty                          shift and go to state 447

state 440

    (34) funblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (180) empty -> .
    (62) asign -> . ID EQUALS expresion SCOLON
    (63) asign -> . ID EQUALS ID SCOLON
    (64) asign -> . ID EQUALS ID asign2 SCOLON
    (65) asign -> . ID asign2 EQUALS ID SCOLON
    (66) asign -> . ID asign2 EQUALS expresion SCOLON
    (67) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) asign -> . ID EQUALS funccall afcn1
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (91) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (80) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (81) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (101) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (102) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (99) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (100) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (132) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (136) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (137) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (138) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (140) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (145) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (124) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (130) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON
    (58) regreso -> . RETURN OPAREN funccall CPAREN SCOLON

    CBRACKET        reduce using rule 180 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    block2                         shift and go to state 448
    estatuto                       shift and go to state 49
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 441

    (91) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (93) cn2 -> . empty
    (180) empty -> .

    ID              reduce using rule 180 (empty -> .)
    IF              reduce using rule 180 (empty -> .)
    PRINT           reduce using rule 180 (empty -> .)
    PLOT            reduce using rule 180 (empty -> .)
    COUNT           reduce using rule 180 (empty -> .)
    COUNTIF         reduce using rule 180 (empty -> .)
    MEAN            reduce using rule 180 (empty -> .)
    MEDIAN          reduce using rule 180 (empty -> .)
    MODE            reduce using rule 180 (empty -> .)
    STDV            reduce using rule 180 (empty -> .)
    KMEANS          reduce using rule 180 (empty -> .)
    DERL            reduce using rule 180 (empty -> .)
    DBERN           reduce using rule 180 (empty -> .)
    DPOI            reduce using rule 180 (empty -> .)
    TRANSPOSE       reduce using rule 180 (empty -> .)
    INVERSE         reduce using rule 180 (empty -> .)
    ROTATE          reduce using rule 180 (empty -> .)
    REF             reduce using rule 180 (empty -> .)
    RREF            reduce using rule 180 (empty -> .)
    EULER           reduce using rule 180 (empty -> .)
    DO              reduce using rule 180 (empty -> .)
    READ            reduce using rule 180 (empty -> .)
    RETURN          reduce using rule 180 (empty -> .)
    CBRACKET        reduce using rule 180 (empty -> .)
    CPAREN          reduce using rule 180 (empty -> .)

    cn2                            shift and go to state 449
    empty                          shift and go to state 408

state 442

    (100) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 450


state 443

    (154) arrfun3 -> LCOR datasetarr2 RCOR .

    CPAREN          reduce using rule 154 (arrfun3 -> LCOR datasetarr2 RCOR .)


state 444

    (158) datasetarr2 -> varcte COMMA . datasetarr2
    (157) datasetarr2 -> . varcte
    (158) datasetarr2 -> . varcte COMMA datasetarr2
    (119) varcte -> . ID
    (120) varcte -> . ID asign2
    (121) varcte -> . NUMERIC
    (122) varcte -> . NUMBER
    (123) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 435
    datasetarr2                    shift and go to state 451

state 445

    (175) mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .

    RCOR            reduce using rule 175 (mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .)


state 446

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 447

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 448

    (34) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 452


state 449

    (91) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    EULER           reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RETURN          reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 91 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 450

    (100) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    EULER           reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RETURN          reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 100 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 451

    (158) datasetarr2 -> varcte COMMA datasetarr2 .

    RCOR            reduce using rule 158 (datasetarr2 -> varcte COMMA datasetarr2 .)


state 452

    (34) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 37 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 39 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 158 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 200 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 201 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 204 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 208 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 237 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 240 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 268 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 281 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 281 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 282 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 337 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 49 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 49
WARNING: reduce/reduce conflict in state 165 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 165
WARNING: reduce/reduce conflict in state 172 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 172
WARNING: reduce/reduce conflict in state 193 resolved using rule (regnum1 -> <empty>)
WARNING: rejected rule (varcte -> ID) in state 193
WARNING: reduce/reduce conflict in state 210 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 210
WARNING: reduce/reduce conflict in state 262 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 262
WARNING: reduce/reduce conflict in state 281 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 281
WARNING: reduce/reduce conflict in state 381 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 381
WARNING: reduce/reduce conflict in state 402 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 402
