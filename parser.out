Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    fcn1 -> empty
Rule 26    fcn2 -> empty
Rule 27    fcn3 -> empty
Rule 28    funccall2 -> COMMA expresion fcn2 funccall2
Rule 29    funccall2 -> empty
Rule 30    modules2 -> vars
Rule 31    modules2 -> empty
Rule 32    funblock -> OBRACKET block2 CBRACKET
Rule 33    block -> OBRACKET block2 CBRACKET
Rule 34    block2 -> estatuto
Rule 35    block2 -> estatuto block2
Rule 36    block2 -> empty
Rule 37    tipo -> INT
Rule 38    tipo -> BOOL
Rule 39    tipo -> DOUBLE
Rule 40    tipo -> STRING
Rule 41    tipo -> CHAR
Rule 42    estatuto -> asign
Rule 43    estatuto -> cond
Rule 44    estatuto -> escrt
Rule 45    estatuto -> plot
Rule 46    estatuto -> count
Rule 47    estatuto -> countif
Rule 48    estatuto -> metodos
Rule 49    estatuto -> dwhile
Rule 50    estatuto -> readln
Rule 51    estatuto -> funccall
Rule 52    asign -> ID EQUALS expresion SCOLON
Rule 53    asign -> ID EQUALS ID SCOLON
Rule 54    asign -> ID EQUALS ID asign2 SCOLON
Rule 55    asign -> ID asign2 EQUALS ID SCOLON
Rule 56    asign -> ID asign2 EQUALS expresion SCOLON
Rule 57    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 58    asign2 -> LCOR expresion RCOR asign3
Rule 59    asign2 -> LCOR varcte RCOR asign3
Rule 60    asign3 -> LCOR expresion RCOR
Rule 61    asign3 -> LCOR varcte RCOR
Rule 62    asign3 -> empty
Rule 63    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 64    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 65    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 66    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 67    escrt2 -> COMMA escrt3
Rule 68    escrt2 -> empty
Rule 69    escrt3 -> ID escrt2
Rule 70    escrt3 -> ID
Rule 71    escrt3 -> STRING escrt2 escrt2
Rule 72    en1 -> empty
Rule 73    en2 -> empty
Rule 74    en3 -> empty
Rule 75    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 76    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 77    cn1 -> empty
Rule 78    cn2 -> empty
Rule 79    cn3 -> empty
Rule 80    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 81    ifblock2 -> estatuto
Rule 82    ifblock2 -> estatuto ifblock2
Rule 83    ifblock2 -> empty
Rule 84    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 85    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 86    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 87    plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 88    plot2 -> LCOR varcte COMMA varcte RCOR
Rule 89    plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 90    plot2 -> empty
Rule 91    xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 92    xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 93    xyfunc -> empty
Rule 94    expresion -> exp
Rule 95    expresion -> expresion RELOP exp
Rule 96    exp -> termino
Rule 97    exp -> termino PLUS exp
Rule 98    exp -> termino MINUS exp
Rule 99    termino -> factor
Rule 100   termino -> factor MULT termino
Rule 101   termino -> factor DIV termino
Rule 102   factor -> OPAREN expresion CPAREN
Rule 103   factor -> varcte
Rule 104   varcte -> ID
Rule 105   varcte -> ID asign2
Rule 106   varcte -> NUMERIC
Rule 107   varcte -> NUMBER
Rule 108   varcte -> LOGICAL
Rule 109   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 110   wn1 -> empty
Rule 111   wn2 -> empty
Rule 112   wblock -> OBRACKET block2 CBRACKET
Rule 113   dwhileconds -> expresion dwhileconds
Rule 114   dwhileconds -> expresion AND dwhileconds
Rule 115   dwhileconds -> expresion OR dwhileconds
Rule 116   dwhileconds -> empty
Rule 117   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 118   rn1 -> empty
Rule 119   metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON
Rule 120   metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON
Rule 121   metodos -> MODE OPAREN mmmfunc CPAREN SCOLON
Rule 122   metodos -> STDV OPAREN mmmfunc CPAREN SCOLON
Rule 123   metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
Rule 124   metodos -> DERL OPAREN expfunc CPAREN SCOLON
Rule 125   metodos -> DBERN OPAREN expfunc CPAREN SCOLON
Rule 126   metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON
Rule 127   metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
Rule 128   metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON
Rule 129   metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON
Rule 130   metodos -> REF OPAREN mmmfunc CPAREN SCOLON
Rule 131   metodos -> RREF OPAREN mmmfunc CPAREN SCOLON
Rule 132   metodos -> MONT OPAREN mmmfunc CPAREN SCOLON
Rule 133   expfunc -> ID COMMA ID COMMA ID
Rule 134   expfunc -> varcte COMMA varcte COMMA varcte
Rule 135   expfunc2 -> ID COMMA ID
Rule 136   expfunc2 -> varcte COMMA varcte
Rule 137   mmmfunc -> LCOR RCOR
Rule 138   mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc
Rule 139   mmmfunc -> LCOR mmmarray RCOR
Rule 140   mmmfunc -> ID
Rule 141   mmmfunc -> empty
Rule 142   mmmarray -> varcte
Rule 143   mmmarray -> varcte COMMA mmmarray
Rule 144   mmmarray -> empty
Rule 145   empty -> <empty>

Terminals, with rules where they appear

AND                  : 114
BOOL                 : 38
CBRACKET             : 32 33 80 112
CHAR                 : 41
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 28 67 84 84 85 85 85 88 89 89 123 133 133 134 134 135 136 138 143
COMMENT              : 
COUNT                : 84
COUNTIF              : 85
CPAREN               : 19 24 63 64 65 66 75 76 84 85 86 87 102 109 117 119 120 121 122 123 124 125 126 127 128 129 130 131 132
CTED                 : 
CTEI                 : 
DBERN                : 125
DERL                 : 124
DIFF                 : 
DIV                  : 101
DO                   : 109
DOUBLE               : 39
DPOI                 : 126
ELSE                 : 76
EQ                   : 
EQUALS               : 52 53 54 55 56 57 91 92
FUNC                 : 19
FX                   : 91
FY                   : 92
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 52 53 53 54 54 55 55 56 57 57 63 69 70 84 85 104 105 117 133 133 133 135 135 140
IF                   : 75 76
INT                  : 37
INTEGER              : 
INVERSE              : 128
KMEANS               : 123
LCOR                 : 12 13 14 14 15 15 58 59 60 61 88 89 137 138 139
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 108
LUGSTAT              : 1
MEAN                 : 119
MEDIAN               : 120
MINUS                : 98
MODE                 : 121
MONT                 : 132
MULT                 : 100
NUMBER               : 12 13 14 14 15 15 107
NUMERIC              : 106
OBRACKET             : 32 33 80 112
OPAREN               : 19 24 63 64 65 66 75 76 84 85 86 87 102 109 117 119 120 121 122 123 124 125 126 127 128 129 130 131 132
OR                   : 115
PER                  : 
PLOT                 : 86 87
PLUS                 : 97
PRINT                : 63 64 65 66
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 58 59 60 61 88 89 137 138 139
READ                 : 117
REF                  : 130
RELOP                : 95
ROTATE               : 129
RREF                 : 131
SCOLON               : 1 11 12 13 14 15 16 52 53 54 55 56 57 63 64 65 66 75 76 84 85 86 87 91 92 109 117 119 120 121 122 123 124 125 126 127 128 129 130 131 132
STDV                 : 122
STRING               : 40 65 66 71
TIPO                 : 
TRANSPOSE            : 127
VAR                  : 9
WHILE                : 109
error                : 

Nonterminals, with rules where they appear

addmain              : 1
asign                : 42
asign2               : 16 17 54 55 56 57 57 105
asign3               : 58 59
block                : 1
block2               : 32 33 35 112
cn1                  : 75 76
cn2                  : 75 76
cn3                  : 76
cond                 : 43 85
count                : 46
countif              : 47
dwhile               : 49
dwhileconds          : 109 113 114 115
empty                : 2 3 5 8 18 20 21 23 25 26 27 29 31 36 62 68 72 73 74 77 78 79 83 90 93 110 111 116 118 141 144
en1                  : 64
en2                  : 65 66
en3                  : 63
escrt                : 44
escrt2               : 63 66 69 71 71
escrt3               : 67
estatuto             : 34 35 81 82
exp                  : 91 92 94 95 97 98
expfunc              : 124 125
expfunc2             : 126
expresion            : 24 28 52 56 58 60 64 75 76 95 102 113 114 115
factor               : 99 100 101
fcn1                 : 24
fcn2                 : 24 28
fcn3                 : 24
funblock             : 19
funccall             : 51
funccall2            : 24 28
ifblock              : 75 76 76
ifblock2             : 80 82
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 48
mmmarray             : 138 139 143
mmmfunc              : 119 120 121 122 123 127 128 129 130 131 132 138
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 45
plot2                : 87 89
readln               : 50
rn1                  : 117
savename             : 
termino              : 96 97 98 100 101
tipo                 : 11 12 13 14 15 16 19
varcte               : 59 61 84 84 85 85 88 88 89 89 103 123 134 134 134 136 136 142 143
vars                 : 4 30
vars1                : 9 10 17
wblock               : 109
wn1                  : 109
wn2                  : 109
xyfunc               : 86 91 92

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (145) empty -> .

    VAR             reduce using rule 145 (empty -> .)
    FUNC            reduce using rule 145 (empty -> .)
    OBRACKET        reduce using rule 145 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (145) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 145 (empty -> .)
    OBRACKET        reduce using rule 145 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (145) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 145 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (145) empty -> .

    OBRACKET        reduce using rule 145 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (145) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 145 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (33) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (37) tipo -> . INT
    (38) tipo -> . BOOL
    (39) tipo -> . DOUBLE
    (40) tipo -> . STRING
    (41) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (58) asign2 -> LCOR . expresion RCOR asign3
    (59) asign2 -> LCOR . varcte RCOR asign3
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte

    NUMBER          shift and go to state 36
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (33) block -> OBRACKET . block2 CBRACKET
    (34) block2 -> . estatuto
    (35) block2 -> . estatuto block2
    (36) block2 -> . empty
    (42) estatuto -> . asign
    (43) estatuto -> . cond
    (44) estatuto -> . escrt
    (45) estatuto -> . plot
    (46) estatuto -> . count
    (47) estatuto -> . countif
    (48) estatuto -> . metodos
    (49) estatuto -> . dwhile
    (50) estatuto -> . readln
    (51) estatuto -> . funccall
    (145) empty -> .
    (52) asign -> . ID EQUALS expresion SCOLON
    (53) asign -> . ID EQUALS ID SCOLON
    (54) asign -> . ID EQUALS ID asign2 SCOLON
    (55) asign -> . ID asign2 EQUALS ID SCOLON
    (56) asign -> . ID asign2 EQUALS expresion SCOLON
    (57) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (63) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (86) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (87) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (84) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (85) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (124) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (125) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (126) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (127) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (109) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (117) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3

    CBRACKET        reduce using rule 145 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    block2                         shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (37) tipo -> . INT
    (38) tipo -> . BOOL
    (39) tipo -> . DOUBLE
    (40) tipo -> . STRING
    (41) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 82

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 83


state 30

    (37) tipo -> INT .

    SCOLON          reduce using rule 37 (tipo -> INT .)
    OPAREN          reduce using rule 37 (tipo -> INT .)


state 31

    (38) tipo -> BOOL .

    SCOLON          reduce using rule 38 (tipo -> BOOL .)
    OPAREN          reduce using rule 38 (tipo -> BOOL .)


state 32

    (39) tipo -> DOUBLE .

    SCOLON          reduce using rule 39 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 39 (tipo -> DOUBLE .)


state 33

    (40) tipo -> STRING .

    SCOLON          reduce using rule 40 (tipo -> STRING .)
    OPAREN          reduce using rule 40 (tipo -> STRING .)


state 34

    (41) tipo -> CHAR .

    SCOLON          reduce using rule 41 (tipo -> CHAR .)
    OPAREN          reduce using rule 41 (tipo -> CHAR .)


state 35

    (104) varcte -> ID .
    (105) varcte -> ID . asign2
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

    RCOR            reduce using rule 104 (varcte -> ID .)
    MULT            reduce using rule 104 (varcte -> ID .)
    DIV             reduce using rule 104 (varcte -> ID .)
    PLUS            reduce using rule 104 (varcte -> ID .)
    MINUS           reduce using rule 104 (varcte -> ID .)
    RELOP           reduce using rule 104 (varcte -> ID .)
    CPAREN          reduce using rule 104 (varcte -> ID .)
    SCOLON          reduce using rule 104 (varcte -> ID .)
    COMMA           reduce using rule 104 (varcte -> ID .)
    AND             reduce using rule 104 (varcte -> ID .)
    OR              reduce using rule 104 (varcte -> ID .)
    OPAREN          reduce using rule 104 (varcte -> ID .)
    ID              reduce using rule 104 (varcte -> ID .)
    NUMERIC         reduce using rule 104 (varcte -> ID .)
    NUMBER          reduce using rule 104 (varcte -> ID .)
    LOGICAL         reduce using rule 104 (varcte -> ID .)
    LCOR            shift and go to state 85

    asign2                         shift and go to state 84

state 36

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (107) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 86
    MULT            reduce using rule 107 (varcte -> NUMBER .)
    DIV             reduce using rule 107 (varcte -> NUMBER .)
    PLUS            reduce using rule 107 (varcte -> NUMBER .)
    MINUS           reduce using rule 107 (varcte -> NUMBER .)
    RELOP           reduce using rule 107 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 107 (varcte -> NUMBER .) ]


state 37

    (58) asign2 -> LCOR expresion . RCOR asign3
    (95) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 87
    RELOP           shift and go to state 88


state 38

    (59) asign2 -> LCOR varcte . RCOR asign3
    (103) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 89
    MULT            reduce using rule 103 (factor -> varcte .)
    DIV             reduce using rule 103 (factor -> varcte .)
    PLUS            reduce using rule 103 (factor -> varcte .)
    MINUS           reduce using rule 103 (factor -> varcte .)
    RELOP           reduce using rule 103 (factor -> varcte .)

  ! RCOR            [ reduce using rule 103 (factor -> varcte .) ]


state 39

    (94) expresion -> exp .

    RCOR            reduce using rule 94 (expresion -> exp .)
    RELOP           reduce using rule 94 (expresion -> exp .)
    CPAREN          reduce using rule 94 (expresion -> exp .)
    SCOLON          reduce using rule 94 (expresion -> exp .)
    COMMA           reduce using rule 94 (expresion -> exp .)
    AND             reduce using rule 94 (expresion -> exp .)
    OR              reduce using rule 94 (expresion -> exp .)
    OPAREN          reduce using rule 94 (expresion -> exp .)
    ID              reduce using rule 94 (expresion -> exp .)
    NUMERIC         reduce using rule 94 (expresion -> exp .)
    NUMBER          reduce using rule 94 (expresion -> exp .)
    LOGICAL         reduce using rule 94 (expresion -> exp .)


state 40

    (106) varcte -> NUMERIC .

    RCOR            reduce using rule 106 (varcte -> NUMERIC .)
    MULT            reduce using rule 106 (varcte -> NUMERIC .)
    DIV             reduce using rule 106 (varcte -> NUMERIC .)
    PLUS            reduce using rule 106 (varcte -> NUMERIC .)
    MINUS           reduce using rule 106 (varcte -> NUMERIC .)
    RELOP           reduce using rule 106 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 106 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 106 (varcte -> NUMERIC .)
    COMMA           reduce using rule 106 (varcte -> NUMERIC .)
    AND             reduce using rule 106 (varcte -> NUMERIC .)
    OR              reduce using rule 106 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 106 (varcte -> NUMERIC .)
    ID              reduce using rule 106 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 106 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 106 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 106 (varcte -> NUMERIC .)


state 41

    (108) varcte -> LOGICAL .

    RCOR            reduce using rule 108 (varcte -> LOGICAL .)
    MULT            reduce using rule 108 (varcte -> LOGICAL .)
    DIV             reduce using rule 108 (varcte -> LOGICAL .)
    PLUS            reduce using rule 108 (varcte -> LOGICAL .)
    MINUS           reduce using rule 108 (varcte -> LOGICAL .)
    RELOP           reduce using rule 108 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 108 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 108 (varcte -> LOGICAL .)
    COMMA           reduce using rule 108 (varcte -> LOGICAL .)
    AND             reduce using rule 108 (varcte -> LOGICAL .)
    OR              reduce using rule 108 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 108 (varcte -> LOGICAL .)
    ID              reduce using rule 108 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 108 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 108 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 108 (varcte -> LOGICAL .)


state 42

    (96) exp -> termino .
    (97) exp -> termino . PLUS exp
    (98) exp -> termino . MINUS exp

    RCOR            reduce using rule 96 (exp -> termino .)
    RELOP           reduce using rule 96 (exp -> termino .)
    CPAREN          reduce using rule 96 (exp -> termino .)
    SCOLON          reduce using rule 96 (exp -> termino .)
    COMMA           reduce using rule 96 (exp -> termino .)
    AND             reduce using rule 96 (exp -> termino .)
    OR              reduce using rule 96 (exp -> termino .)
    OPAREN          reduce using rule 96 (exp -> termino .)
    ID              reduce using rule 96 (exp -> termino .)
    NUMERIC         reduce using rule 96 (exp -> termino .)
    NUMBER          reduce using rule 96 (exp -> termino .)
    LOGICAL         reduce using rule 96 (exp -> termino .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91


state 43

    (99) termino -> factor .
    (100) termino -> factor . MULT termino
    (101) termino -> factor . DIV termino

    PLUS            reduce using rule 99 (termino -> factor .)
    MINUS           reduce using rule 99 (termino -> factor .)
    RCOR            reduce using rule 99 (termino -> factor .)
    RELOP           reduce using rule 99 (termino -> factor .)
    CPAREN          reduce using rule 99 (termino -> factor .)
    SCOLON          reduce using rule 99 (termino -> factor .)
    COMMA           reduce using rule 99 (termino -> factor .)
    AND             reduce using rule 99 (termino -> factor .)
    OR              reduce using rule 99 (termino -> factor .)
    OPAREN          reduce using rule 99 (termino -> factor .)
    ID              reduce using rule 99 (termino -> factor .)
    NUMERIC         reduce using rule 99 (termino -> factor .)
    NUMBER          reduce using rule 99 (termino -> factor .)
    LOGICAL         reduce using rule 99 (termino -> factor .)
    MULT            shift and go to state 92
    DIV             shift and go to state 93


state 44

    (102) factor -> OPAREN . expresion CPAREN
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 94
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 45

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (37) tipo -> . INT
    (38) tipo -> . BOOL
    (39) tipo -> . DOUBLE
    (40) tipo -> . STRING
    (41) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 97

state 46

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 98

state 47

    (33) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 99


state 48

    (34) block2 -> estatuto .
    (35) block2 -> estatuto . block2
    (34) block2 -> . estatuto
    (35) block2 -> . estatuto block2
    (36) block2 -> . empty
    (42) estatuto -> . asign
    (43) estatuto -> . cond
    (44) estatuto -> . escrt
    (45) estatuto -> . plot
    (46) estatuto -> . count
    (47) estatuto -> . countif
    (48) estatuto -> . metodos
    (49) estatuto -> . dwhile
    (50) estatuto -> . readln
    (51) estatuto -> . funccall
    (145) empty -> .
    (52) asign -> . ID EQUALS expresion SCOLON
    (53) asign -> . ID EQUALS ID SCOLON
    (54) asign -> . ID EQUALS ID asign2 SCOLON
    (55) asign -> . ID asign2 EQUALS ID SCOLON
    (56) asign -> . ID asign2 EQUALS expresion SCOLON
    (57) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (63) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (86) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (87) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (84) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (85) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (124) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (125) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (126) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (127) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (109) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (117) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3

  ! reduce/reduce conflict for CBRACKET resolved using rule 34 (block2 -> estatuto .)
    CBRACKET        reduce using rule 34 (block2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

  ! CBRACKET        [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 48
    block2                         shift and go to state 100
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 49

    (36) block2 -> empty .

    CBRACKET        reduce using rule 36 (block2 -> empty .)


state 50

    (42) estatuto -> asign .

    ID              reduce using rule 42 (estatuto -> asign .)
    IF              reduce using rule 42 (estatuto -> asign .)
    PRINT           reduce using rule 42 (estatuto -> asign .)
    PLOT            reduce using rule 42 (estatuto -> asign .)
    COUNT           reduce using rule 42 (estatuto -> asign .)
    COUNTIF         reduce using rule 42 (estatuto -> asign .)
    MEAN            reduce using rule 42 (estatuto -> asign .)
    MEDIAN          reduce using rule 42 (estatuto -> asign .)
    MODE            reduce using rule 42 (estatuto -> asign .)
    STDV            reduce using rule 42 (estatuto -> asign .)
    KMEANS          reduce using rule 42 (estatuto -> asign .)
    DERL            reduce using rule 42 (estatuto -> asign .)
    DBERN           reduce using rule 42 (estatuto -> asign .)
    DPOI            reduce using rule 42 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 42 (estatuto -> asign .)
    INVERSE         reduce using rule 42 (estatuto -> asign .)
    ROTATE          reduce using rule 42 (estatuto -> asign .)
    REF             reduce using rule 42 (estatuto -> asign .)
    RREF            reduce using rule 42 (estatuto -> asign .)
    MONT            reduce using rule 42 (estatuto -> asign .)
    DO              reduce using rule 42 (estatuto -> asign .)
    READ            reduce using rule 42 (estatuto -> asign .)
    CBRACKET        reduce using rule 42 (estatuto -> asign .)


state 51

    (43) estatuto -> cond .

    ID              reduce using rule 43 (estatuto -> cond .)
    IF              reduce using rule 43 (estatuto -> cond .)
    PRINT           reduce using rule 43 (estatuto -> cond .)
    PLOT            reduce using rule 43 (estatuto -> cond .)
    COUNT           reduce using rule 43 (estatuto -> cond .)
    COUNTIF         reduce using rule 43 (estatuto -> cond .)
    MEAN            reduce using rule 43 (estatuto -> cond .)
    MEDIAN          reduce using rule 43 (estatuto -> cond .)
    MODE            reduce using rule 43 (estatuto -> cond .)
    STDV            reduce using rule 43 (estatuto -> cond .)
    KMEANS          reduce using rule 43 (estatuto -> cond .)
    DERL            reduce using rule 43 (estatuto -> cond .)
    DBERN           reduce using rule 43 (estatuto -> cond .)
    DPOI            reduce using rule 43 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 43 (estatuto -> cond .)
    INVERSE         reduce using rule 43 (estatuto -> cond .)
    ROTATE          reduce using rule 43 (estatuto -> cond .)
    REF             reduce using rule 43 (estatuto -> cond .)
    RREF            reduce using rule 43 (estatuto -> cond .)
    MONT            reduce using rule 43 (estatuto -> cond .)
    DO              reduce using rule 43 (estatuto -> cond .)
    READ            reduce using rule 43 (estatuto -> cond .)
    CBRACKET        reduce using rule 43 (estatuto -> cond .)


state 52

    (44) estatuto -> escrt .

    ID              reduce using rule 44 (estatuto -> escrt .)
    IF              reduce using rule 44 (estatuto -> escrt .)
    PRINT           reduce using rule 44 (estatuto -> escrt .)
    PLOT            reduce using rule 44 (estatuto -> escrt .)
    COUNT           reduce using rule 44 (estatuto -> escrt .)
    COUNTIF         reduce using rule 44 (estatuto -> escrt .)
    MEAN            reduce using rule 44 (estatuto -> escrt .)
    MEDIAN          reduce using rule 44 (estatuto -> escrt .)
    MODE            reduce using rule 44 (estatuto -> escrt .)
    STDV            reduce using rule 44 (estatuto -> escrt .)
    KMEANS          reduce using rule 44 (estatuto -> escrt .)
    DERL            reduce using rule 44 (estatuto -> escrt .)
    DBERN           reduce using rule 44 (estatuto -> escrt .)
    DPOI            reduce using rule 44 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 44 (estatuto -> escrt .)
    INVERSE         reduce using rule 44 (estatuto -> escrt .)
    ROTATE          reduce using rule 44 (estatuto -> escrt .)
    REF             reduce using rule 44 (estatuto -> escrt .)
    RREF            reduce using rule 44 (estatuto -> escrt .)
    MONT            reduce using rule 44 (estatuto -> escrt .)
    DO              reduce using rule 44 (estatuto -> escrt .)
    READ            reduce using rule 44 (estatuto -> escrt .)
    CBRACKET        reduce using rule 44 (estatuto -> escrt .)


state 53

    (45) estatuto -> plot .

    ID              reduce using rule 45 (estatuto -> plot .)
    IF              reduce using rule 45 (estatuto -> plot .)
    PRINT           reduce using rule 45 (estatuto -> plot .)
    PLOT            reduce using rule 45 (estatuto -> plot .)
    COUNT           reduce using rule 45 (estatuto -> plot .)
    COUNTIF         reduce using rule 45 (estatuto -> plot .)
    MEAN            reduce using rule 45 (estatuto -> plot .)
    MEDIAN          reduce using rule 45 (estatuto -> plot .)
    MODE            reduce using rule 45 (estatuto -> plot .)
    STDV            reduce using rule 45 (estatuto -> plot .)
    KMEANS          reduce using rule 45 (estatuto -> plot .)
    DERL            reduce using rule 45 (estatuto -> plot .)
    DBERN           reduce using rule 45 (estatuto -> plot .)
    DPOI            reduce using rule 45 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 45 (estatuto -> plot .)
    INVERSE         reduce using rule 45 (estatuto -> plot .)
    ROTATE          reduce using rule 45 (estatuto -> plot .)
    REF             reduce using rule 45 (estatuto -> plot .)
    RREF            reduce using rule 45 (estatuto -> plot .)
    MONT            reduce using rule 45 (estatuto -> plot .)
    DO              reduce using rule 45 (estatuto -> plot .)
    READ            reduce using rule 45 (estatuto -> plot .)
    CBRACKET        reduce using rule 45 (estatuto -> plot .)


state 54

    (46) estatuto -> count .

    ID              reduce using rule 46 (estatuto -> count .)
    IF              reduce using rule 46 (estatuto -> count .)
    PRINT           reduce using rule 46 (estatuto -> count .)
    PLOT            reduce using rule 46 (estatuto -> count .)
    COUNT           reduce using rule 46 (estatuto -> count .)
    COUNTIF         reduce using rule 46 (estatuto -> count .)
    MEAN            reduce using rule 46 (estatuto -> count .)
    MEDIAN          reduce using rule 46 (estatuto -> count .)
    MODE            reduce using rule 46 (estatuto -> count .)
    STDV            reduce using rule 46 (estatuto -> count .)
    KMEANS          reduce using rule 46 (estatuto -> count .)
    DERL            reduce using rule 46 (estatuto -> count .)
    DBERN           reduce using rule 46 (estatuto -> count .)
    DPOI            reduce using rule 46 (estatuto -> count .)
    TRANSPOSE       reduce using rule 46 (estatuto -> count .)
    INVERSE         reduce using rule 46 (estatuto -> count .)
    ROTATE          reduce using rule 46 (estatuto -> count .)
    REF             reduce using rule 46 (estatuto -> count .)
    RREF            reduce using rule 46 (estatuto -> count .)
    MONT            reduce using rule 46 (estatuto -> count .)
    DO              reduce using rule 46 (estatuto -> count .)
    READ            reduce using rule 46 (estatuto -> count .)
    CBRACKET        reduce using rule 46 (estatuto -> count .)


state 55

    (47) estatuto -> countif .

    ID              reduce using rule 47 (estatuto -> countif .)
    IF              reduce using rule 47 (estatuto -> countif .)
    PRINT           reduce using rule 47 (estatuto -> countif .)
    PLOT            reduce using rule 47 (estatuto -> countif .)
    COUNT           reduce using rule 47 (estatuto -> countif .)
    COUNTIF         reduce using rule 47 (estatuto -> countif .)
    MEAN            reduce using rule 47 (estatuto -> countif .)
    MEDIAN          reduce using rule 47 (estatuto -> countif .)
    MODE            reduce using rule 47 (estatuto -> countif .)
    STDV            reduce using rule 47 (estatuto -> countif .)
    KMEANS          reduce using rule 47 (estatuto -> countif .)
    DERL            reduce using rule 47 (estatuto -> countif .)
    DBERN           reduce using rule 47 (estatuto -> countif .)
    DPOI            reduce using rule 47 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 47 (estatuto -> countif .)
    INVERSE         reduce using rule 47 (estatuto -> countif .)
    ROTATE          reduce using rule 47 (estatuto -> countif .)
    REF             reduce using rule 47 (estatuto -> countif .)
    RREF            reduce using rule 47 (estatuto -> countif .)
    MONT            reduce using rule 47 (estatuto -> countif .)
    DO              reduce using rule 47 (estatuto -> countif .)
    READ            reduce using rule 47 (estatuto -> countif .)
    CBRACKET        reduce using rule 47 (estatuto -> countif .)


state 56

    (48) estatuto -> metodos .

    ID              reduce using rule 48 (estatuto -> metodos .)
    IF              reduce using rule 48 (estatuto -> metodos .)
    PRINT           reduce using rule 48 (estatuto -> metodos .)
    PLOT            reduce using rule 48 (estatuto -> metodos .)
    COUNT           reduce using rule 48 (estatuto -> metodos .)
    COUNTIF         reduce using rule 48 (estatuto -> metodos .)
    MEAN            reduce using rule 48 (estatuto -> metodos .)
    MEDIAN          reduce using rule 48 (estatuto -> metodos .)
    MODE            reduce using rule 48 (estatuto -> metodos .)
    STDV            reduce using rule 48 (estatuto -> metodos .)
    KMEANS          reduce using rule 48 (estatuto -> metodos .)
    DERL            reduce using rule 48 (estatuto -> metodos .)
    DBERN           reduce using rule 48 (estatuto -> metodos .)
    DPOI            reduce using rule 48 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 48 (estatuto -> metodos .)
    INVERSE         reduce using rule 48 (estatuto -> metodos .)
    ROTATE          reduce using rule 48 (estatuto -> metodos .)
    REF             reduce using rule 48 (estatuto -> metodos .)
    RREF            reduce using rule 48 (estatuto -> metodos .)
    MONT            reduce using rule 48 (estatuto -> metodos .)
    DO              reduce using rule 48 (estatuto -> metodos .)
    READ            reduce using rule 48 (estatuto -> metodos .)
    CBRACKET        reduce using rule 48 (estatuto -> metodos .)


state 57

    (49) estatuto -> dwhile .

    ID              reduce using rule 49 (estatuto -> dwhile .)
    IF              reduce using rule 49 (estatuto -> dwhile .)
    PRINT           reduce using rule 49 (estatuto -> dwhile .)
    PLOT            reduce using rule 49 (estatuto -> dwhile .)
    COUNT           reduce using rule 49 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 49 (estatuto -> dwhile .)
    MEAN            reduce using rule 49 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 49 (estatuto -> dwhile .)
    MODE            reduce using rule 49 (estatuto -> dwhile .)
    STDV            reduce using rule 49 (estatuto -> dwhile .)
    KMEANS          reduce using rule 49 (estatuto -> dwhile .)
    DERL            reduce using rule 49 (estatuto -> dwhile .)
    DBERN           reduce using rule 49 (estatuto -> dwhile .)
    DPOI            reduce using rule 49 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 49 (estatuto -> dwhile .)
    INVERSE         reduce using rule 49 (estatuto -> dwhile .)
    ROTATE          reduce using rule 49 (estatuto -> dwhile .)
    REF             reduce using rule 49 (estatuto -> dwhile .)
    RREF            reduce using rule 49 (estatuto -> dwhile .)
    MONT            reduce using rule 49 (estatuto -> dwhile .)
    DO              reduce using rule 49 (estatuto -> dwhile .)
    READ            reduce using rule 49 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 49 (estatuto -> dwhile .)


state 58

    (50) estatuto -> readln .

    ID              reduce using rule 50 (estatuto -> readln .)
    IF              reduce using rule 50 (estatuto -> readln .)
    PRINT           reduce using rule 50 (estatuto -> readln .)
    PLOT            reduce using rule 50 (estatuto -> readln .)
    COUNT           reduce using rule 50 (estatuto -> readln .)
    COUNTIF         reduce using rule 50 (estatuto -> readln .)
    MEAN            reduce using rule 50 (estatuto -> readln .)
    MEDIAN          reduce using rule 50 (estatuto -> readln .)
    MODE            reduce using rule 50 (estatuto -> readln .)
    STDV            reduce using rule 50 (estatuto -> readln .)
    KMEANS          reduce using rule 50 (estatuto -> readln .)
    DERL            reduce using rule 50 (estatuto -> readln .)
    DBERN           reduce using rule 50 (estatuto -> readln .)
    DPOI            reduce using rule 50 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 50 (estatuto -> readln .)
    INVERSE         reduce using rule 50 (estatuto -> readln .)
    ROTATE          reduce using rule 50 (estatuto -> readln .)
    REF             reduce using rule 50 (estatuto -> readln .)
    RREF            reduce using rule 50 (estatuto -> readln .)
    MONT            reduce using rule 50 (estatuto -> readln .)
    DO              reduce using rule 50 (estatuto -> readln .)
    READ            reduce using rule 50 (estatuto -> readln .)
    CBRACKET        reduce using rule 50 (estatuto -> readln .)


state 59

    (51) estatuto -> funccall .

    ID              reduce using rule 51 (estatuto -> funccall .)
    IF              reduce using rule 51 (estatuto -> funccall .)
    PRINT           reduce using rule 51 (estatuto -> funccall .)
    PLOT            reduce using rule 51 (estatuto -> funccall .)
    COUNT           reduce using rule 51 (estatuto -> funccall .)
    COUNTIF         reduce using rule 51 (estatuto -> funccall .)
    MEAN            reduce using rule 51 (estatuto -> funccall .)
    MEDIAN          reduce using rule 51 (estatuto -> funccall .)
    MODE            reduce using rule 51 (estatuto -> funccall .)
    STDV            reduce using rule 51 (estatuto -> funccall .)
    KMEANS          reduce using rule 51 (estatuto -> funccall .)
    DERL            reduce using rule 51 (estatuto -> funccall .)
    DBERN           reduce using rule 51 (estatuto -> funccall .)
    DPOI            reduce using rule 51 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 51 (estatuto -> funccall .)
    INVERSE         reduce using rule 51 (estatuto -> funccall .)
    ROTATE          reduce using rule 51 (estatuto -> funccall .)
    REF             reduce using rule 51 (estatuto -> funccall .)
    RREF            reduce using rule 51 (estatuto -> funccall .)
    MONT            reduce using rule 51 (estatuto -> funccall .)
    DO              reduce using rule 51 (estatuto -> funccall .)
    READ            reduce using rule 51 (estatuto -> funccall .)
    CBRACKET        reduce using rule 51 (estatuto -> funccall .)


state 60

    (52) asign -> ID . EQUALS expresion SCOLON
    (53) asign -> ID . EQUALS ID SCOLON
    (54) asign -> ID . EQUALS ID asign2 SCOLON
    (55) asign -> ID . asign2 EQUALS ID SCOLON
    (56) asign -> ID . asign2 EQUALS expresion SCOLON
    (57) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

    EQUALS          shift and go to state 101
    OPAREN          shift and go to state 103
    LCOR            shift and go to state 85

    asign2                         shift and go to state 102

state 61

    (75) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 104


state 62

    (63) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 105


state 63

    (86) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (87) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 106


state 64

    (84) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 107


state 65

    (85) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 108


state 66

    (119) metodos -> MEAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 109


state 67

    (120) metodos -> MEDIAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 110


state 68

    (121) metodos -> MODE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 111


state 69

    (122) metodos -> STDV . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 112


state 70

    (123) metodos -> KMEANS . OPAREN varcte COMMA mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 113


state 71

    (124) metodos -> DERL . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 114


state 72

    (125) metodos -> DBERN . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 115


state 73

    (126) metodos -> DPOI . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 116


state 74

    (127) metodos -> TRANSPOSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 117


state 75

    (128) metodos -> INVERSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 118


state 76

    (129) metodos -> ROTATE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 119


state 77

    (130) metodos -> REF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 120


state 78

    (131) metodos -> RREF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 121


state 79

    (132) metodos -> MONT . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 122


state 80

    (109) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (110) wn1 -> . empty
    (145) empty -> .

    OBRACKET        reduce using rule 145 (empty -> .)

    wn1                            shift and go to state 123
    empty                          shift and go to state 124

state 81

    (117) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 125


state 82

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (145) empty -> .

    OPAREN          reduce using rule 145 (empty -> .)

    mn1                            shift and go to state 126
    empty                          shift and go to state 127

state 83

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (145) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 145 (empty -> .)
    OBRACKET        reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)

    lugstat2                       shift and go to state 128
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 84

    (105) varcte -> ID asign2 .

    RCOR            reduce using rule 105 (varcte -> ID asign2 .)
    MULT            reduce using rule 105 (varcte -> ID asign2 .)
    DIV             reduce using rule 105 (varcte -> ID asign2 .)
    PLUS            reduce using rule 105 (varcte -> ID asign2 .)
    MINUS           reduce using rule 105 (varcte -> ID asign2 .)
    RELOP           reduce using rule 105 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 105 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 105 (varcte -> ID asign2 .)
    COMMA           reduce using rule 105 (varcte -> ID asign2 .)
    AND             reduce using rule 105 (varcte -> ID asign2 .)
    OR              reduce using rule 105 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 105 (varcte -> ID asign2 .)
    ID              reduce using rule 105 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 105 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 105 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 105 (varcte -> ID asign2 .)


state 85

    (58) asign2 -> LCOR . expresion RCOR asign3
    (59) asign2 -> LCOR . varcte RCOR asign3
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 86

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 130
    LCOR            shift and go to state 129


state 87

    (58) asign2 -> LCOR expresion RCOR . asign3
    (60) asign3 -> . LCOR expresion RCOR
    (61) asign3 -> . LCOR varcte RCOR
    (62) asign3 -> . empty
    (145) empty -> .

    LCOR            shift and go to state 131
    COLON           reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RCOR            reduce using rule 145 (empty -> .)
    MULT            reduce using rule 145 (empty -> .)
    DIV             reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    RELOP           reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)
    SCOLON          reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    OPAREN          reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    NUMERIC         reduce using rule 145 (empty -> .)
    NUMBER          reduce using rule 145 (empty -> .)
    LOGICAL         reduce using rule 145 (empty -> .)
    EQUALS          reduce using rule 145 (empty -> .)

    asign3                         shift and go to state 132
    empty                          shift and go to state 133

state 88

    (95) expresion -> expresion RELOP . exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 134
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 89

    (59) asign2 -> LCOR varcte RCOR . asign3
    (60) asign3 -> . LCOR expresion RCOR
    (61) asign3 -> . LCOR varcte RCOR
    (62) asign3 -> . empty
    (145) empty -> .

    LCOR            shift and go to state 131
    COLON           reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RCOR            reduce using rule 145 (empty -> .)
    MULT            reduce using rule 145 (empty -> .)
    DIV             reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    RELOP           reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)
    SCOLON          reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    OPAREN          reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    NUMERIC         reduce using rule 145 (empty -> .)
    NUMBER          reduce using rule 145 (empty -> .)
    LOGICAL         reduce using rule 145 (empty -> .)
    EQUALS          reduce using rule 145 (empty -> .)

    asign3                         shift and go to state 135
    empty                          shift and go to state 133

state 90

    (97) exp -> termino PLUS . exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 136
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 91

    (98) exp -> termino MINUS . exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 137
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 92

    (100) termino -> factor MULT . termino
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 138
    varcte                         shift and go to state 95

state 93

    (101) termino -> factor DIV . termino
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 139
    varcte                         shift and go to state 95

state 94

    (102) factor -> OPAREN expresion . CPAREN
    (95) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 140
    RELOP           shift and go to state 88


state 95

    (103) factor -> varcte .

    MULT            reduce using rule 103 (factor -> varcte .)
    DIV             reduce using rule 103 (factor -> varcte .)
    PLUS            reduce using rule 103 (factor -> varcte .)
    MINUS           reduce using rule 103 (factor -> varcte .)
    CPAREN          reduce using rule 103 (factor -> varcte .)
    RELOP           reduce using rule 103 (factor -> varcte .)
    RCOR            reduce using rule 103 (factor -> varcte .)
    SCOLON          reduce using rule 103 (factor -> varcte .)
    COMMA           reduce using rule 103 (factor -> varcte .)
    AND             reduce using rule 103 (factor -> varcte .)
    OR              reduce using rule 103 (factor -> varcte .)
    OPAREN          reduce using rule 103 (factor -> varcte .)
    ID              reduce using rule 103 (factor -> varcte .)
    NUMERIC         reduce using rule 103 (factor -> varcte .)
    NUMBER          reduce using rule 103 (factor -> varcte .)
    LOGICAL         reduce using rule 103 (factor -> varcte .)


state 96

    (107) varcte -> NUMBER .

    MULT            reduce using rule 107 (varcte -> NUMBER .)
    DIV             reduce using rule 107 (varcte -> NUMBER .)
    PLUS            reduce using rule 107 (varcte -> NUMBER .)
    MINUS           reduce using rule 107 (varcte -> NUMBER .)
    CPAREN          reduce using rule 107 (varcte -> NUMBER .)
    RELOP           reduce using rule 107 (varcte -> NUMBER .)
    RCOR            reduce using rule 107 (varcte -> NUMBER .)
    SCOLON          reduce using rule 107 (varcte -> NUMBER .)
    COMMA           reduce using rule 107 (varcte -> NUMBER .)
    AND             reduce using rule 107 (varcte -> NUMBER .)
    OR              reduce using rule 107 (varcte -> NUMBER .)
    OPAREN          reduce using rule 107 (varcte -> NUMBER .)
    ID              reduce using rule 107 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 107 (varcte -> NUMBER .)
    NUMBER          reduce using rule 107 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 107 (varcte -> NUMBER .)


state 97

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 141


state 98

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 99

    (33) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 33 (block -> OBRACKET block2 CBRACKET .)


state 100

    (35) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 35 (block2 -> estatuto block2 .)


state 101

    (52) asign -> ID EQUALS . expresion SCOLON
    (53) asign -> ID EQUALS . ID SCOLON
    (54) asign -> ID EQUALS . ID asign2 SCOLON
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 142
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 143
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 102

    (55) asign -> ID asign2 . EQUALS ID SCOLON
    (56) asign -> ID asign2 . EQUALS expresion SCOLON
    (57) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 144


state 103

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) fcn1 -> . empty
    (145) empty -> .

    OPAREN          reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    NUMERIC         reduce using rule 145 (empty -> .)
    NUMBER          reduce using rule 145 (empty -> .)
    LOGICAL         reduce using rule 145 (empty -> .)

    fcn1                           shift and go to state 145
    empty                          shift and go to state 146

state 104

    (75) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 147
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 105

    (63) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (65) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (66) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 148
    STRING          shift and go to state 150
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 149
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 106

    (86) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (87) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (91) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (92) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (93) xyfunc -> . empty
    (88) plot2 -> . LCOR varcte COMMA varcte RCOR
    (89) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (90) plot2 -> . empty
    (145) empty -> .

    FX              shift and go to state 153
    FY              shift and go to state 154
    LCOR            shift and go to state 156
    CPAREN          reduce using rule 145 (empty -> .)

    xyfunc                         shift and go to state 151
    plot2                          shift and go to state 152
    empty                          shift and go to state 155

state 107

    (84) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 157


state 108

    (85) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 158


state 109

    (119) metodos -> MEAN OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 159
    empty                          shift and go to state 162

state 110

    (120) metodos -> MEDIAN OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 163
    empty                          shift and go to state 162

state 111

    (121) metodos -> MODE OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 164
    empty                          shift and go to state 162

state 112

    (122) metodos -> STDV OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 165
    empty                          shift and go to state 162

state 113

    (123) metodos -> KMEANS OPAREN . varcte COMMA mmmfunc CPAREN SCOLON
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 166

state 114

    (124) metodos -> DERL OPAREN . expfunc CPAREN SCOLON
    (133) expfunc -> . ID COMMA ID COMMA ID
    (134) expfunc -> . varcte COMMA varcte COMMA varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 168
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 167
    varcte                         shift and go to state 169

state 115

    (125) metodos -> DBERN OPAREN . expfunc CPAREN SCOLON
    (133) expfunc -> . ID COMMA ID COMMA ID
    (134) expfunc -> . varcte COMMA varcte COMMA varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 168
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 170
    varcte                         shift and go to state 169

state 116

    (126) metodos -> DPOI OPAREN . expfunc2 CPAREN SCOLON
    (135) expfunc2 -> . ID COMMA ID
    (136) expfunc2 -> . varcte COMMA varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 172
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 171
    varcte                         shift and go to state 173

state 117

    (127) metodos -> TRANSPOSE OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 174
    empty                          shift and go to state 162

state 118

    (128) metodos -> INVERSE OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 175
    empty                          shift and go to state 162

state 119

    (129) metodos -> ROTATE OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 176
    empty                          shift and go to state 162

state 120

    (130) metodos -> REF OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 177
    empty                          shift and go to state 162

state 121

    (131) metodos -> RREF OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 178
    empty                          shift and go to state 162

state 122

    (132) metodos -> MONT OPAREN . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 179
    empty                          shift and go to state 162

state 123

    (109) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (112) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 181

    wblock                         shift and go to state 180

state 124

    (110) wn1 -> empty .

    OBRACKET        reduce using rule 110 (wn1 -> empty .)


state 125

    (117) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 182


state 126

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 183


state 127

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 128

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 129

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 184


state 130

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (37) tipo -> . INT
    (38) tipo -> . BOOL
    (39) tipo -> . DOUBLE
    (40) tipo -> . STRING
    (41) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 185

state 131

    (60) asign3 -> LCOR . expresion RCOR
    (61) asign3 -> LCOR . varcte RCOR
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 186
    varcte                         shift and go to state 187
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 132

    (58) asign2 -> LCOR expresion RCOR asign3 .

    COLON           reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    COMMA           reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    RCOR            reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    MULT            reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    DIV             reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    PLUS            reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    MINUS           reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    RELOP           reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    CPAREN          reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    SCOLON          reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    AND             reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    OR              reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    OPAREN          reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    ID              reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMERIC         reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMBER          reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    LOGICAL         reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)
    EQUALS          reduce using rule 58 (asign2 -> LCOR expresion RCOR asign3 .)


state 133

    (62) asign3 -> empty .

    COLON           reduce using rule 62 (asign3 -> empty .)
    COMMA           reduce using rule 62 (asign3 -> empty .)
    RCOR            reduce using rule 62 (asign3 -> empty .)
    MULT            reduce using rule 62 (asign3 -> empty .)
    DIV             reduce using rule 62 (asign3 -> empty .)
    PLUS            reduce using rule 62 (asign3 -> empty .)
    MINUS           reduce using rule 62 (asign3 -> empty .)
    RELOP           reduce using rule 62 (asign3 -> empty .)
    CPAREN          reduce using rule 62 (asign3 -> empty .)
    SCOLON          reduce using rule 62 (asign3 -> empty .)
    AND             reduce using rule 62 (asign3 -> empty .)
    OR              reduce using rule 62 (asign3 -> empty .)
    OPAREN          reduce using rule 62 (asign3 -> empty .)
    ID              reduce using rule 62 (asign3 -> empty .)
    NUMERIC         reduce using rule 62 (asign3 -> empty .)
    NUMBER          reduce using rule 62 (asign3 -> empty .)
    LOGICAL         reduce using rule 62 (asign3 -> empty .)
    EQUALS          reduce using rule 62 (asign3 -> empty .)


state 134

    (95) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 95 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 95 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 95 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 95 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 95 (expresion -> expresion RELOP exp .)
    AND             reduce using rule 95 (expresion -> expresion RELOP exp .)
    OR              reduce using rule 95 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 95 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 95 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 95 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 95 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 95 (expresion -> expresion RELOP exp .)


state 135

    (59) asign2 -> LCOR varcte RCOR asign3 .

    COLON           reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    COMMA           reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    RCOR            reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    MULT            reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    DIV             reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    PLUS            reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    MINUS           reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    RELOP           reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    CPAREN          reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    SCOLON          reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    AND             reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    OR              reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    OPAREN          reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    ID              reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMERIC         reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMBER          reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    LOGICAL         reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)
    EQUALS          reduce using rule 59 (asign2 -> LCOR varcte RCOR asign3 .)


state 136

    (97) exp -> termino PLUS exp .

    RCOR            reduce using rule 97 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 97 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 97 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 97 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 97 (exp -> termino PLUS exp .)
    AND             reduce using rule 97 (exp -> termino PLUS exp .)
    OR              reduce using rule 97 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 97 (exp -> termino PLUS exp .)
    ID              reduce using rule 97 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 97 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 97 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 97 (exp -> termino PLUS exp .)


state 137

    (98) exp -> termino MINUS exp .

    RCOR            reduce using rule 98 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 98 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 98 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 98 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 98 (exp -> termino MINUS exp .)
    AND             reduce using rule 98 (exp -> termino MINUS exp .)
    OR              reduce using rule 98 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 98 (exp -> termino MINUS exp .)
    ID              reduce using rule 98 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 98 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 98 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 98 (exp -> termino MINUS exp .)


state 138

    (100) termino -> factor MULT termino .

    PLUS            reduce using rule 100 (termino -> factor MULT termino .)
    MINUS           reduce using rule 100 (termino -> factor MULT termino .)
    RCOR            reduce using rule 100 (termino -> factor MULT termino .)
    RELOP           reduce using rule 100 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 100 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 100 (termino -> factor MULT termino .)
    COMMA           reduce using rule 100 (termino -> factor MULT termino .)
    AND             reduce using rule 100 (termino -> factor MULT termino .)
    OR              reduce using rule 100 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 100 (termino -> factor MULT termino .)
    ID              reduce using rule 100 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 100 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 100 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 100 (termino -> factor MULT termino .)


state 139

    (101) termino -> factor DIV termino .

    PLUS            reduce using rule 101 (termino -> factor DIV termino .)
    MINUS           reduce using rule 101 (termino -> factor DIV termino .)
    RCOR            reduce using rule 101 (termino -> factor DIV termino .)
    RELOP           reduce using rule 101 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 101 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 101 (termino -> factor DIV termino .)
    COMMA           reduce using rule 101 (termino -> factor DIV termino .)
    AND             reduce using rule 101 (termino -> factor DIV termino .)
    OR              reduce using rule 101 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 101 (termino -> factor DIV termino .)
    ID              reduce using rule 101 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 101 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 101 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 101 (termino -> factor DIV termino .)


state 140

    (102) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    AND             reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    OR              reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 102 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 102 (factor -> OPAREN expresion CPAREN .)


state 141

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 142

    (53) asign -> ID EQUALS ID . SCOLON
    (54) asign -> ID EQUALS ID . asign2 SCOLON
    (104) varcte -> ID .
    (105) varcte -> ID . asign2
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 188
    MULT            reduce using rule 104 (varcte -> ID .)
    DIV             reduce using rule 104 (varcte -> ID .)
    PLUS            reduce using rule 104 (varcte -> ID .)
    MINUS           reduce using rule 104 (varcte -> ID .)
    RELOP           reduce using rule 104 (varcte -> ID .)
    LCOR            shift and go to state 85

  ! SCOLON          [ reduce using rule 104 (varcte -> ID .) ]

    asign2                         shift and go to state 189

state 143

    (52) asign -> ID EQUALS expresion . SCOLON
    (95) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 190
    RELOP           shift and go to state 88


state 144

    (55) asign -> ID asign2 EQUALS . ID SCOLON
    (56) asign -> ID asign2 EQUALS . expresion SCOLON
    (57) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 191
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 192
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 145

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 193
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 146

    (25) fcn1 -> empty .

    OPAREN          reduce using rule 25 (fcn1 -> empty .)
    ID              reduce using rule 25 (fcn1 -> empty .)
    NUMERIC         reduce using rule 25 (fcn1 -> empty .)
    NUMBER          reduce using rule 25 (fcn1 -> empty .)
    LOGICAL         reduce using rule 25 (fcn1 -> empty .)


state 147

    (75) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (95) expresion -> expresion . RELOP exp
    (77) cn1 -> . empty
    (145) empty -> .

    RELOP           shift and go to state 88
    CPAREN          reduce using rule 145 (empty -> .)

    cn1                            shift and go to state 194
    empty                          shift and go to state 195

state 148

    (63) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (104) varcte -> ID .
    (105) varcte -> ID . asign2
    (74) en3 -> . empty
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3
    (145) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 104 (varcte -> ID .)
    MULT            reduce using rule 104 (varcte -> ID .)
    DIV             reduce using rule 104 (varcte -> ID .)
    PLUS            reduce using rule 104 (varcte -> ID .)
    MINUS           reduce using rule 104 (varcte -> ID .)
    RELOP           reduce using rule 104 (varcte -> ID .)
    CPAREN          reduce using rule 104 (varcte -> ID .)
    LCOR            shift and go to state 85
    COMMA           reduce using rule 145 (empty -> .)

  ! CPAREN          [ reduce using rule 145 (empty -> .) ]

    en3                            shift and go to state 196
    asign2                         shift and go to state 84
    empty                          shift and go to state 197

state 149

    (64) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (95) expresion -> expresion . RELOP exp
    (72) en1 -> . empty
    (145) empty -> .

    RELOP           shift and go to state 88
    CPAREN          reduce using rule 145 (empty -> .)

    en1                            shift and go to state 198
    empty                          shift and go to state 199

state 150

    (65) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (66) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (67) escrt2 -> . COMMA escrt3
    (68) escrt2 -> . empty
    (145) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 200
    COMMA           shift and go to state 202

  ! CPAREN          [ reduce using rule 145 (empty -> .) ]

    escrt2                         shift and go to state 201
    empty                          shift and go to state 203

state 151

    (86) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 204


state 152

    (87) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 205


state 153

    (91) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 206


state 154

    (92) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 207


state 155

    (93) xyfunc -> empty .
    (90) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 90 (plot2 -> empty .)
    CPAREN          reduce using rule 90 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 93 (xyfunc -> empty .) ]


state 156

    (88) plot2 -> LCOR . varcte COMMA varcte RCOR
    (89) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 208

state 157

    (84) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 209


state 158

    (85) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 210


state 159

    (119) metodos -> MEAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 211


state 160

    (137) mmmfunc -> LCOR . RCOR
    (138) mmmfunc -> LCOR . mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> LCOR . mmmarray RCOR
    (142) mmmarray -> . varcte
    (143) mmmarray -> . varcte COMMA mmmarray
    (144) mmmarray -> . empty
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL
    (145) empty -> .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 212
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

  ! RCOR            [ reduce using rule 145 (empty -> .) ]

    mmmarray                       shift and go to state 213
    varcte                         shift and go to state 214
    empty                          shift and go to state 215

state 161

    (140) mmmfunc -> ID .

    CPAREN          reduce using rule 140 (mmmfunc -> ID .)


state 162

    (141) mmmfunc -> empty .

    CPAREN          reduce using rule 141 (mmmfunc -> empty .)


state 163

    (120) metodos -> MEDIAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 216


state 164

    (121) metodos -> MODE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 217


state 165

    (122) metodos -> STDV OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 218


state 166

    (123) metodos -> KMEANS OPAREN varcte . COMMA mmmfunc CPAREN SCOLON

    COMMA           shift and go to state 219


state 167

    (124) metodos -> DERL OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 220


state 168

    (133) expfunc -> ID . COMMA ID COMMA ID
    (104) varcte -> ID .
    (105) varcte -> ID . asign2
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 221
    LCOR            shift and go to state 85

  ! COMMA           [ reduce using rule 104 (varcte -> ID .) ]

    asign2                         shift and go to state 84

state 169

    (134) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 222


state 170

    (125) metodos -> DBERN OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 223


state 171

    (126) metodos -> DPOI OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 224


state 172

    (135) expfunc2 -> ID . COMMA ID
    (104) varcte -> ID .
    (105) varcte -> ID . asign2
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 225
    LCOR            shift and go to state 85

  ! COMMA           [ reduce using rule 104 (varcte -> ID .) ]

    asign2                         shift and go to state 84

state 173

    (136) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 226


state 174

    (127) metodos -> TRANSPOSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 227


state 175

    (128) metodos -> INVERSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 228


state 176

    (129) metodos -> ROTATE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 229


state 177

    (130) metodos -> REF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 230


state 178

    (131) metodos -> RREF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 231


state 179

    (132) metodos -> MONT OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 232


state 180

    (109) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 233


state 181

    (112) wblock -> OBRACKET . block2 CBRACKET
    (34) block2 -> . estatuto
    (35) block2 -> . estatuto block2
    (36) block2 -> . empty
    (42) estatuto -> . asign
    (43) estatuto -> . cond
    (44) estatuto -> . escrt
    (45) estatuto -> . plot
    (46) estatuto -> . count
    (47) estatuto -> . countif
    (48) estatuto -> . metodos
    (49) estatuto -> . dwhile
    (50) estatuto -> . readln
    (51) estatuto -> . funccall
    (145) empty -> .
    (52) asign -> . ID EQUALS expresion SCOLON
    (53) asign -> . ID EQUALS ID SCOLON
    (54) asign -> . ID EQUALS ID asign2 SCOLON
    (55) asign -> . ID asign2 EQUALS ID SCOLON
    (56) asign -> . ID asign2 EQUALS expresion SCOLON
    (57) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (63) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (86) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (87) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (84) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (85) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (124) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (125) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (126) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (127) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (109) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (117) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3

    CBRACKET        reduce using rule 145 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    block2                         shift and go to state 234
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 182

    (117) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (118) rn1 -> . empty
    (145) empty -> .

    CPAREN          reduce using rule 145 (empty -> .)

    rn1                            shift and go to state 235
    empty                          shift and go to state 236

state 183

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (30) modules2 -> . vars
    (31) modules2 -> . empty
    (9) vars -> . VAR vars1
    (145) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 145 (empty -> .)

    modules2                       shift and go to state 237
    vars                           shift and go to state 238
    empty                          shift and go to state 239

state 184

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 240


state 185

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 241


state 186

    (60) asign3 -> LCOR expresion . RCOR
    (95) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 242
    RELOP           shift and go to state 88


state 187

    (61) asign3 -> LCOR varcte . RCOR
    (103) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 243
    MULT            reduce using rule 103 (factor -> varcte .)
    DIV             reduce using rule 103 (factor -> varcte .)
    PLUS            reduce using rule 103 (factor -> varcte .)
    MINUS           reduce using rule 103 (factor -> varcte .)
    RELOP           reduce using rule 103 (factor -> varcte .)

  ! RCOR            [ reduce using rule 103 (factor -> varcte .) ]


state 188

    (53) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    MONT            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 53 (asign -> ID EQUALS ID SCOLON .)


state 189

    (54) asign -> ID EQUALS ID asign2 . SCOLON
    (105) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 244
    MULT            reduce using rule 105 (varcte -> ID asign2 .)
    DIV             reduce using rule 105 (varcte -> ID asign2 .)
    PLUS            reduce using rule 105 (varcte -> ID asign2 .)
    MINUS           reduce using rule 105 (varcte -> ID asign2 .)
    RELOP           reduce using rule 105 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 105 (varcte -> ID asign2 .) ]


state 190

    (52) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    MONT            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 52 (asign -> ID EQUALS expresion SCOLON .)


state 191

    (55) asign -> ID asign2 EQUALS ID . SCOLON
    (57) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (104) varcte -> ID .
    (105) varcte -> ID . asign2
    (58) asign2 -> . LCOR expresion RCOR asign3
    (59) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 246
    MULT            reduce using rule 104 (varcte -> ID .)
    DIV             reduce using rule 104 (varcte -> ID .)
    PLUS            reduce using rule 104 (varcte -> ID .)
    MINUS           reduce using rule 104 (varcte -> ID .)
    RELOP           reduce using rule 104 (varcte -> ID .)
    LCOR            shift and go to state 85

  ! SCOLON          [ reduce using rule 104 (varcte -> ID .) ]

    asign2                         shift and go to state 245

state 192

    (56) asign -> ID asign2 EQUALS expresion . SCOLON
    (95) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 247
    RELOP           shift and go to state 88


state 193

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (95) expresion -> expresion . RELOP exp
    (26) fcn2 -> . empty
    (145) empty -> .

    RELOP           shift and go to state 88
    COMMA           reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)

    fcn2                           shift and go to state 248
    empty                          shift and go to state 249

state 194

    (75) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (76) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 250


state 195

    (77) cn1 -> empty .

    CPAREN          reduce using rule 77 (cn1 -> empty .)


state 196

    (63) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (67) escrt2 -> . COMMA escrt3
    (68) escrt2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 202
    CPAREN          reduce using rule 145 (empty -> .)

    escrt2                         shift and go to state 251
    empty                          shift and go to state 203

state 197

    (74) en3 -> empty .

    COMMA           reduce using rule 74 (en3 -> empty .)
    CPAREN          reduce using rule 74 (en3 -> empty .)


state 198

    (64) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 252


state 199

    (72) en1 -> empty .

    CPAREN          reduce using rule 72 (en1 -> empty .)


state 200

    (65) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (73) en2 -> . empty
    (145) empty -> .

    SCOLON          reduce using rule 145 (empty -> .)

    en2                            shift and go to state 253
    empty                          shift and go to state 254

state 201

    (66) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 255


state 202

    (67) escrt2 -> COMMA . escrt3
    (69) escrt3 -> . ID escrt2
    (70) escrt3 -> . ID
    (71) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 257
    STRING          shift and go to state 258

    escrt3                         shift and go to state 256

state 203

    (68) escrt2 -> empty .

    CPAREN          reduce using rule 68 (escrt2 -> empty .)
    COMMA           reduce using rule 68 (escrt2 -> empty .)


state 204

    (86) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 259


state 205

    (87) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 260


state 206

    (91) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 261
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 207

    (92) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 262
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 208

    (88) plot2 -> LCOR varcte . COMMA varcte RCOR
    (89) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 263


state 209

    (84) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 264

state 210

    (85) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 265

state 211

    (119) metodos -> MEAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 266


state 212

    (137) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 137 (mmmfunc -> LCOR RCOR .)


state 213

    (138) mmmfunc -> LCOR mmmarray . RCOR COMMA mmmfunc
    (139) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 267


state 214

    (142) mmmarray -> varcte .
    (143) mmmarray -> varcte . COMMA mmmarray

    RCOR            reduce using rule 142 (mmmarray -> varcte .)
    COMMA           shift and go to state 268


state 215

    (144) mmmarray -> empty .

    RCOR            reduce using rule 144 (mmmarray -> empty .)


state 216

    (120) metodos -> MEDIAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 269


state 217

    (121) metodos -> MODE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 270


state 218

    (122) metodos -> STDV OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 271


state 219

    (123) metodos -> KMEANS OPAREN varcte COMMA . mmmfunc CPAREN SCOLON
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 272
    empty                          shift and go to state 162

state 220

    (124) metodos -> DERL OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 273


state 221

    (133) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 274


state 222

    (134) expfunc -> varcte COMMA . varcte COMMA varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 275

state 223

    (125) metodos -> DBERN OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 276


state 224

    (126) metodos -> DPOI OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 277


state 225

    (135) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 278


state 226

    (136) expfunc2 -> varcte COMMA . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 279

state 227

    (127) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 280


state 228

    (128) metodos -> INVERSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 281


state 229

    (129) metodos -> ROTATE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 282


state 230

    (130) metodos -> REF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 283


state 231

    (131) metodos -> RREF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 284


state 232

    (132) metodos -> MONT OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 285


state 233

    (109) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 286


state 234

    (112) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 287


state 235

    (117) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 288


state 236

    (118) rn1 -> empty .

    CPAREN          reduce using rule 118 (rn1 -> empty .)


state 237

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 289

state 238

    (30) modules2 -> vars .

    CPAREN          reduce using rule 30 (modules2 -> vars .)
    OBRACKET        reduce using rule 30 (modules2 -> vars .)


state 239

    (31) modules2 -> empty .

    CPAREN          reduce using rule 31 (modules2 -> empty .)
    OBRACKET        reduce using rule 31 (modules2 -> empty .)


state 240

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 290


state 241

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (145) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 145 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 145 (empty -> .) ]
  ! CPAREN          [ reduce using rule 145 (empty -> .) ]

    lugstat2                       shift and go to state 291
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 242

    (60) asign3 -> LCOR expresion RCOR .

    COLON           reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    MULT            reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    DIV             reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    AND             reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    OR              reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    ID              reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 60 (asign3 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 60 (asign3 -> LCOR expresion RCOR .)


state 243

    (61) asign3 -> LCOR varcte RCOR .

    COLON           reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    MULT            reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    DIV             reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    AND             reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    OR              reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    ID              reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 61 (asign3 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 61 (asign3 -> LCOR varcte RCOR .)


state 244

    (54) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 54 (asign -> ID EQUALS ID asign2 SCOLON .)


state 245

    (57) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (105) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 292
    MULT            reduce using rule 105 (varcte -> ID asign2 .)
    DIV             reduce using rule 105 (varcte -> ID asign2 .)
    PLUS            reduce using rule 105 (varcte -> ID asign2 .)
    MINUS           reduce using rule 105 (varcte -> ID asign2 .)
    RELOP           reduce using rule 105 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 105 (varcte -> ID asign2 .) ]


state 246

    (55) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    MONT            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 55 (asign -> ID asign2 EQUALS ID SCOLON .)


state 247

    (56) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MONT            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 56 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 248

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (28) funccall2 -> . COMMA expresion fcn2 funccall2
    (29) funccall2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 294
    CPAREN          reduce using rule 145 (empty -> .)

    funccall2                      shift and go to state 293
    empty                          shift and go to state 295

state 249

    (26) fcn2 -> empty .

    COMMA           reduce using rule 26 (fcn2 -> empty .)
    CPAREN          reduce using rule 26 (fcn2 -> empty .)


state 250

    (75) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (76) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (80) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 297

    ifblock                        shift and go to state 296

state 251

    (63) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 298


state 252

    (64) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 299


state 253

    (65) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 300


state 254

    (73) en2 -> empty .

    SCOLON          reduce using rule 73 (en2 -> empty .)


state 255

    (66) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (73) en2 -> . empty
    (145) empty -> .

    SCOLON          reduce using rule 145 (empty -> .)

    en2                            shift and go to state 301
    empty                          shift and go to state 254

state 256

    (67) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 67 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 67 (escrt2 -> COMMA escrt3 .)


state 257

    (69) escrt3 -> ID . escrt2
    (70) escrt3 -> ID .
    (67) escrt2 -> . COMMA escrt3
    (68) escrt2 -> . empty
    (145) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 70 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 70 (escrt3 -> ID .)
    COMMA           shift and go to state 202

  ! COMMA           [ reduce using rule 70 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 145 (empty -> .) ]
  ! COMMA           [ reduce using rule 145 (empty -> .) ]

    escrt2                         shift and go to state 302
    empty                          shift and go to state 203

state 258

    (71) escrt3 -> STRING . escrt2 escrt2
    (67) escrt2 -> . COMMA escrt3
    (68) escrt2 -> . empty
    (145) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 202
    CPAREN          reduce using rule 145 (empty -> .)

  ! COMMA           [ reduce using rule 145 (empty -> .) ]

    escrt2                         shift and go to state 303
    empty                          shift and go to state 203

state 259

    (86) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MONT            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 86 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 260

    (87) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MONT            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 87 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 261

    (91) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 304


state 262

    (92) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 305


state 263

    (88) plot2 -> LCOR varcte COMMA . varcte RCOR
    (89) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 306

state 264

    (84) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 307


state 265

    (85) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 308


state 266

    (119) metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 119 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)


state 267

    (138) mmmfunc -> LCOR mmmarray RCOR . COMMA mmmfunc
    (139) mmmfunc -> LCOR mmmarray RCOR .

    COMMA           shift and go to state 309
    CPAREN          reduce using rule 139 (mmmfunc -> LCOR mmmarray RCOR .)


state 268

    (143) mmmarray -> varcte COMMA . mmmarray
    (142) mmmarray -> . varcte
    (143) mmmarray -> . varcte COMMA mmmarray
    (144) mmmarray -> . empty
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL
    (145) empty -> .

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41
    RCOR            reduce using rule 145 (empty -> .)

    varcte                         shift and go to state 214
    mmmarray                       shift and go to state 310
    empty                          shift and go to state 215

state 269

    (120) metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 120 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)


state 270

    (121) metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 121 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)


state 271

    (122) metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 122 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)


state 272

    (123) metodos -> KMEANS OPAREN varcte COMMA mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 311


state 273

    (124) metodos -> DERL OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 124 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)


state 274

    (133) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 312


state 275

    (134) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 313


state 276

    (125) metodos -> DBERN OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 125 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)


state 277

    (126) metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MONT            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 126 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)


state 278

    (135) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 135 (expfunc2 -> ID COMMA ID .)


state 279

    (136) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 136 (expfunc2 -> varcte COMMA varcte .)


state 280

    (127) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 127 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)


state 281

    (128) metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 128 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)


state 282

    (129) metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 129 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)


state 283

    (130) metodos -> REF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 130 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)


state 284

    (131) metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 131 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)


state 285

    (132) metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)


state 286

    (109) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (113) dwhileconds -> . expresion dwhileconds
    (114) dwhileconds -> . expresion AND dwhileconds
    (115) dwhileconds -> . expresion OR dwhileconds
    (116) dwhileconds -> . empty
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (145) empty -> .
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    CPAREN          reduce using rule 145 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    dwhileconds                    shift and go to state 314
    expresion                      shift and go to state 315
    empty                          shift and go to state 316
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 287

    (112) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 112 (wblock -> OBRACKET block2 CBRACKET .)


state 288

    (117) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 317


state 289

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 318


state 290

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (37) tipo -> . INT
    (38) tipo -> . BOOL
    (39) tipo -> . DOUBLE
    (40) tipo -> . STRING
    (41) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 319

state 291

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 292

    (57) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 57 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 293

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 320


state 294

    (28) funccall2 -> COMMA . expresion fcn2 funccall2
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 321
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 295

    (29) funccall2 -> empty .

    CPAREN          reduce using rule 29 (funccall2 -> empty .)


state 296

    (75) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (76) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 322
    ELSE            shift and go to state 323


state 297

    (80) ifblock -> OBRACKET . ifblock2 CBRACKET
    (81) ifblock2 -> . estatuto
    (82) ifblock2 -> . estatuto ifblock2
    (83) ifblock2 -> . empty
    (42) estatuto -> . asign
    (43) estatuto -> . cond
    (44) estatuto -> . escrt
    (45) estatuto -> . plot
    (46) estatuto -> . count
    (47) estatuto -> . countif
    (48) estatuto -> . metodos
    (49) estatuto -> . dwhile
    (50) estatuto -> . readln
    (51) estatuto -> . funccall
    (145) empty -> .
    (52) asign -> . ID EQUALS expresion SCOLON
    (53) asign -> . ID EQUALS ID SCOLON
    (54) asign -> . ID EQUALS ID asign2 SCOLON
    (55) asign -> . ID asign2 EQUALS ID SCOLON
    (56) asign -> . ID asign2 EQUALS expresion SCOLON
    (57) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (63) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (86) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (87) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (84) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (85) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (124) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (125) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (126) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (127) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (109) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (117) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3

    CBRACKET        reduce using rule 145 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    ifblock2                       shift and go to state 324
    estatuto                       shift and go to state 325
    empty                          shift and go to state 326
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 298

    (63) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 327


state 299

    (64) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MONT            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 64 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 300

    (65) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MONT            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 65 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 301

    (66) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 328


state 302

    (69) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 69 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 69 (escrt3 -> ID escrt2 .)


state 303

    (71) escrt3 -> STRING escrt2 . escrt2
    (67) escrt2 -> . COMMA escrt3
    (68) escrt2 -> . empty
    (145) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 202
    CPAREN          reduce using rule 145 (empty -> .)

  ! COMMA           [ reduce using rule 145 (empty -> .) ]

    escrt2                         shift and go to state 329
    empty                          shift and go to state 203

state 304

    (91) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (91) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (92) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (93) xyfunc -> . empty
    (145) empty -> .

    FX              shift and go to state 153
    FY              shift and go to state 154
    CPAREN          reduce using rule 145 (empty -> .)

    xyfunc                         shift and go to state 330
    empty                          shift and go to state 331

state 305

    (92) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (91) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (92) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (93) xyfunc -> . empty
    (145) empty -> .

    FX              shift and go to state 153
    FY              shift and go to state 154
    CPAREN          reduce using rule 145 (empty -> .)

    xyfunc                         shift and go to state 332
    empty                          shift and go to state 331

state 306

    (88) plot2 -> LCOR varcte COMMA varcte . RCOR
    (89) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 333


state 307

    (84) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 334

state 308

    (85) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 335

state 309

    (138) mmmfunc -> LCOR mmmarray RCOR COMMA . mmmfunc
    (137) mmmfunc -> . LCOR RCOR
    (138) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (139) mmmfunc -> . LCOR mmmarray RCOR
    (140) mmmfunc -> . ID
    (141) mmmfunc -> . empty
    (145) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 145 (empty -> .)

    mmmfunc                        shift and go to state 336
    empty                          shift and go to state 162

state 310

    (143) mmmarray -> varcte COMMA mmmarray .

    RCOR            reduce using rule 143 (mmmarray -> varcte COMMA mmmarray .)


state 311

    (123) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 337


state 312

    (133) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 338


state 313

    (134) expfunc -> varcte COMMA varcte COMMA . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 339

state 314

    (109) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 340


state 315

    (113) dwhileconds -> expresion . dwhileconds
    (114) dwhileconds -> expresion . AND dwhileconds
    (115) dwhileconds -> expresion . OR dwhileconds
    (95) expresion -> expresion . RELOP exp
    (113) dwhileconds -> . expresion dwhileconds
    (114) dwhileconds -> . expresion AND dwhileconds
    (115) dwhileconds -> . expresion OR dwhileconds
    (116) dwhileconds -> . empty
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (145) empty -> .
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    AND             shift and go to state 342
    OR              shift and go to state 343
    RELOP           shift and go to state 88
    CPAREN          reduce using rule 145 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 315
    dwhileconds                    shift and go to state 341
    exp                            shift and go to state 39
    empty                          shift and go to state 316
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 316

    (116) dwhileconds -> empty .

    CPAREN          reduce using rule 116 (dwhileconds -> empty .)


state 317

    (117) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MONT            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 117 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 318

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (30) modules2 -> . vars
    (31) modules2 -> . empty
    (9) vars -> . VAR vars1
    (145) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 145 (empty -> .)

    modules2                       shift and go to state 344
    vars                           shift and go to state 238
    empty                          shift and go to state 239

state 319

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 345


state 320

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (27) fcn3 -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    PRINT           reduce using rule 145 (empty -> .)
    PLOT            reduce using rule 145 (empty -> .)
    COUNT           reduce using rule 145 (empty -> .)
    COUNTIF         reduce using rule 145 (empty -> .)
    MEAN            reduce using rule 145 (empty -> .)
    MEDIAN          reduce using rule 145 (empty -> .)
    MODE            reduce using rule 145 (empty -> .)
    STDV            reduce using rule 145 (empty -> .)
    KMEANS          reduce using rule 145 (empty -> .)
    DERL            reduce using rule 145 (empty -> .)
    DBERN           reduce using rule 145 (empty -> .)
    DPOI            reduce using rule 145 (empty -> .)
    TRANSPOSE       reduce using rule 145 (empty -> .)
    INVERSE         reduce using rule 145 (empty -> .)
    ROTATE          reduce using rule 145 (empty -> .)
    REF             reduce using rule 145 (empty -> .)
    RREF            reduce using rule 145 (empty -> .)
    MONT            reduce using rule 145 (empty -> .)
    DO              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    CBRACKET        reduce using rule 145 (empty -> .)

    fcn3                           shift and go to state 346
    empty                          shift and go to state 347

state 321

    (28) funccall2 -> COMMA expresion . fcn2 funccall2
    (95) expresion -> expresion . RELOP exp
    (26) fcn2 -> . empty
    (145) empty -> .

    RELOP           shift and go to state 88
    COMMA           reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)

    fcn2                           shift and go to state 348
    empty                          shift and go to state 249

state 322

    (75) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (78) cn2 -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    PRINT           reduce using rule 145 (empty -> .)
    PLOT            reduce using rule 145 (empty -> .)
    COUNT           reduce using rule 145 (empty -> .)
    COUNTIF         reduce using rule 145 (empty -> .)
    MEAN            reduce using rule 145 (empty -> .)
    MEDIAN          reduce using rule 145 (empty -> .)
    MODE            reduce using rule 145 (empty -> .)
    STDV            reduce using rule 145 (empty -> .)
    KMEANS          reduce using rule 145 (empty -> .)
    DERL            reduce using rule 145 (empty -> .)
    DBERN           reduce using rule 145 (empty -> .)
    DPOI            reduce using rule 145 (empty -> .)
    TRANSPOSE       reduce using rule 145 (empty -> .)
    INVERSE         reduce using rule 145 (empty -> .)
    ROTATE          reduce using rule 145 (empty -> .)
    REF             reduce using rule 145 (empty -> .)
    RREF            reduce using rule 145 (empty -> .)
    MONT            reduce using rule 145 (empty -> .)
    DO              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    CBRACKET        reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)

    cn2                            shift and go to state 349
    empty                          shift and go to state 350

state 323

    (76) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (79) cn3 -> . empty
    (145) empty -> .

    OBRACKET        reduce using rule 145 (empty -> .)

    cn3                            shift and go to state 351
    empty                          shift and go to state 352

state 324

    (80) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 353


state 325

    (81) ifblock2 -> estatuto .
    (82) ifblock2 -> estatuto . ifblock2
    (81) ifblock2 -> . estatuto
    (82) ifblock2 -> . estatuto ifblock2
    (83) ifblock2 -> . empty
    (42) estatuto -> . asign
    (43) estatuto -> . cond
    (44) estatuto -> . escrt
    (45) estatuto -> . plot
    (46) estatuto -> . count
    (47) estatuto -> . countif
    (48) estatuto -> . metodos
    (49) estatuto -> . dwhile
    (50) estatuto -> . readln
    (51) estatuto -> . funccall
    (145) empty -> .
    (52) asign -> . ID EQUALS expresion SCOLON
    (53) asign -> . ID EQUALS ID SCOLON
    (54) asign -> . ID EQUALS ID asign2 SCOLON
    (55) asign -> . ID asign2 EQUALS ID SCOLON
    (56) asign -> . ID asign2 EQUALS expresion SCOLON
    (57) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (63) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (86) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (87) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (84) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (85) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (124) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (125) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (126) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (127) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (109) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (117) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3

  ! reduce/reduce conflict for CBRACKET resolved using rule 81 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 81 (ifblock2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

  ! CBRACKET        [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 325
    ifblock2                       shift and go to state 354
    empty                          shift and go to state 326
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 326

    (83) ifblock2 -> empty .

    CBRACKET        reduce using rule 83 (ifblock2 -> empty .)


state 327

    (63) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MONT            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 63 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 328

    (66) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MONT            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 66 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 329

    (71) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 71 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 71 (escrt3 -> STRING escrt2 escrt2 .)


state 330

    (91) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 91 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 331

    (93) xyfunc -> empty .

    CPAREN          reduce using rule 93 (xyfunc -> empty .)


state 332

    (92) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 92 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 333

    (88) plot2 -> LCOR varcte COMMA varcte RCOR .
    (89) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 88 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 355


state 334

    (84) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 356


state 335

    (85) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 357


state 336

    (138) mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc .

    CPAREN          reduce using rule 138 (mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc .)


state 337

    (123) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .

    ID              reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 123 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)


state 338

    (133) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 133 (expfunc -> ID COMMA ID COMMA ID .)


state 339

    (134) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 134 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 340

    (109) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (111) wn2 -> . empty
    (145) empty -> .

    SCOLON          reduce using rule 145 (empty -> .)

    wn2                            shift and go to state 358
    empty                          shift and go to state 359

state 341

    (113) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 113 (dwhileconds -> expresion dwhileconds .)


state 342

    (114) dwhileconds -> expresion AND . dwhileconds
    (113) dwhileconds -> . expresion dwhileconds
    (114) dwhileconds -> . expresion AND dwhileconds
    (115) dwhileconds -> . expresion OR dwhileconds
    (116) dwhileconds -> . empty
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (145) empty -> .
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    CPAREN          reduce using rule 145 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 315
    dwhileconds                    shift and go to state 360
    empty                          shift and go to state 316
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 343

    (115) dwhileconds -> expresion OR . dwhileconds
    (113) dwhileconds -> . expresion dwhileconds
    (114) dwhileconds -> . expresion AND dwhileconds
    (115) dwhileconds -> . expresion OR dwhileconds
    (116) dwhileconds -> . empty
    (94) expresion -> . exp
    (95) expresion -> . expresion RELOP exp
    (145) empty -> .
    (96) exp -> . termino
    (97) exp -> . termino PLUS exp
    (98) exp -> . termino MINUS exp
    (99) termino -> . factor
    (100) termino -> . factor MULT termino
    (101) termino -> . factor DIV termino
    (102) factor -> . OPAREN expresion CPAREN
    (103) factor -> . varcte
    (104) varcte -> . ID
    (105) varcte -> . ID asign2
    (106) varcte -> . NUMERIC
    (107) varcte -> . NUMBER
    (108) varcte -> . LOGICAL

    CPAREN          reduce using rule 145 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 315
    dwhileconds                    shift and go to state 361
    empty                          shift and go to state 316
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 344

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (145) empty -> .

    OBRACKET        reduce using rule 145 (empty -> .)

    mn3                            shift and go to state 362
    empty                          shift and go to state 363

state 345

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (145) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 145 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 145 (empty -> .) ]
  ! CPAREN          [ reduce using rule 145 (empty -> .) ]

    lugstat2                       shift and go to state 364
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 346

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MONT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 347

    (27) fcn3 -> empty .

    ID              reduce using rule 27 (fcn3 -> empty .)
    IF              reduce using rule 27 (fcn3 -> empty .)
    PRINT           reduce using rule 27 (fcn3 -> empty .)
    PLOT            reduce using rule 27 (fcn3 -> empty .)
    COUNT           reduce using rule 27 (fcn3 -> empty .)
    COUNTIF         reduce using rule 27 (fcn3 -> empty .)
    MEAN            reduce using rule 27 (fcn3 -> empty .)
    MEDIAN          reduce using rule 27 (fcn3 -> empty .)
    MODE            reduce using rule 27 (fcn3 -> empty .)
    STDV            reduce using rule 27 (fcn3 -> empty .)
    KMEANS          reduce using rule 27 (fcn3 -> empty .)
    DERL            reduce using rule 27 (fcn3 -> empty .)
    DBERN           reduce using rule 27 (fcn3 -> empty .)
    DPOI            reduce using rule 27 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 27 (fcn3 -> empty .)
    INVERSE         reduce using rule 27 (fcn3 -> empty .)
    ROTATE          reduce using rule 27 (fcn3 -> empty .)
    REF             reduce using rule 27 (fcn3 -> empty .)
    RREF            reduce using rule 27 (fcn3 -> empty .)
    MONT            reduce using rule 27 (fcn3 -> empty .)
    DO              reduce using rule 27 (fcn3 -> empty .)
    READ            reduce using rule 27 (fcn3 -> empty .)
    CBRACKET        reduce using rule 27 (fcn3 -> empty .)


state 348

    (28) funccall2 -> COMMA expresion fcn2 . funccall2
    (28) funccall2 -> . COMMA expresion fcn2 funccall2
    (29) funccall2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 294
    CPAREN          reduce using rule 145 (empty -> .)

    funccall2                      shift and go to state 365
    empty                          shift and go to state 295

state 349

    (75) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MONT            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 75 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 350

    (78) cn2 -> empty .

    ID              reduce using rule 78 (cn2 -> empty .)
    IF              reduce using rule 78 (cn2 -> empty .)
    PRINT           reduce using rule 78 (cn2 -> empty .)
    PLOT            reduce using rule 78 (cn2 -> empty .)
    COUNT           reduce using rule 78 (cn2 -> empty .)
    COUNTIF         reduce using rule 78 (cn2 -> empty .)
    MEAN            reduce using rule 78 (cn2 -> empty .)
    MEDIAN          reduce using rule 78 (cn2 -> empty .)
    MODE            reduce using rule 78 (cn2 -> empty .)
    STDV            reduce using rule 78 (cn2 -> empty .)
    KMEANS          reduce using rule 78 (cn2 -> empty .)
    DERL            reduce using rule 78 (cn2 -> empty .)
    DBERN           reduce using rule 78 (cn2 -> empty .)
    DPOI            reduce using rule 78 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 78 (cn2 -> empty .)
    INVERSE         reduce using rule 78 (cn2 -> empty .)
    ROTATE          reduce using rule 78 (cn2 -> empty .)
    REF             reduce using rule 78 (cn2 -> empty .)
    RREF            reduce using rule 78 (cn2 -> empty .)
    MONT            reduce using rule 78 (cn2 -> empty .)
    DO              reduce using rule 78 (cn2 -> empty .)
    READ            reduce using rule 78 (cn2 -> empty .)
    CBRACKET        reduce using rule 78 (cn2 -> empty .)
    CPAREN          reduce using rule 78 (cn2 -> empty .)


state 351

    (76) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (80) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 297

    ifblock                        shift and go to state 366

state 352

    (79) cn3 -> empty .

    OBRACKET        reduce using rule 79 (cn3 -> empty .)


state 353

    (80) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 80 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 80 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 354

    (82) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 82 (ifblock2 -> estatuto ifblock2 .)


state 355

    (89) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (88) plot2 -> . LCOR varcte COMMA varcte RCOR
    (89) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (90) plot2 -> . empty
    (145) empty -> .

    LCOR            shift and go to state 156
    CPAREN          reduce using rule 145 (empty -> .)

    plot2                          shift and go to state 367
    empty                          shift and go to state 368

state 356

    (84) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 369


state 357

    (85) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 61

    cond                           shift and go to state 370

state 358

    (109) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 371


state 359

    (111) wn2 -> empty .

    SCOLON          reduce using rule 111 (wn2 -> empty .)


state 360

    (114) dwhileconds -> expresion AND dwhileconds .

    CPAREN          reduce using rule 114 (dwhileconds -> expresion AND dwhileconds .)


state 361

    (115) dwhileconds -> expresion OR dwhileconds .

    CPAREN          reduce using rule 115 (dwhileconds -> expresion OR dwhileconds .)


state 362

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (32) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 373

    funblock                       shift and go to state 372

state 363

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 364

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 365

    (28) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 28 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 366

    (76) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 374


state 367

    (89) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 89 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 368

    (90) plot2 -> empty .

    CPAREN          reduce using rule 90 (plot2 -> empty .)


state 369

    (84) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MONT            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 84 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 370

    (85) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 375


state 371

    (109) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MONT            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 109 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 372

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (145) empty -> .

    FUNC            reduce using rule 145 (empty -> .)
    OBRACKET        reduce using rule 145 (empty -> .)

    mn7                            shift and go to state 376
    empty                          shift and go to state 377

state 373

    (32) funblock -> OBRACKET . block2 CBRACKET
    (34) block2 -> . estatuto
    (35) block2 -> . estatuto block2
    (36) block2 -> . empty
    (42) estatuto -> . asign
    (43) estatuto -> . cond
    (44) estatuto -> . escrt
    (45) estatuto -> . plot
    (46) estatuto -> . count
    (47) estatuto -> . countif
    (48) estatuto -> . metodos
    (49) estatuto -> . dwhile
    (50) estatuto -> . readln
    (51) estatuto -> . funccall
    (145) empty -> .
    (52) asign -> . ID EQUALS expresion SCOLON
    (53) asign -> . ID EQUALS ID SCOLON
    (54) asign -> . ID EQUALS ID asign2 SCOLON
    (55) asign -> . ID asign2 EQUALS ID SCOLON
    (56) asign -> . ID asign2 EQUALS expresion SCOLON
    (57) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (75) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (76) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (63) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (64) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (65) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (66) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (86) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (87) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (84) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (85) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (119) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (124) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (125) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (126) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (127) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (109) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (117) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3

    CBRACKET        reduce using rule 145 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    block2                         shift and go to state 378
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 374

    (76) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (78) cn2 -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    PRINT           reduce using rule 145 (empty -> .)
    PLOT            reduce using rule 145 (empty -> .)
    COUNT           reduce using rule 145 (empty -> .)
    COUNTIF         reduce using rule 145 (empty -> .)
    MEAN            reduce using rule 145 (empty -> .)
    MEDIAN          reduce using rule 145 (empty -> .)
    MODE            reduce using rule 145 (empty -> .)
    STDV            reduce using rule 145 (empty -> .)
    KMEANS          reduce using rule 145 (empty -> .)
    DERL            reduce using rule 145 (empty -> .)
    DBERN           reduce using rule 145 (empty -> .)
    DPOI            reduce using rule 145 (empty -> .)
    TRANSPOSE       reduce using rule 145 (empty -> .)
    INVERSE         reduce using rule 145 (empty -> .)
    ROTATE          reduce using rule 145 (empty -> .)
    REF             reduce using rule 145 (empty -> .)
    RREF            reduce using rule 145 (empty -> .)
    MONT            reduce using rule 145 (empty -> .)
    DO              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    CBRACKET        reduce using rule 145 (empty -> .)
    CPAREN          reduce using rule 145 (empty -> .)

    cn2                            shift and go to state 379
    empty                          shift and go to state 350

state 375

    (85) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 380


state 376

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 377

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 378

    (32) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 381


state 379

    (76) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MONT            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 76 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 380

    (85) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MONT            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 85 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 381

    (32) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 32 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 32 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 36 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 38 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 142 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 150 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 160 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 168 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 172 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 187 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 189 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 191 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 245 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 257 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 257 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 258 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 303 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 48 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 148 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 148
WARNING: reduce/reduce conflict in state 155 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 155
WARNING: reduce/reduce conflict in state 241 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 241
WARNING: reduce/reduce conflict in state 257 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 257
WARNING: reduce/reduce conflict in state 325 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 325
WARNING: reduce/reduce conflict in state 345 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 345
