Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    LOGICAL
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 block
Rule 2     addmain -> empty
Rule 3     lugstat2 -> vars
Rule 4     lugstat2 -> empty
Rule 5     lugstat3 -> modules
Rule 6     lugstat3 -> modules lugstat3
Rule 7     lugstat3 -> empty
Rule 8     vars -> VAR vars1
Rule 9     vars1 -> ID COMMA vars1
Rule 10    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 11    vars1 -> ID asign2 COLON tipo SCOLON
Rule 12    vars1 -> ID asign2 COMMA vars1
Rule 13    savename -> empty
Rule 14    modules -> FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block
Rule 15    addfunction -> empty
Rule 16    modules2 -> vars
Rule 17    modules2 -> empty
Rule 18    block -> OBRACKET block2 CBRACKET
Rule 19    block2 -> estatuto
Rule 20    block2 -> estatuto block2
Rule 21    block2 -> empty
Rule 22    tipo -> INT
Rule 23    tipo -> BOOL
Rule 24    tipo -> DOUBLE
Rule 25    tipo -> STRING
Rule 26    tipo -> CHAR
Rule 27    estatuto -> asign
Rule 28    estatuto -> cond
Rule 29    estatuto -> escrt
Rule 30    estatuto -> plot
Rule 31    estatuto -> count
Rule 32    estatuto -> countif
Rule 33    estatuto -> metodos
Rule 34    estatuto -> dwhile
Rule 35    estatuto -> readln
Rule 36    asign -> ID EQUALS expresion SCOLON
Rule 37    asign -> ID EQUALS ID SCOLON
Rule 38    asign -> ID EQUALS ID asign2 SCOLON
Rule 39    asign -> ID asign2 EQUALS ID SCOLON
Rule 40    asign -> ID asign2 EQUALS expresion SCOLON
Rule 41    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 42    asign2 -> LCOR expresion RCOR asign3
Rule 43    asign2 -> LCOR varcte RCOR asign3
Rule 44    asign3 -> LCOR expresion RCOR
Rule 45    asign3 -> LCOR varcte RCOR
Rule 46    asign3 -> empty
Rule 47    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 48    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 49    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 50    escrt2 -> COMMA escrt3
Rule 51    escrt2 -> empty
Rule 52    escrt3 -> ID escrt2
Rule 53    escrt3 -> ID
Rule 54    escrt3 -> STRING escrt2 escrt2
Rule 55    en1 -> empty
Rule 56    en2 -> empty
Rule 57    en3 -> empty
Rule 58    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 59    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 60    cn1 -> empty
Rule 61    cn2 -> empty
Rule 62    cn3 -> empty
Rule 63    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 64    ifblock2 -> estatuto
Rule 65    ifblock2 -> estatuto ifblock2
Rule 66    ifblock2 -> empty
Rule 67    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 68    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 69    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 70    plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 71    plot2 -> LCOR varcte COMMA varcte RCOR
Rule 72    plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 73    plot2 -> empty
Rule 74    xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 75    xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 76    xyfunc -> empty
Rule 77    expresion -> exp
Rule 78    expresion -> expresion RELOP exp
Rule 79    exp -> termino
Rule 80    exp -> termino PLUS exp
Rule 81    exp -> termino MINUS exp
Rule 82    termino -> factor
Rule 83    termino -> factor MULT termino
Rule 84    termino -> factor DIV termino
Rule 85    factor -> OPAREN expresion CPAREN
Rule 86    factor -> varcte
Rule 87    varcte -> ID
Rule 88    varcte -> ID asign2
Rule 89    varcte -> NUMERIC
Rule 90    varcte -> NUMBER
Rule 91    dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 92    wn1 -> empty
Rule 93    wn2 -> empty
Rule 94    wblock -> OBRACKET block2 CBRACKET
Rule 95    dwhileconds -> expresion dwhileconds
Rule 96    dwhileconds -> expresion AND dwhileconds
Rule 97    dwhileconds -> expresion OR dwhileconds
Rule 98    dwhileconds -> empty
Rule 99    readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 100   rn1 -> empty
Rule 101   metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON
Rule 102   metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON
Rule 103   metodos -> MODE OPAREN mmmfunc CPAREN SCOLON
Rule 104   metodos -> STDV OPAREN mmmfunc CPAREN SCOLON
Rule 105   metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
Rule 106   metodos -> DERL OPAREN expfunc CPAREN SCOLON
Rule 107   metodos -> DBERN OPAREN expfunc CPAREN SCOLON
Rule 108   metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON
Rule 109   metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
Rule 110   metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON
Rule 111   metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON
Rule 112   metodos -> REF OPAREN mmmfunc CPAREN SCOLON
Rule 113   metodos -> RREF OPAREN mmmfunc CPAREN SCOLON
Rule 114   metodos -> MONT OPAREN mmmfunc CPAREN SCOLON
Rule 115   expfunc -> ID COMMA ID COMMA ID
Rule 116   expfunc -> varcte COMMA varcte COMMA varcte
Rule 117   expfunc2 -> ID COMMA ID
Rule 118   expfunc2 -> varcte COMMA varcte
Rule 119   mmmfunc -> ID
Rule 120   mmmfunc -> OBRACKET mmmarray CBRACKET
Rule 121   mmmfunc -> OBRACKET mmmarray CBRACKET COMMA mmmfunc
Rule 122   mmmfunc -> empty
Rule 123   mmmarray -> varcte
Rule 124   mmmarray -> varcte COMMA mmmarray
Rule 125   mmmarray -> empty
Rule 126   empty -> <empty>

Terminals, with rules where they appear

AND                  : 96
BOOL                 : 23
CBRACKET             : 18 63 94 120 121
CHAR                 : 26
CHARACTER            : 
COLON                : 10 11 14
COMMA                : 9 12 50 67 67 68 68 68 71 72 72 105 115 115 116 116 117 118 121 124
COMMENT              : 
COUNT                : 67
COUNTIF              : 68
CPAREN               : 14 47 48 49 58 59 67 68 69 70 85 91 99 101 102 103 104 105 106 107 108 109 110 111 112 113 114
CTED                 : 
CTEI                 : 
DBERN                : 107
DERL                 : 106
DIFF                 : 
DIV                  : 84
DO                   : 91
DOUBLE               : 24
DPOI                 : 108
ELSE                 : 59
EQ                   : 
EQUALS               : 36 37 38 39 40 41 74 75
FUNC                 : 14
FX                   : 74
FY                   : 75
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 9 10 11 12 14 36 37 37 38 38 39 39 40 41 41 47 52 53 67 68 87 88 99 115 115 115 117 117 119
IF                   : 58 59
INT                  : 22
INTEGER              : 
INVERSE              : 110
KMEANS               : 105
LCOR                 : 42 43 44 45 71 72
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 
LUGSTAT              : 1
MEAN                 : 101
MEDIAN               : 102
MINUS                : 81
MODE                 : 103
MONT                 : 114
MULT                 : 83
NUMBER               : 90
NUMERIC              : 89
OBRACKET             : 18 63 94 120 121
OPAREN               : 14 47 48 49 58 59 67 68 69 70 85 91 99 101 102 103 104 105 106 107 108 109 110 111 112 113 114
OR                   : 97
PER                  : 
PLOT                 : 69 70
PLUS                 : 80
PRINT                : 47 48 49
QUOTE                : 
RCOR                 : 42 43 44 45 71 72
READ                 : 99
REF                  : 112
RELOP                : 78
ROTATE               : 111
RREF                 : 113
SCOLON               : 1 10 11 36 37 38 39 40 41 47 48 49 58 59 67 68 69 70 74 75 91 99 101 102 103 104 105 106 107 108 109 110 111 112 113 114
STDV                 : 104
STRING               : 25 49 54
TIPO                 : 
TRANSPOSE            : 109
VAR                  : 8
WHILE                : 91
error                : 

Nonterminals, with rules where they appear

addfunction          : 14
addmain              : 1
asign                : 27
asign2               : 11 12 38 39 40 41 41 88
asign3               : 42 43
block                : 1 14
block2               : 18 20 94
cn1                  : 58 59
cn2                  : 58 59
cn3                  : 59
cond                 : 28 68
count                : 31
countif              : 32
dwhile               : 34
dwhileconds          : 91 95 96 97
empty                : 2 4 7 13 15 17 21 46 51 55 56 57 60 61 62 66 73 76 92 93 98 100 122 125
en1                  : 48
en2                  : 49
en3                  : 47
escrt                : 29
escrt2               : 47 52 54 54
escrt3               : 50
estatuto             : 19 20 64 65
exp                  : 74 75 77 78 80 81
expfunc              : 106 107
expfunc2             : 108
expresion            : 36 40 42 44 48 58 59 78 85 95 96 97
factor               : 82 83 84
ifblock              : 58 59 59
ifblock2             : 63 65
lugstat              : 0
lugstat2             : 1 10
lugstat3             : 1 6
metodos              : 33
mmmarray             : 120 121 124
mmmfunc              : 101 102 103 104 105 109 110 111 112 113 114 121
modules              : 5 6
modules2             : 14 14
plot                 : 30
plot2                : 70 72
readln               : 35
rn1                  : 99
savename             : 
termino              : 79 80 81 83 84
tipo                 : 10 11 14
varcte               : 43 45 67 67 68 68 71 71 72 72 86 105 116 116 116 118 118 123 124
vars                 : 3 16
vars1                : 8 9 12
wblock               : 91
wn1                  : 91
wn2                  : 91
xyfunc               : 69 74 75

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 block
    (2) addmain -> . empty
    (126) empty -> .

    VAR             reduce using rule 126 (empty -> .)
    FUNC            reduce using rule 126 (empty -> .)
    OBRACKET        reduce using rule 126 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 block
    (3) lugstat2 -> . vars
    (4) lugstat2 -> . empty
    (8) vars -> . VAR vars1
    (126) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 126 (empty -> .)
    OBRACKET        reduce using rule 126 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 block
    (5) lugstat3 -> . modules
    (6) lugstat3 -> . modules lugstat3
    (7) lugstat3 -> . empty
    (14) modules -> . FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block
    (126) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 126 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (3) lugstat2 -> vars .

    FUNC            reduce using rule 3 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 3 (lugstat2 -> vars .)
    CPAREN          reduce using rule 3 (lugstat2 -> vars .)


state 9

    (4) lugstat2 -> empty .

    FUNC            reduce using rule 4 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 4 (lugstat2 -> empty .)
    CPAREN          reduce using rule 4 (lugstat2 -> empty .)


state 10

    (8) vars -> VAR . vars1
    (9) vars1 -> . ID COMMA vars1
    (10) vars1 -> . ID COLON tipo SCOLON lugstat2
    (11) vars1 -> . ID asign2 COLON tipo SCOLON
    (12) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . block
    (18) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 18

    block                          shift and go to state 17

state 12

    (5) lugstat3 -> modules .
    (6) lugstat3 -> modules . lugstat3
    (5) lugstat3 -> . modules
    (6) lugstat3 -> . modules lugstat3
    (7) lugstat3 -> . empty
    (14) modules -> . FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block
    (126) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 5 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 5 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 126 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (7) lugstat3 -> empty .

    OBRACKET        reduce using rule 7 (lugstat3 -> empty .)


state 14

    (14) modules -> FUNC . ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block

    ID              shift and go to state 20


state 15

    (8) vars -> VAR vars1 .

    FUNC            reduce using rule 8 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 8 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 8 (vars -> VAR vars1 .)


state 16

    (9) vars1 -> ID . COMMA vars1
    (10) vars1 -> ID . COLON tipo SCOLON lugstat2
    (11) vars1 -> ID . asign2 COLON tipo SCOLON
    (12) vars1 -> ID . asign2 COMMA vars1
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 24

    asign2                         shift and go to state 23

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 block .)


state 18

    (18) block -> OBRACKET . block2 CBRACKET
    (19) block2 -> . estatuto
    (20) block2 -> . estatuto block2
    (21) block2 -> . empty
    (27) estatuto -> . asign
    (28) estatuto -> . cond
    (29) estatuto -> . escrt
    (30) estatuto -> . plot
    (31) estatuto -> . count
    (32) estatuto -> . countif
    (33) estatuto -> . metodos
    (34) estatuto -> . dwhile
    (35) estatuto -> . readln
    (126) empty -> .
    (36) asign -> . ID EQUALS expresion SCOLON
    (37) asign -> . ID EQUALS ID SCOLON
    (38) asign -> . ID EQUALS ID asign2 SCOLON
    (39) asign -> . ID asign2 EQUALS ID SCOLON
    (40) asign -> . ID asign2 EQUALS expresion SCOLON
    (41) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (58) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (47) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (49) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (69) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (70) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (67) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (68) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (101) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (102) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (103) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (104) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (105) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (106) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (107) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (108) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (109) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (110) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (111) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (91) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (99) readln -> . READ OPAREN ID rn1 CPAREN SCOLON

    CBRACKET        reduce using rule 126 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 39
    PLOT            shift and go to state 40
    COUNT           shift and go to state 41
    COUNTIF         shift and go to state 42
    MEAN            shift and go to state 43
    MEDIAN          shift and go to state 44
    MODE            shift and go to state 45
    STDV            shift and go to state 46
    KMEANS          shift and go to state 47
    DERL            shift and go to state 48
    DBERN           shift and go to state 49
    DPOI            shift and go to state 50
    TRANSPOSE       shift and go to state 51
    INVERSE         shift and go to state 52
    ROTATE          shift and go to state 53
    REF             shift and go to state 54
    RREF            shift and go to state 55
    MONT            shift and go to state 56
    DO              shift and go to state 57
    READ            shift and go to state 58

    block2                         shift and go to state 25
    estatuto                       shift and go to state 26
    empty                          shift and go to state 27
    asign                          shift and go to state 28
    cond                           shift and go to state 29
    escrt                          shift and go to state 30
    plot                           shift and go to state 31
    count                          shift and go to state 32
    countif                        shift and go to state 33
    metodos                        shift and go to state 34
    dwhile                         shift and go to state 35
    readln                         shift and go to state 36

state 19

    (6) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 6 (lugstat3 -> modules lugstat3 .)


state 20

    (14) modules -> FUNC ID . COLON tipo addfunction OPAREN modules2 CPAREN modules2 block

    COLON           shift and go to state 59


state 21

    (9) vars1 -> ID COMMA . vars1
    (9) vars1 -> . ID COMMA vars1
    (10) vars1 -> . ID COLON tipo SCOLON lugstat2
    (11) vars1 -> . ID asign2 COLON tipo SCOLON
    (12) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 60

state 22

    (10) vars1 -> ID COLON . tipo SCOLON lugstat2
    (22) tipo -> . INT
    (23) tipo -> . BOOL
    (24) tipo -> . DOUBLE
    (25) tipo -> . STRING
    (26) tipo -> . CHAR

    INT             shift and go to state 62
    BOOL            shift and go to state 63
    DOUBLE          shift and go to state 64
    STRING          shift and go to state 65
    CHAR            shift and go to state 66

    tipo                           shift and go to state 61

state 23

    (11) vars1 -> ID asign2 . COLON tipo SCOLON
    (12) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 67
    COMMA           shift and go to state 68


state 24

    (42) asign2 -> LCOR . expresion RCOR asign3
    (43) asign2 -> LCOR . varcte RCOR asign3
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74
    OPAREN          shift and go to state 77

    expresion                      shift and go to state 69
    varcte                         shift and go to state 70
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76

state 25

    (18) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 78


state 26

    (19) block2 -> estatuto .
    (20) block2 -> estatuto . block2
    (19) block2 -> . estatuto
    (20) block2 -> . estatuto block2
    (21) block2 -> . empty
    (27) estatuto -> . asign
    (28) estatuto -> . cond
    (29) estatuto -> . escrt
    (30) estatuto -> . plot
    (31) estatuto -> . count
    (32) estatuto -> . countif
    (33) estatuto -> . metodos
    (34) estatuto -> . dwhile
    (35) estatuto -> . readln
    (126) empty -> .
    (36) asign -> . ID EQUALS expresion SCOLON
    (37) asign -> . ID EQUALS ID SCOLON
    (38) asign -> . ID EQUALS ID asign2 SCOLON
    (39) asign -> . ID asign2 EQUALS ID SCOLON
    (40) asign -> . ID asign2 EQUALS expresion SCOLON
    (41) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (58) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (47) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (49) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (69) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (70) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (67) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (68) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (101) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (102) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (103) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (104) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (105) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (106) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (107) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (108) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (109) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (110) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (111) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (91) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (99) readln -> . READ OPAREN ID rn1 CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 19 (block2 -> estatuto .)
    CBRACKET        reduce using rule 19 (block2 -> estatuto .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 39
    PLOT            shift and go to state 40
    COUNT           shift and go to state 41
    COUNTIF         shift and go to state 42
    MEAN            shift and go to state 43
    MEDIAN          shift and go to state 44
    MODE            shift and go to state 45
    STDV            shift and go to state 46
    KMEANS          shift and go to state 47
    DERL            shift and go to state 48
    DBERN           shift and go to state 49
    DPOI            shift and go to state 50
    TRANSPOSE       shift and go to state 51
    INVERSE         shift and go to state 52
    ROTATE          shift and go to state 53
    REF             shift and go to state 54
    RREF            shift and go to state 55
    MONT            shift and go to state 56
    DO              shift and go to state 57
    READ            shift and go to state 58

  ! CBRACKET        [ reduce using rule 126 (empty -> .) ]

    estatuto                       shift and go to state 26
    block2                         shift and go to state 79
    empty                          shift and go to state 27
    asign                          shift and go to state 28
    cond                           shift and go to state 29
    escrt                          shift and go to state 30
    plot                           shift and go to state 31
    count                          shift and go to state 32
    countif                        shift and go to state 33
    metodos                        shift and go to state 34
    dwhile                         shift and go to state 35
    readln                         shift and go to state 36

state 27

    (21) block2 -> empty .

    CBRACKET        reduce using rule 21 (block2 -> empty .)


state 28

    (27) estatuto -> asign .

    ID              reduce using rule 27 (estatuto -> asign .)
    IF              reduce using rule 27 (estatuto -> asign .)
    PRINT           reduce using rule 27 (estatuto -> asign .)
    PLOT            reduce using rule 27 (estatuto -> asign .)
    COUNT           reduce using rule 27 (estatuto -> asign .)
    COUNTIF         reduce using rule 27 (estatuto -> asign .)
    MEAN            reduce using rule 27 (estatuto -> asign .)
    MEDIAN          reduce using rule 27 (estatuto -> asign .)
    MODE            reduce using rule 27 (estatuto -> asign .)
    STDV            reduce using rule 27 (estatuto -> asign .)
    KMEANS          reduce using rule 27 (estatuto -> asign .)
    DERL            reduce using rule 27 (estatuto -> asign .)
    DBERN           reduce using rule 27 (estatuto -> asign .)
    DPOI            reduce using rule 27 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 27 (estatuto -> asign .)
    INVERSE         reduce using rule 27 (estatuto -> asign .)
    ROTATE          reduce using rule 27 (estatuto -> asign .)
    REF             reduce using rule 27 (estatuto -> asign .)
    RREF            reduce using rule 27 (estatuto -> asign .)
    MONT            reduce using rule 27 (estatuto -> asign .)
    DO              reduce using rule 27 (estatuto -> asign .)
    READ            reduce using rule 27 (estatuto -> asign .)
    CBRACKET        reduce using rule 27 (estatuto -> asign .)


state 29

    (28) estatuto -> cond .

    ID              reduce using rule 28 (estatuto -> cond .)
    IF              reduce using rule 28 (estatuto -> cond .)
    PRINT           reduce using rule 28 (estatuto -> cond .)
    PLOT            reduce using rule 28 (estatuto -> cond .)
    COUNT           reduce using rule 28 (estatuto -> cond .)
    COUNTIF         reduce using rule 28 (estatuto -> cond .)
    MEAN            reduce using rule 28 (estatuto -> cond .)
    MEDIAN          reduce using rule 28 (estatuto -> cond .)
    MODE            reduce using rule 28 (estatuto -> cond .)
    STDV            reduce using rule 28 (estatuto -> cond .)
    KMEANS          reduce using rule 28 (estatuto -> cond .)
    DERL            reduce using rule 28 (estatuto -> cond .)
    DBERN           reduce using rule 28 (estatuto -> cond .)
    DPOI            reduce using rule 28 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 28 (estatuto -> cond .)
    INVERSE         reduce using rule 28 (estatuto -> cond .)
    ROTATE          reduce using rule 28 (estatuto -> cond .)
    REF             reduce using rule 28 (estatuto -> cond .)
    RREF            reduce using rule 28 (estatuto -> cond .)
    MONT            reduce using rule 28 (estatuto -> cond .)
    DO              reduce using rule 28 (estatuto -> cond .)
    READ            reduce using rule 28 (estatuto -> cond .)
    CBRACKET        reduce using rule 28 (estatuto -> cond .)


state 30

    (29) estatuto -> escrt .

    ID              reduce using rule 29 (estatuto -> escrt .)
    IF              reduce using rule 29 (estatuto -> escrt .)
    PRINT           reduce using rule 29 (estatuto -> escrt .)
    PLOT            reduce using rule 29 (estatuto -> escrt .)
    COUNT           reduce using rule 29 (estatuto -> escrt .)
    COUNTIF         reduce using rule 29 (estatuto -> escrt .)
    MEAN            reduce using rule 29 (estatuto -> escrt .)
    MEDIAN          reduce using rule 29 (estatuto -> escrt .)
    MODE            reduce using rule 29 (estatuto -> escrt .)
    STDV            reduce using rule 29 (estatuto -> escrt .)
    KMEANS          reduce using rule 29 (estatuto -> escrt .)
    DERL            reduce using rule 29 (estatuto -> escrt .)
    DBERN           reduce using rule 29 (estatuto -> escrt .)
    DPOI            reduce using rule 29 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 29 (estatuto -> escrt .)
    INVERSE         reduce using rule 29 (estatuto -> escrt .)
    ROTATE          reduce using rule 29 (estatuto -> escrt .)
    REF             reduce using rule 29 (estatuto -> escrt .)
    RREF            reduce using rule 29 (estatuto -> escrt .)
    MONT            reduce using rule 29 (estatuto -> escrt .)
    DO              reduce using rule 29 (estatuto -> escrt .)
    READ            reduce using rule 29 (estatuto -> escrt .)
    CBRACKET        reduce using rule 29 (estatuto -> escrt .)


state 31

    (30) estatuto -> plot .

    ID              reduce using rule 30 (estatuto -> plot .)
    IF              reduce using rule 30 (estatuto -> plot .)
    PRINT           reduce using rule 30 (estatuto -> plot .)
    PLOT            reduce using rule 30 (estatuto -> plot .)
    COUNT           reduce using rule 30 (estatuto -> plot .)
    COUNTIF         reduce using rule 30 (estatuto -> plot .)
    MEAN            reduce using rule 30 (estatuto -> plot .)
    MEDIAN          reduce using rule 30 (estatuto -> plot .)
    MODE            reduce using rule 30 (estatuto -> plot .)
    STDV            reduce using rule 30 (estatuto -> plot .)
    KMEANS          reduce using rule 30 (estatuto -> plot .)
    DERL            reduce using rule 30 (estatuto -> plot .)
    DBERN           reduce using rule 30 (estatuto -> plot .)
    DPOI            reduce using rule 30 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 30 (estatuto -> plot .)
    INVERSE         reduce using rule 30 (estatuto -> plot .)
    ROTATE          reduce using rule 30 (estatuto -> plot .)
    REF             reduce using rule 30 (estatuto -> plot .)
    RREF            reduce using rule 30 (estatuto -> plot .)
    MONT            reduce using rule 30 (estatuto -> plot .)
    DO              reduce using rule 30 (estatuto -> plot .)
    READ            reduce using rule 30 (estatuto -> plot .)
    CBRACKET        reduce using rule 30 (estatuto -> plot .)


state 32

    (31) estatuto -> count .

    ID              reduce using rule 31 (estatuto -> count .)
    IF              reduce using rule 31 (estatuto -> count .)
    PRINT           reduce using rule 31 (estatuto -> count .)
    PLOT            reduce using rule 31 (estatuto -> count .)
    COUNT           reduce using rule 31 (estatuto -> count .)
    COUNTIF         reduce using rule 31 (estatuto -> count .)
    MEAN            reduce using rule 31 (estatuto -> count .)
    MEDIAN          reduce using rule 31 (estatuto -> count .)
    MODE            reduce using rule 31 (estatuto -> count .)
    STDV            reduce using rule 31 (estatuto -> count .)
    KMEANS          reduce using rule 31 (estatuto -> count .)
    DERL            reduce using rule 31 (estatuto -> count .)
    DBERN           reduce using rule 31 (estatuto -> count .)
    DPOI            reduce using rule 31 (estatuto -> count .)
    TRANSPOSE       reduce using rule 31 (estatuto -> count .)
    INVERSE         reduce using rule 31 (estatuto -> count .)
    ROTATE          reduce using rule 31 (estatuto -> count .)
    REF             reduce using rule 31 (estatuto -> count .)
    RREF            reduce using rule 31 (estatuto -> count .)
    MONT            reduce using rule 31 (estatuto -> count .)
    DO              reduce using rule 31 (estatuto -> count .)
    READ            reduce using rule 31 (estatuto -> count .)
    CBRACKET        reduce using rule 31 (estatuto -> count .)


state 33

    (32) estatuto -> countif .

    ID              reduce using rule 32 (estatuto -> countif .)
    IF              reduce using rule 32 (estatuto -> countif .)
    PRINT           reduce using rule 32 (estatuto -> countif .)
    PLOT            reduce using rule 32 (estatuto -> countif .)
    COUNT           reduce using rule 32 (estatuto -> countif .)
    COUNTIF         reduce using rule 32 (estatuto -> countif .)
    MEAN            reduce using rule 32 (estatuto -> countif .)
    MEDIAN          reduce using rule 32 (estatuto -> countif .)
    MODE            reduce using rule 32 (estatuto -> countif .)
    STDV            reduce using rule 32 (estatuto -> countif .)
    KMEANS          reduce using rule 32 (estatuto -> countif .)
    DERL            reduce using rule 32 (estatuto -> countif .)
    DBERN           reduce using rule 32 (estatuto -> countif .)
    DPOI            reduce using rule 32 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 32 (estatuto -> countif .)
    INVERSE         reduce using rule 32 (estatuto -> countif .)
    ROTATE          reduce using rule 32 (estatuto -> countif .)
    REF             reduce using rule 32 (estatuto -> countif .)
    RREF            reduce using rule 32 (estatuto -> countif .)
    MONT            reduce using rule 32 (estatuto -> countif .)
    DO              reduce using rule 32 (estatuto -> countif .)
    READ            reduce using rule 32 (estatuto -> countif .)
    CBRACKET        reduce using rule 32 (estatuto -> countif .)


state 34

    (33) estatuto -> metodos .

    ID              reduce using rule 33 (estatuto -> metodos .)
    IF              reduce using rule 33 (estatuto -> metodos .)
    PRINT           reduce using rule 33 (estatuto -> metodos .)
    PLOT            reduce using rule 33 (estatuto -> metodos .)
    COUNT           reduce using rule 33 (estatuto -> metodos .)
    COUNTIF         reduce using rule 33 (estatuto -> metodos .)
    MEAN            reduce using rule 33 (estatuto -> metodos .)
    MEDIAN          reduce using rule 33 (estatuto -> metodos .)
    MODE            reduce using rule 33 (estatuto -> metodos .)
    STDV            reduce using rule 33 (estatuto -> metodos .)
    KMEANS          reduce using rule 33 (estatuto -> metodos .)
    DERL            reduce using rule 33 (estatuto -> metodos .)
    DBERN           reduce using rule 33 (estatuto -> metodos .)
    DPOI            reduce using rule 33 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 33 (estatuto -> metodos .)
    INVERSE         reduce using rule 33 (estatuto -> metodos .)
    ROTATE          reduce using rule 33 (estatuto -> metodos .)
    REF             reduce using rule 33 (estatuto -> metodos .)
    RREF            reduce using rule 33 (estatuto -> metodos .)
    MONT            reduce using rule 33 (estatuto -> metodos .)
    DO              reduce using rule 33 (estatuto -> metodos .)
    READ            reduce using rule 33 (estatuto -> metodos .)
    CBRACKET        reduce using rule 33 (estatuto -> metodos .)


state 35

    (34) estatuto -> dwhile .

    ID              reduce using rule 34 (estatuto -> dwhile .)
    IF              reduce using rule 34 (estatuto -> dwhile .)
    PRINT           reduce using rule 34 (estatuto -> dwhile .)
    PLOT            reduce using rule 34 (estatuto -> dwhile .)
    COUNT           reduce using rule 34 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 34 (estatuto -> dwhile .)
    MEAN            reduce using rule 34 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 34 (estatuto -> dwhile .)
    MODE            reduce using rule 34 (estatuto -> dwhile .)
    STDV            reduce using rule 34 (estatuto -> dwhile .)
    KMEANS          reduce using rule 34 (estatuto -> dwhile .)
    DERL            reduce using rule 34 (estatuto -> dwhile .)
    DBERN           reduce using rule 34 (estatuto -> dwhile .)
    DPOI            reduce using rule 34 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 34 (estatuto -> dwhile .)
    INVERSE         reduce using rule 34 (estatuto -> dwhile .)
    ROTATE          reduce using rule 34 (estatuto -> dwhile .)
    REF             reduce using rule 34 (estatuto -> dwhile .)
    RREF            reduce using rule 34 (estatuto -> dwhile .)
    MONT            reduce using rule 34 (estatuto -> dwhile .)
    DO              reduce using rule 34 (estatuto -> dwhile .)
    READ            reduce using rule 34 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 34 (estatuto -> dwhile .)


state 36

    (35) estatuto -> readln .

    ID              reduce using rule 35 (estatuto -> readln .)
    IF              reduce using rule 35 (estatuto -> readln .)
    PRINT           reduce using rule 35 (estatuto -> readln .)
    PLOT            reduce using rule 35 (estatuto -> readln .)
    COUNT           reduce using rule 35 (estatuto -> readln .)
    COUNTIF         reduce using rule 35 (estatuto -> readln .)
    MEAN            reduce using rule 35 (estatuto -> readln .)
    MEDIAN          reduce using rule 35 (estatuto -> readln .)
    MODE            reduce using rule 35 (estatuto -> readln .)
    STDV            reduce using rule 35 (estatuto -> readln .)
    KMEANS          reduce using rule 35 (estatuto -> readln .)
    DERL            reduce using rule 35 (estatuto -> readln .)
    DBERN           reduce using rule 35 (estatuto -> readln .)
    DPOI            reduce using rule 35 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 35 (estatuto -> readln .)
    INVERSE         reduce using rule 35 (estatuto -> readln .)
    ROTATE          reduce using rule 35 (estatuto -> readln .)
    REF             reduce using rule 35 (estatuto -> readln .)
    RREF            reduce using rule 35 (estatuto -> readln .)
    MONT            reduce using rule 35 (estatuto -> readln .)
    DO              reduce using rule 35 (estatuto -> readln .)
    READ            reduce using rule 35 (estatuto -> readln .)
    CBRACKET        reduce using rule 35 (estatuto -> readln .)


state 37

    (36) asign -> ID . EQUALS expresion SCOLON
    (37) asign -> ID . EQUALS ID SCOLON
    (38) asign -> ID . EQUALS ID asign2 SCOLON
    (39) asign -> ID . asign2 EQUALS ID SCOLON
    (40) asign -> ID . asign2 EQUALS expresion SCOLON
    (41) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

    EQUALS          shift and go to state 80
    LCOR            shift and go to state 24

    asign2                         shift and go to state 81

state 38

    (58) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 82


state 39

    (47) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (49) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON

    OPAREN          shift and go to state 83


state 40

    (69) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (70) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 84


state 41

    (67) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 85


state 42

    (68) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 86


state 43

    (101) metodos -> MEAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 87


state 44

    (102) metodos -> MEDIAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 88


state 45

    (103) metodos -> MODE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 89


state 46

    (104) metodos -> STDV . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 90


state 47

    (105) metodos -> KMEANS . OPAREN varcte COMMA mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 91


state 48

    (106) metodos -> DERL . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 92


state 49

    (107) metodos -> DBERN . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 93


state 50

    (108) metodos -> DPOI . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 94


state 51

    (109) metodos -> TRANSPOSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 95


state 52

    (110) metodos -> INVERSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 96


state 53

    (111) metodos -> ROTATE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 97


state 54

    (112) metodos -> REF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 98


state 55

    (113) metodos -> RREF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 99


state 56

    (114) metodos -> MONT . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 100


state 57

    (91) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (92) wn1 -> . empty
    (126) empty -> .

    OBRACKET        reduce using rule 126 (empty -> .)

    wn1                            shift and go to state 101
    empty                          shift and go to state 102

state 58

    (99) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 103


state 59

    (14) modules -> FUNC ID COLON . tipo addfunction OPAREN modules2 CPAREN modules2 block
    (22) tipo -> . INT
    (23) tipo -> . BOOL
    (24) tipo -> . DOUBLE
    (25) tipo -> . STRING
    (26) tipo -> . CHAR

    INT             shift and go to state 62
    BOOL            shift and go to state 63
    DOUBLE          shift and go to state 64
    STRING          shift and go to state 65
    CHAR            shift and go to state 66

    tipo                           shift and go to state 104

state 60

    (9) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 9 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 9 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 9 (vars1 -> ID COMMA vars1 .)


state 61

    (10) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 105


state 62

    (22) tipo -> INT .

    SCOLON          reduce using rule 22 (tipo -> INT .)
    OPAREN          reduce using rule 22 (tipo -> INT .)


state 63

    (23) tipo -> BOOL .

    SCOLON          reduce using rule 23 (tipo -> BOOL .)
    OPAREN          reduce using rule 23 (tipo -> BOOL .)


state 64

    (24) tipo -> DOUBLE .

    SCOLON          reduce using rule 24 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 24 (tipo -> DOUBLE .)


state 65

    (25) tipo -> STRING .

    SCOLON          reduce using rule 25 (tipo -> STRING .)
    OPAREN          reduce using rule 25 (tipo -> STRING .)


state 66

    (26) tipo -> CHAR .

    SCOLON          reduce using rule 26 (tipo -> CHAR .)
    OPAREN          reduce using rule 26 (tipo -> CHAR .)


state 67

    (11) vars1 -> ID asign2 COLON . tipo SCOLON
    (22) tipo -> . INT
    (23) tipo -> . BOOL
    (24) tipo -> . DOUBLE
    (25) tipo -> . STRING
    (26) tipo -> . CHAR

    INT             shift and go to state 62
    BOOL            shift and go to state 63
    DOUBLE          shift and go to state 64
    STRING          shift and go to state 65
    CHAR            shift and go to state 66

    tipo                           shift and go to state 106

state 68

    (12) vars1 -> ID asign2 COMMA . vars1
    (9) vars1 -> . ID COMMA vars1
    (10) vars1 -> . ID COLON tipo SCOLON lugstat2
    (11) vars1 -> . ID asign2 COLON tipo SCOLON
    (12) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 107

state 69

    (42) asign2 -> LCOR expresion . RCOR asign3
    (78) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 108
    RELOP           shift and go to state 109


state 70

    (43) asign2 -> LCOR varcte . RCOR asign3
    (86) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 110
    MULT            reduce using rule 86 (factor -> varcte .)
    DIV             reduce using rule 86 (factor -> varcte .)
    PLUS            reduce using rule 86 (factor -> varcte .)
    MINUS           reduce using rule 86 (factor -> varcte .)
    RELOP           reduce using rule 86 (factor -> varcte .)

  ! RCOR            [ reduce using rule 86 (factor -> varcte .) ]


state 71

    (77) expresion -> exp .

    RCOR            reduce using rule 77 (expresion -> exp .)
    RELOP           reduce using rule 77 (expresion -> exp .)
    CPAREN          reduce using rule 77 (expresion -> exp .)
    SCOLON          reduce using rule 77 (expresion -> exp .)
    AND             reduce using rule 77 (expresion -> exp .)
    OR              reduce using rule 77 (expresion -> exp .)
    OPAREN          reduce using rule 77 (expresion -> exp .)
    ID              reduce using rule 77 (expresion -> exp .)
    NUMERIC         reduce using rule 77 (expresion -> exp .)
    NUMBER          reduce using rule 77 (expresion -> exp .)


state 72

    (87) varcte -> ID .
    (88) varcte -> ID . asign2
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

    RCOR            reduce using rule 87 (varcte -> ID .)
    MULT            reduce using rule 87 (varcte -> ID .)
    DIV             reduce using rule 87 (varcte -> ID .)
    PLUS            reduce using rule 87 (varcte -> ID .)
    MINUS           reduce using rule 87 (varcte -> ID .)
    RELOP           reduce using rule 87 (varcte -> ID .)
    CPAREN          reduce using rule 87 (varcte -> ID .)
    COMMA           reduce using rule 87 (varcte -> ID .)
    SCOLON          reduce using rule 87 (varcte -> ID .)
    AND             reduce using rule 87 (varcte -> ID .)
    OR              reduce using rule 87 (varcte -> ID .)
    OPAREN          reduce using rule 87 (varcte -> ID .)
    ID              reduce using rule 87 (varcte -> ID .)
    NUMERIC         reduce using rule 87 (varcte -> ID .)
    NUMBER          reduce using rule 87 (varcte -> ID .)
    CBRACKET        reduce using rule 87 (varcte -> ID .)
    LCOR            shift and go to state 24

    asign2                         shift and go to state 111

state 73

    (89) varcte -> NUMERIC .

    RCOR            reduce using rule 89 (varcte -> NUMERIC .)
    MULT            reduce using rule 89 (varcte -> NUMERIC .)
    DIV             reduce using rule 89 (varcte -> NUMERIC .)
    PLUS            reduce using rule 89 (varcte -> NUMERIC .)
    MINUS           reduce using rule 89 (varcte -> NUMERIC .)
    RELOP           reduce using rule 89 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 89 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 89 (varcte -> NUMERIC .)
    COMMA           reduce using rule 89 (varcte -> NUMERIC .)
    AND             reduce using rule 89 (varcte -> NUMERIC .)
    OR              reduce using rule 89 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 89 (varcte -> NUMERIC .)
    ID              reduce using rule 89 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 89 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 89 (varcte -> NUMERIC .)
    CBRACKET        reduce using rule 89 (varcte -> NUMERIC .)


state 74

    (90) varcte -> NUMBER .

    RCOR            reduce using rule 90 (varcte -> NUMBER .)
    MULT            reduce using rule 90 (varcte -> NUMBER .)
    DIV             reduce using rule 90 (varcte -> NUMBER .)
    PLUS            reduce using rule 90 (varcte -> NUMBER .)
    MINUS           reduce using rule 90 (varcte -> NUMBER .)
    RELOP           reduce using rule 90 (varcte -> NUMBER .)
    CPAREN          reduce using rule 90 (varcte -> NUMBER .)
    SCOLON          reduce using rule 90 (varcte -> NUMBER .)
    COMMA           reduce using rule 90 (varcte -> NUMBER .)
    AND             reduce using rule 90 (varcte -> NUMBER .)
    OR              reduce using rule 90 (varcte -> NUMBER .)
    OPAREN          reduce using rule 90 (varcte -> NUMBER .)
    ID              reduce using rule 90 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 90 (varcte -> NUMBER .)
    NUMBER          reduce using rule 90 (varcte -> NUMBER .)
    CBRACKET        reduce using rule 90 (varcte -> NUMBER .)


state 75

    (79) exp -> termino .
    (80) exp -> termino . PLUS exp
    (81) exp -> termino . MINUS exp

    RCOR            reduce using rule 79 (exp -> termino .)
    RELOP           reduce using rule 79 (exp -> termino .)
    CPAREN          reduce using rule 79 (exp -> termino .)
    SCOLON          reduce using rule 79 (exp -> termino .)
    AND             reduce using rule 79 (exp -> termino .)
    OR              reduce using rule 79 (exp -> termino .)
    OPAREN          reduce using rule 79 (exp -> termino .)
    ID              reduce using rule 79 (exp -> termino .)
    NUMERIC         reduce using rule 79 (exp -> termino .)
    NUMBER          reduce using rule 79 (exp -> termino .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 76

    (82) termino -> factor .
    (83) termino -> factor . MULT termino
    (84) termino -> factor . DIV termino

    PLUS            reduce using rule 82 (termino -> factor .)
    MINUS           reduce using rule 82 (termino -> factor .)
    RCOR            reduce using rule 82 (termino -> factor .)
    RELOP           reduce using rule 82 (termino -> factor .)
    CPAREN          reduce using rule 82 (termino -> factor .)
    SCOLON          reduce using rule 82 (termino -> factor .)
    AND             reduce using rule 82 (termino -> factor .)
    OR              reduce using rule 82 (termino -> factor .)
    OPAREN          reduce using rule 82 (termino -> factor .)
    ID              reduce using rule 82 (termino -> factor .)
    NUMERIC         reduce using rule 82 (termino -> factor .)
    NUMBER          reduce using rule 82 (termino -> factor .)
    MULT            shift and go to state 114
    DIV             shift and go to state 115


state 77

    (85) factor -> OPAREN . expresion CPAREN
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 116
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 78

    (18) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 18 (block -> OBRACKET block2 CBRACKET .)
    FUNC            reduce using rule 18 (block -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 18 (block -> OBRACKET block2 CBRACKET .)


state 79

    (20) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 20 (block2 -> estatuto block2 .)


state 80

    (36) asign -> ID EQUALS . expresion SCOLON
    (37) asign -> ID EQUALS . ID SCOLON
    (38) asign -> ID EQUALS . ID asign2 SCOLON
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 118
    OPAREN          shift and go to state 77
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 119
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 81

    (39) asign -> ID asign2 . EQUALS ID SCOLON
    (40) asign -> ID asign2 . EQUALS expresion SCOLON
    (41) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 120


state 82

    (58) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 121
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 83

    (47) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (49) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 122
    STRING          shift and go to state 124
    OPAREN          shift and go to state 77
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 123
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 84

    (69) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (70) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (74) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (75) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (76) xyfunc -> . empty
    (71) plot2 -> . LCOR varcte COMMA varcte RCOR
    (72) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (73) plot2 -> . empty
    (126) empty -> .

    FX              shift and go to state 127
    FY              shift and go to state 128
    LCOR            shift and go to state 130
    CPAREN          reduce using rule 126 (empty -> .)

    xyfunc                         shift and go to state 125
    plot2                          shift and go to state 126
    empty                          shift and go to state 129

state 85

    (67) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 131


state 86

    (68) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 132


state 87

    (101) metodos -> MEAN OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 133
    empty                          shift and go to state 136

state 88

    (102) metodos -> MEDIAN OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 137
    empty                          shift and go to state 136

state 89

    (103) metodos -> MODE OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 138
    empty                          shift and go to state 136

state 90

    (104) metodos -> STDV OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 139
    empty                          shift and go to state 136

state 91

    (105) metodos -> KMEANS OPAREN . varcte COMMA mmmfunc CPAREN SCOLON
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 140

state 92

    (106) metodos -> DERL OPAREN . expfunc CPAREN SCOLON
    (115) expfunc -> . ID COMMA ID COMMA ID
    (116) expfunc -> . varcte COMMA varcte COMMA varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 142
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expfunc                        shift and go to state 141
    varcte                         shift and go to state 143

state 93

    (107) metodos -> DBERN OPAREN . expfunc CPAREN SCOLON
    (115) expfunc -> . ID COMMA ID COMMA ID
    (116) expfunc -> . varcte COMMA varcte COMMA varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 142
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expfunc                        shift and go to state 144
    varcte                         shift and go to state 143

state 94

    (108) metodos -> DPOI OPAREN . expfunc2 CPAREN SCOLON
    (117) expfunc2 -> . ID COMMA ID
    (118) expfunc2 -> . varcte COMMA varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 146
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expfunc2                       shift and go to state 145
    varcte                         shift and go to state 147

state 95

    (109) metodos -> TRANSPOSE OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 148
    empty                          shift and go to state 136

state 96

    (110) metodos -> INVERSE OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 149
    empty                          shift and go to state 136

state 97

    (111) metodos -> ROTATE OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 150
    empty                          shift and go to state 136

state 98

    (112) metodos -> REF OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 151
    empty                          shift and go to state 136

state 99

    (113) metodos -> RREF OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 152
    empty                          shift and go to state 136

state 100

    (114) metodos -> MONT OPAREN . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 153
    empty                          shift and go to state 136

state 101

    (91) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (94) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 155

    wblock                         shift and go to state 154

state 102

    (92) wn1 -> empty .

    OBRACKET        reduce using rule 92 (wn1 -> empty .)


state 103

    (99) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 156


state 104

    (14) modules -> FUNC ID COLON tipo . addfunction OPAREN modules2 CPAREN modules2 block
    (15) addfunction -> . empty
    (126) empty -> .

    OPAREN          reduce using rule 126 (empty -> .)

    addfunction                    shift and go to state 157
    empty                          shift and go to state 158

state 105

    (10) vars1 -> ID COLON tipo SCOLON . lugstat2
    (3) lugstat2 -> . vars
    (4) lugstat2 -> . empty
    (8) vars -> . VAR vars1
    (126) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 126 (empty -> .)
    OBRACKET        reduce using rule 126 (empty -> .)
    CPAREN          reduce using rule 126 (empty -> .)

    lugstat2                       shift and go to state 159
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 106

    (11) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 160


state 107

    (12) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 12 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 12 (vars1 -> ID asign2 COMMA vars1 .)


state 108

    (42) asign2 -> LCOR expresion RCOR . asign3
    (44) asign3 -> . LCOR expresion RCOR
    (45) asign3 -> . LCOR varcte RCOR
    (46) asign3 -> . empty
    (126) empty -> .

    LCOR            shift and go to state 161
    COLON           reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    EQUALS          reduce using rule 126 (empty -> .)
    RCOR            reduce using rule 126 (empty -> .)
    MULT            reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    RELOP           reduce using rule 126 (empty -> .)
    CPAREN          reduce using rule 126 (empty -> .)
    SCOLON          reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    OPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    NUMERIC         reduce using rule 126 (empty -> .)
    NUMBER          reduce using rule 126 (empty -> .)
    CBRACKET        reduce using rule 126 (empty -> .)

    asign3                         shift and go to state 162
    empty                          shift and go to state 163

state 109

    (78) expresion -> expresion RELOP . exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    exp                            shift and go to state 164
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 110

    (43) asign2 -> LCOR varcte RCOR . asign3
    (44) asign3 -> . LCOR expresion RCOR
    (45) asign3 -> . LCOR varcte RCOR
    (46) asign3 -> . empty
    (126) empty -> .

    LCOR            shift and go to state 161
    COLON           reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    EQUALS          reduce using rule 126 (empty -> .)
    RCOR            reduce using rule 126 (empty -> .)
    MULT            reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    RELOP           reduce using rule 126 (empty -> .)
    CPAREN          reduce using rule 126 (empty -> .)
    SCOLON          reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    OPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    NUMERIC         reduce using rule 126 (empty -> .)
    NUMBER          reduce using rule 126 (empty -> .)
    CBRACKET        reduce using rule 126 (empty -> .)

    asign3                         shift and go to state 165
    empty                          shift and go to state 163

state 111

    (88) varcte -> ID asign2 .

    RCOR            reduce using rule 88 (varcte -> ID asign2 .)
    MULT            reduce using rule 88 (varcte -> ID asign2 .)
    DIV             reduce using rule 88 (varcte -> ID asign2 .)
    PLUS            reduce using rule 88 (varcte -> ID asign2 .)
    MINUS           reduce using rule 88 (varcte -> ID asign2 .)
    RELOP           reduce using rule 88 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 88 (varcte -> ID asign2 .)
    COMMA           reduce using rule 88 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 88 (varcte -> ID asign2 .)
    AND             reduce using rule 88 (varcte -> ID asign2 .)
    OR              reduce using rule 88 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 88 (varcte -> ID asign2 .)
    ID              reduce using rule 88 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 88 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 88 (varcte -> ID asign2 .)
    CBRACKET        reduce using rule 88 (varcte -> ID asign2 .)


state 112

    (80) exp -> termino PLUS . exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    termino                        shift and go to state 75
    exp                            shift and go to state 166
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 113

    (81) exp -> termino MINUS . exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    termino                        shift and go to state 75
    exp                            shift and go to state 167
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 114

    (83) termino -> factor MULT . termino
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    factor                         shift and go to state 76
    termino                        shift and go to state 168
    varcte                         shift and go to state 117

state 115

    (84) termino -> factor DIV . termino
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    factor                         shift and go to state 76
    termino                        shift and go to state 169
    varcte                         shift and go to state 117

state 116

    (85) factor -> OPAREN expresion . CPAREN
    (78) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 170
    RELOP           shift and go to state 109


state 117

    (86) factor -> varcte .

    MULT            reduce using rule 86 (factor -> varcte .)
    DIV             reduce using rule 86 (factor -> varcte .)
    PLUS            reduce using rule 86 (factor -> varcte .)
    MINUS           reduce using rule 86 (factor -> varcte .)
    CPAREN          reduce using rule 86 (factor -> varcte .)
    RELOP           reduce using rule 86 (factor -> varcte .)
    SCOLON          reduce using rule 86 (factor -> varcte .)
    RCOR            reduce using rule 86 (factor -> varcte .)
    AND             reduce using rule 86 (factor -> varcte .)
    OR              reduce using rule 86 (factor -> varcte .)
    OPAREN          reduce using rule 86 (factor -> varcte .)
    ID              reduce using rule 86 (factor -> varcte .)
    NUMERIC         reduce using rule 86 (factor -> varcte .)
    NUMBER          reduce using rule 86 (factor -> varcte .)


state 118

    (37) asign -> ID EQUALS ID . SCOLON
    (38) asign -> ID EQUALS ID . asign2 SCOLON
    (87) varcte -> ID .
    (88) varcte -> ID . asign2
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 171
    MULT            reduce using rule 87 (varcte -> ID .)
    DIV             reduce using rule 87 (varcte -> ID .)
    PLUS            reduce using rule 87 (varcte -> ID .)
    MINUS           reduce using rule 87 (varcte -> ID .)
    RELOP           reduce using rule 87 (varcte -> ID .)
    LCOR            shift and go to state 24

  ! SCOLON          [ reduce using rule 87 (varcte -> ID .) ]

    asign2                         shift and go to state 172

state 119

    (36) asign -> ID EQUALS expresion . SCOLON
    (78) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 173
    RELOP           shift and go to state 109


state 120

    (39) asign -> ID asign2 EQUALS . ID SCOLON
    (40) asign -> ID asign2 EQUALS . expresion SCOLON
    (41) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 174
    OPAREN          shift and go to state 77
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 175
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 121

    (58) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (78) expresion -> expresion . RELOP exp
    (60) cn1 -> . empty
    (126) empty -> .

    RELOP           shift and go to state 109
    CPAREN          reduce using rule 126 (empty -> .)

    cn1                            shift and go to state 176
    empty                          shift and go to state 177

state 122

    (47) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (87) varcte -> ID .
    (88) varcte -> ID . asign2
    (57) en3 -> . empty
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3
    (126) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 87 (varcte -> ID .)
    MULT            reduce using rule 87 (varcte -> ID .)
    DIV             reduce using rule 87 (varcte -> ID .)
    PLUS            reduce using rule 87 (varcte -> ID .)
    MINUS           reduce using rule 87 (varcte -> ID .)
    RELOP           reduce using rule 87 (varcte -> ID .)
    CPAREN          reduce using rule 87 (varcte -> ID .)
    LCOR            shift and go to state 24
    COMMA           reduce using rule 126 (empty -> .)

  ! CPAREN          [ reduce using rule 126 (empty -> .) ]

    en3                            shift and go to state 178
    asign2                         shift and go to state 111
    empty                          shift and go to state 179

state 123

    (48) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (78) expresion -> expresion . RELOP exp
    (55) en1 -> . empty
    (126) empty -> .

    RELOP           shift and go to state 109
    CPAREN          reduce using rule 126 (empty -> .)

    en1                            shift and go to state 180
    empty                          shift and go to state 181

state 124

    (49) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON

    CPAREN          shift and go to state 182


state 125

    (69) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 183


state 126

    (70) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 184


state 127

    (74) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 185


state 128

    (75) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 186


state 129

    (76) xyfunc -> empty .
    (73) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 73 (plot2 -> empty .)
    CPAREN          reduce using rule 73 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 76 (xyfunc -> empty .) ]


state 130

    (71) plot2 -> LCOR . varcte COMMA varcte RCOR
    (72) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 187

state 131

    (67) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 188


state 132

    (68) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 189


state 133

    (101) metodos -> MEAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 190


state 134

    (119) mmmfunc -> ID .

    CPAREN          reduce using rule 119 (mmmfunc -> ID .)


state 135

    (120) mmmfunc -> OBRACKET . mmmarray CBRACKET
    (121) mmmfunc -> OBRACKET . mmmarray CBRACKET COMMA mmmfunc
    (123) mmmarray -> . varcte
    (124) mmmarray -> . varcte COMMA mmmarray
    (125) mmmarray -> . empty
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER
    (126) empty -> .

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74
    CBRACKET        reduce using rule 126 (empty -> .)

    mmmarray                       shift and go to state 191
    varcte                         shift and go to state 192
    empty                          shift and go to state 193

state 136

    (122) mmmfunc -> empty .

    CPAREN          reduce using rule 122 (mmmfunc -> empty .)


state 137

    (102) metodos -> MEDIAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 194


state 138

    (103) metodos -> MODE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 195


state 139

    (104) metodos -> STDV OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 196


state 140

    (105) metodos -> KMEANS OPAREN varcte . COMMA mmmfunc CPAREN SCOLON

    COMMA           shift and go to state 197


state 141

    (106) metodos -> DERL OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 198


state 142

    (115) expfunc -> ID . COMMA ID COMMA ID
    (87) varcte -> ID .
    (88) varcte -> ID . asign2
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 199
    LCOR            shift and go to state 24

  ! COMMA           [ reduce using rule 87 (varcte -> ID .) ]

    asign2                         shift and go to state 111

state 143

    (116) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 200


state 144

    (107) metodos -> DBERN OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 201


state 145

    (108) metodos -> DPOI OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 202


state 146

    (117) expfunc2 -> ID . COMMA ID
    (87) varcte -> ID .
    (88) varcte -> ID . asign2
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 203
    LCOR            shift and go to state 24

  ! COMMA           [ reduce using rule 87 (varcte -> ID .) ]

    asign2                         shift and go to state 111

state 147

    (118) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 204


state 148

    (109) metodos -> TRANSPOSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 205


state 149

    (110) metodos -> INVERSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 206


state 150

    (111) metodos -> ROTATE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 207


state 151

    (112) metodos -> REF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 208


state 152

    (113) metodos -> RREF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 209


state 153

    (114) metodos -> MONT OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 210


state 154

    (91) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 211


state 155

    (94) wblock -> OBRACKET . block2 CBRACKET
    (19) block2 -> . estatuto
    (20) block2 -> . estatuto block2
    (21) block2 -> . empty
    (27) estatuto -> . asign
    (28) estatuto -> . cond
    (29) estatuto -> . escrt
    (30) estatuto -> . plot
    (31) estatuto -> . count
    (32) estatuto -> . countif
    (33) estatuto -> . metodos
    (34) estatuto -> . dwhile
    (35) estatuto -> . readln
    (126) empty -> .
    (36) asign -> . ID EQUALS expresion SCOLON
    (37) asign -> . ID EQUALS ID SCOLON
    (38) asign -> . ID EQUALS ID asign2 SCOLON
    (39) asign -> . ID asign2 EQUALS ID SCOLON
    (40) asign -> . ID asign2 EQUALS expresion SCOLON
    (41) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (58) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (47) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (49) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (69) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (70) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (67) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (68) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (101) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (102) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (103) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (104) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (105) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (106) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (107) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (108) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (109) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (110) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (111) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (91) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (99) readln -> . READ OPAREN ID rn1 CPAREN SCOLON

    CBRACKET        reduce using rule 126 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 39
    PLOT            shift and go to state 40
    COUNT           shift and go to state 41
    COUNTIF         shift and go to state 42
    MEAN            shift and go to state 43
    MEDIAN          shift and go to state 44
    MODE            shift and go to state 45
    STDV            shift and go to state 46
    KMEANS          shift and go to state 47
    DERL            shift and go to state 48
    DBERN           shift and go to state 49
    DPOI            shift and go to state 50
    TRANSPOSE       shift and go to state 51
    INVERSE         shift and go to state 52
    ROTATE          shift and go to state 53
    REF             shift and go to state 54
    RREF            shift and go to state 55
    MONT            shift and go to state 56
    DO              shift and go to state 57
    READ            shift and go to state 58

    block2                         shift and go to state 212
    estatuto                       shift and go to state 26
    empty                          shift and go to state 27
    asign                          shift and go to state 28
    cond                           shift and go to state 29
    escrt                          shift and go to state 30
    plot                           shift and go to state 31
    count                          shift and go to state 32
    countif                        shift and go to state 33
    metodos                        shift and go to state 34
    dwhile                         shift and go to state 35
    readln                         shift and go to state 36

state 156

    (99) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (100) rn1 -> . empty
    (126) empty -> .

    CPAREN          reduce using rule 126 (empty -> .)

    rn1                            shift and go to state 213
    empty                          shift and go to state 214

state 157

    (14) modules -> FUNC ID COLON tipo addfunction . OPAREN modules2 CPAREN modules2 block

    OPAREN          shift and go to state 215


state 158

    (15) addfunction -> empty .

    OPAREN          reduce using rule 15 (addfunction -> empty .)


state 159

    (10) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 10 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 160

    (11) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 11 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 11 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 11 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 161

    (44) asign3 -> LCOR . expresion RCOR
    (45) asign3 -> LCOR . varcte RCOR
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74
    OPAREN          shift and go to state 77

    expresion                      shift and go to state 216
    varcte                         shift and go to state 217
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76

state 162

    (42) asign2 -> LCOR expresion RCOR asign3 .

    COLON           reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    COMMA           reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    EQUALS          reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    RCOR            reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    MULT            reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    DIV             reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    PLUS            reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    MINUS           reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    RELOP           reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    CPAREN          reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    SCOLON          reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    AND             reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    OR              reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    OPAREN          reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    ID              reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMERIC         reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMBER          reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)
    CBRACKET        reduce using rule 42 (asign2 -> LCOR expresion RCOR asign3 .)


state 163

    (46) asign3 -> empty .

    COLON           reduce using rule 46 (asign3 -> empty .)
    COMMA           reduce using rule 46 (asign3 -> empty .)
    EQUALS          reduce using rule 46 (asign3 -> empty .)
    RCOR            reduce using rule 46 (asign3 -> empty .)
    MULT            reduce using rule 46 (asign3 -> empty .)
    DIV             reduce using rule 46 (asign3 -> empty .)
    PLUS            reduce using rule 46 (asign3 -> empty .)
    MINUS           reduce using rule 46 (asign3 -> empty .)
    RELOP           reduce using rule 46 (asign3 -> empty .)
    CPAREN          reduce using rule 46 (asign3 -> empty .)
    SCOLON          reduce using rule 46 (asign3 -> empty .)
    AND             reduce using rule 46 (asign3 -> empty .)
    OR              reduce using rule 46 (asign3 -> empty .)
    OPAREN          reduce using rule 46 (asign3 -> empty .)
    ID              reduce using rule 46 (asign3 -> empty .)
    NUMERIC         reduce using rule 46 (asign3 -> empty .)
    NUMBER          reduce using rule 46 (asign3 -> empty .)
    CBRACKET        reduce using rule 46 (asign3 -> empty .)


state 164

    (78) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 78 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 78 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 78 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 78 (expresion -> expresion RELOP exp .)
    AND             reduce using rule 78 (expresion -> expresion RELOP exp .)
    OR              reduce using rule 78 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 78 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 78 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 78 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 78 (expresion -> expresion RELOP exp .)


state 165

    (43) asign2 -> LCOR varcte RCOR asign3 .

    COLON           reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    COMMA           reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    EQUALS          reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    RCOR            reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    MULT            reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    DIV             reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    PLUS            reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    MINUS           reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    RELOP           reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    CPAREN          reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    SCOLON          reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    AND             reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    OR              reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    OPAREN          reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    ID              reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMERIC         reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMBER          reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)
    CBRACKET        reduce using rule 43 (asign2 -> LCOR varcte RCOR asign3 .)


state 166

    (80) exp -> termino PLUS exp .

    RCOR            reduce using rule 80 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 80 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 80 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 80 (exp -> termino PLUS exp .)
    AND             reduce using rule 80 (exp -> termino PLUS exp .)
    OR              reduce using rule 80 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 80 (exp -> termino PLUS exp .)
    ID              reduce using rule 80 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 80 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 80 (exp -> termino PLUS exp .)


state 167

    (81) exp -> termino MINUS exp .

    RCOR            reduce using rule 81 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 81 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 81 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 81 (exp -> termino MINUS exp .)
    AND             reduce using rule 81 (exp -> termino MINUS exp .)
    OR              reduce using rule 81 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 81 (exp -> termino MINUS exp .)
    ID              reduce using rule 81 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 81 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 81 (exp -> termino MINUS exp .)


state 168

    (83) termino -> factor MULT termino .

    PLUS            reduce using rule 83 (termino -> factor MULT termino .)
    MINUS           reduce using rule 83 (termino -> factor MULT termino .)
    RCOR            reduce using rule 83 (termino -> factor MULT termino .)
    RELOP           reduce using rule 83 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 83 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 83 (termino -> factor MULT termino .)
    AND             reduce using rule 83 (termino -> factor MULT termino .)
    OR              reduce using rule 83 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 83 (termino -> factor MULT termino .)
    ID              reduce using rule 83 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 83 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 83 (termino -> factor MULT termino .)


state 169

    (84) termino -> factor DIV termino .

    PLUS            reduce using rule 84 (termino -> factor DIV termino .)
    MINUS           reduce using rule 84 (termino -> factor DIV termino .)
    RCOR            reduce using rule 84 (termino -> factor DIV termino .)
    RELOP           reduce using rule 84 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 84 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 84 (termino -> factor DIV termino .)
    AND             reduce using rule 84 (termino -> factor DIV termino .)
    OR              reduce using rule 84 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 84 (termino -> factor DIV termino .)
    ID              reduce using rule 84 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 84 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 84 (termino -> factor DIV termino .)


state 170

    (85) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    AND             reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    OR              reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 85 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 85 (factor -> OPAREN expresion CPAREN .)


state 171

    (37) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    MONT            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 37 (asign -> ID EQUALS ID SCOLON .)


state 172

    (38) asign -> ID EQUALS ID asign2 . SCOLON
    (88) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 218
    MULT            reduce using rule 88 (varcte -> ID asign2 .)
    DIV             reduce using rule 88 (varcte -> ID asign2 .)
    PLUS            reduce using rule 88 (varcte -> ID asign2 .)
    MINUS           reduce using rule 88 (varcte -> ID asign2 .)
    RELOP           reduce using rule 88 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 88 (varcte -> ID asign2 .) ]


state 173

    (36) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    MONT            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 36 (asign -> ID EQUALS expresion SCOLON .)


state 174

    (39) asign -> ID asign2 EQUALS ID . SCOLON
    (41) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (87) varcte -> ID .
    (88) varcte -> ID . asign2
    (42) asign2 -> . LCOR expresion RCOR asign3
    (43) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 220
    MULT            reduce using rule 87 (varcte -> ID .)
    DIV             reduce using rule 87 (varcte -> ID .)
    PLUS            reduce using rule 87 (varcte -> ID .)
    MINUS           reduce using rule 87 (varcte -> ID .)
    RELOP           reduce using rule 87 (varcte -> ID .)
    LCOR            shift and go to state 24

  ! SCOLON          [ reduce using rule 87 (varcte -> ID .) ]

    asign2                         shift and go to state 219

state 175

    (40) asign -> ID asign2 EQUALS expresion . SCOLON
    (78) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 221
    RELOP           shift and go to state 109


state 176

    (58) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (59) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 222


state 177

    (60) cn1 -> empty .

    CPAREN          reduce using rule 60 (cn1 -> empty .)


state 178

    (47) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (50) escrt2 -> . COMMA escrt3
    (51) escrt2 -> . empty
    (126) empty -> .

    COMMA           shift and go to state 224
    CPAREN          reduce using rule 126 (empty -> .)

    escrt2                         shift and go to state 223
    empty                          shift and go to state 225

state 179

    (57) en3 -> empty .

    COMMA           reduce using rule 57 (en3 -> empty .)
    CPAREN          reduce using rule 57 (en3 -> empty .)


state 180

    (48) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 226


state 181

    (55) en1 -> empty .

    CPAREN          reduce using rule 55 (en1 -> empty .)


state 182

    (49) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (56) en2 -> . empty
    (126) empty -> .

    SCOLON          reduce using rule 126 (empty -> .)

    en2                            shift and go to state 227
    empty                          shift and go to state 228

state 183

    (69) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 229


state 184

    (70) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 230


state 185

    (74) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    exp                            shift and go to state 231
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 186

    (75) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    exp                            shift and go to state 232
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 187

    (71) plot2 -> LCOR varcte . COMMA varcte RCOR
    (72) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 233


state 188

    (67) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 234

state 189

    (68) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 235

state 190

    (101) metodos -> MEAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 236


state 191

    (120) mmmfunc -> OBRACKET mmmarray . CBRACKET
    (121) mmmfunc -> OBRACKET mmmarray . CBRACKET COMMA mmmfunc

    CBRACKET        shift and go to state 237


state 192

    (123) mmmarray -> varcte .
    (124) mmmarray -> varcte . COMMA mmmarray

    CBRACKET        reduce using rule 123 (mmmarray -> varcte .)
    COMMA           shift and go to state 238


state 193

    (125) mmmarray -> empty .

    CBRACKET        reduce using rule 125 (mmmarray -> empty .)


state 194

    (102) metodos -> MEDIAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 239


state 195

    (103) metodos -> MODE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 240


state 196

    (104) metodos -> STDV OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 241


state 197

    (105) metodos -> KMEANS OPAREN varcte COMMA . mmmfunc CPAREN SCOLON
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 242
    empty                          shift and go to state 136

state 198

    (106) metodos -> DERL OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 243


state 199

    (115) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 244


state 200

    (116) expfunc -> varcte COMMA . varcte COMMA varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 245

state 201

    (107) metodos -> DBERN OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 246


state 202

    (108) metodos -> DPOI OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 247


state 203

    (117) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 248


state 204

    (118) expfunc2 -> varcte COMMA . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 249

state 205

    (109) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 250


state 206

    (110) metodos -> INVERSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 251


state 207

    (111) metodos -> ROTATE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 252


state 208

    (112) metodos -> REF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 253


state 209

    (113) metodos -> RREF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 254


state 210

    (114) metodos -> MONT OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 255


state 211

    (91) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 256


state 212

    (94) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 257


state 213

    (99) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 258


state 214

    (100) rn1 -> empty .

    CPAREN          reduce using rule 100 (rn1 -> empty .)


state 215

    (14) modules -> FUNC ID COLON tipo addfunction OPAREN . modules2 CPAREN modules2 block
    (16) modules2 -> . vars
    (17) modules2 -> . empty
    (8) vars -> . VAR vars1
    (126) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 126 (empty -> .)

    modules2                       shift and go to state 259
    vars                           shift and go to state 260
    empty                          shift and go to state 261

state 216

    (44) asign3 -> LCOR expresion . RCOR
    (78) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 262
    RELOP           shift and go to state 109


state 217

    (45) asign3 -> LCOR varcte . RCOR
    (86) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 263
    MULT            reduce using rule 86 (factor -> varcte .)
    DIV             reduce using rule 86 (factor -> varcte .)
    PLUS            reduce using rule 86 (factor -> varcte .)
    MINUS           reduce using rule 86 (factor -> varcte .)
    RELOP           reduce using rule 86 (factor -> varcte .)

  ! RCOR            [ reduce using rule 86 (factor -> varcte .) ]


state 218

    (38) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 38 (asign -> ID EQUALS ID asign2 SCOLON .)


state 219

    (41) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (88) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 264
    MULT            reduce using rule 88 (varcte -> ID asign2 .)
    DIV             reduce using rule 88 (varcte -> ID asign2 .)
    PLUS            reduce using rule 88 (varcte -> ID asign2 .)
    MINUS           reduce using rule 88 (varcte -> ID asign2 .)
    RELOP           reduce using rule 88 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 88 (varcte -> ID asign2 .) ]


state 220

    (39) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    MONT            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 39 (asign -> ID asign2 EQUALS ID SCOLON .)


state 221

    (40) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MONT            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 40 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 222

    (58) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (59) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (63) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 266

    ifblock                        shift and go to state 265

state 223

    (47) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 267


state 224

    (50) escrt2 -> COMMA . escrt3
    (52) escrt3 -> . ID escrt2
    (53) escrt3 -> . ID
    (54) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 269
    STRING          shift and go to state 270

    escrt3                         shift and go to state 268

state 225

    (51) escrt2 -> empty .

    CPAREN          reduce using rule 51 (escrt2 -> empty .)
    COMMA           reduce using rule 51 (escrt2 -> empty .)


state 226

    (48) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 271


state 227

    (49) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 272


state 228

    (56) en2 -> empty .

    SCOLON          reduce using rule 56 (en2 -> empty .)


state 229

    (69) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MONT            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 69 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 230

    (70) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MONT            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 70 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 231

    (74) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 273


state 232

    (75) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 274


state 233

    (71) plot2 -> LCOR varcte COMMA . varcte RCOR
    (72) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 275

state 234

    (67) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 276


state 235

    (68) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 277


state 236

    (101) metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 101 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)


state 237

    (120) mmmfunc -> OBRACKET mmmarray CBRACKET .
    (121) mmmfunc -> OBRACKET mmmarray CBRACKET . COMMA mmmfunc

    CPAREN          reduce using rule 120 (mmmfunc -> OBRACKET mmmarray CBRACKET .)
    COMMA           shift and go to state 278


state 238

    (124) mmmarray -> varcte COMMA . mmmarray
    (123) mmmarray -> . varcte
    (124) mmmarray -> . varcte COMMA mmmarray
    (125) mmmarray -> . empty
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER
    (126) empty -> .

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74
    CBRACKET        reduce using rule 126 (empty -> .)

    varcte                         shift and go to state 192
    mmmarray                       shift and go to state 279
    empty                          shift and go to state 193

state 239

    (102) metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 102 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)


state 240

    (103) metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 103 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)


state 241

    (104) metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 104 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)


state 242

    (105) metodos -> KMEANS OPAREN varcte COMMA mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 280


state 243

    (106) metodos -> DERL OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 106 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)


state 244

    (115) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 281


state 245

    (116) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 282


state 246

    (107) metodos -> DBERN OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 107 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)


state 247

    (108) metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MONT            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 108 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)


state 248

    (117) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 117 (expfunc2 -> ID COMMA ID .)


state 249

    (118) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 118 (expfunc2 -> varcte COMMA varcte .)


state 250

    (109) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 109 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)


state 251

    (110) metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 110 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)


state 252

    (111) metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 111 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)


state 253

    (112) metodos -> REF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 112 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)


state 254

    (113) metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 113 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)


state 255

    (114) metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 114 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)


state 256

    (91) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (95) dwhileconds -> . expresion dwhileconds
    (96) dwhileconds -> . expresion AND dwhileconds
    (97) dwhileconds -> . expresion OR dwhileconds
    (98) dwhileconds -> . empty
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (126) empty -> .
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    CPAREN          reduce using rule 126 (empty -> .)
    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    dwhileconds                    shift and go to state 283
    expresion                      shift and go to state 284
    empty                          shift and go to state 285
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 257

    (94) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 94 (wblock -> OBRACKET block2 CBRACKET .)


state 258

    (99) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 286


state 259

    (14) modules -> FUNC ID COLON tipo addfunction OPAREN modules2 . CPAREN modules2 block

    CPAREN          shift and go to state 287


state 260

    (16) modules2 -> vars .

    CPAREN          reduce using rule 16 (modules2 -> vars .)
    OBRACKET        reduce using rule 16 (modules2 -> vars .)


state 261

    (17) modules2 -> empty .

    CPAREN          reduce using rule 17 (modules2 -> empty .)
    OBRACKET        reduce using rule 17 (modules2 -> empty .)


state 262

    (44) asign3 -> LCOR expresion RCOR .

    COLON           reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    MULT            reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    DIV             reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    AND             reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    OR              reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    ID              reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 44 (asign3 -> LCOR expresion RCOR .)
    CBRACKET        reduce using rule 44 (asign3 -> LCOR expresion RCOR .)


state 263

    (45) asign3 -> LCOR varcte RCOR .

    COLON           reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    MULT            reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    DIV             reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    AND             reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    OR              reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    ID              reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 45 (asign3 -> LCOR varcte RCOR .)
    CBRACKET        reduce using rule 45 (asign3 -> LCOR varcte RCOR .)


state 264

    (41) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 41 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 265

    (58) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (59) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 288
    ELSE            shift and go to state 289


state 266

    (63) ifblock -> OBRACKET . ifblock2 CBRACKET
    (64) ifblock2 -> . estatuto
    (65) ifblock2 -> . estatuto ifblock2
    (66) ifblock2 -> . empty
    (27) estatuto -> . asign
    (28) estatuto -> . cond
    (29) estatuto -> . escrt
    (30) estatuto -> . plot
    (31) estatuto -> . count
    (32) estatuto -> . countif
    (33) estatuto -> . metodos
    (34) estatuto -> . dwhile
    (35) estatuto -> . readln
    (126) empty -> .
    (36) asign -> . ID EQUALS expresion SCOLON
    (37) asign -> . ID EQUALS ID SCOLON
    (38) asign -> . ID EQUALS ID asign2 SCOLON
    (39) asign -> . ID asign2 EQUALS ID SCOLON
    (40) asign -> . ID asign2 EQUALS expresion SCOLON
    (41) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (58) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (47) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (49) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (69) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (70) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (67) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (68) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (101) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (102) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (103) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (104) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (105) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (106) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (107) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (108) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (109) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (110) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (111) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (91) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (99) readln -> . READ OPAREN ID rn1 CPAREN SCOLON

    CBRACKET        reduce using rule 126 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 39
    PLOT            shift and go to state 40
    COUNT           shift and go to state 41
    COUNTIF         shift and go to state 42
    MEAN            shift and go to state 43
    MEDIAN          shift and go to state 44
    MODE            shift and go to state 45
    STDV            shift and go to state 46
    KMEANS          shift and go to state 47
    DERL            shift and go to state 48
    DBERN           shift and go to state 49
    DPOI            shift and go to state 50
    TRANSPOSE       shift and go to state 51
    INVERSE         shift and go to state 52
    ROTATE          shift and go to state 53
    REF             shift and go to state 54
    RREF            shift and go to state 55
    MONT            shift and go to state 56
    DO              shift and go to state 57
    READ            shift and go to state 58

    ifblock2                       shift and go to state 290
    estatuto                       shift and go to state 291
    empty                          shift and go to state 292
    asign                          shift and go to state 28
    cond                           shift and go to state 29
    escrt                          shift and go to state 30
    plot                           shift and go to state 31
    count                          shift and go to state 32
    countif                        shift and go to state 33
    metodos                        shift and go to state 34
    dwhile                         shift and go to state 35
    readln                         shift and go to state 36

state 267

    (47) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 293


state 268

    (50) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 50 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 50 (escrt2 -> COMMA escrt3 .)


state 269

    (52) escrt3 -> ID . escrt2
    (53) escrt3 -> ID .
    (50) escrt2 -> . COMMA escrt3
    (51) escrt2 -> . empty
    (126) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 53 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 53 (escrt3 -> ID .)
    COMMA           shift and go to state 224

  ! COMMA           [ reduce using rule 53 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 126 (empty -> .) ]
  ! COMMA           [ reduce using rule 126 (empty -> .) ]

    escrt2                         shift and go to state 294
    empty                          shift and go to state 225

state 270

    (54) escrt3 -> STRING . escrt2 escrt2
    (50) escrt2 -> . COMMA escrt3
    (51) escrt2 -> . empty
    (126) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 224
    CPAREN          reduce using rule 126 (empty -> .)

  ! COMMA           [ reduce using rule 126 (empty -> .) ]

    escrt2                         shift and go to state 295
    empty                          shift and go to state 225

state 271

    (48) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MONT            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 48 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 272

    (49) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MONT            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 49 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 273

    (74) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (74) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (75) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (76) xyfunc -> . empty
    (126) empty -> .

    FX              shift and go to state 127
    FY              shift and go to state 128
    CPAREN          reduce using rule 126 (empty -> .)

    xyfunc                         shift and go to state 296
    empty                          shift and go to state 297

state 274

    (75) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (74) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (75) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (76) xyfunc -> . empty
    (126) empty -> .

    FX              shift and go to state 127
    FY              shift and go to state 128
    CPAREN          reduce using rule 126 (empty -> .)

    xyfunc                         shift and go to state 298
    empty                          shift and go to state 297

state 275

    (71) plot2 -> LCOR varcte COMMA varcte . RCOR
    (72) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 299


state 276

    (67) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 300

state 277

    (68) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 301

state 278

    (121) mmmfunc -> OBRACKET mmmarray CBRACKET COMMA . mmmfunc
    (119) mmmfunc -> . ID
    (120) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (121) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (122) mmmfunc -> . empty
    (126) empty -> .

    ID              shift and go to state 134
    OBRACKET        shift and go to state 135
    CPAREN          reduce using rule 126 (empty -> .)

    mmmfunc                        shift and go to state 302
    empty                          shift and go to state 136

state 279

    (124) mmmarray -> varcte COMMA mmmarray .

    CBRACKET        reduce using rule 124 (mmmarray -> varcte COMMA mmmarray .)


state 280

    (105) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 303


state 281

    (115) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 304


state 282

    (116) expfunc -> varcte COMMA varcte COMMA . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    varcte                         shift and go to state 305

state 283

    (91) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 306


state 284

    (95) dwhileconds -> expresion . dwhileconds
    (96) dwhileconds -> expresion . AND dwhileconds
    (97) dwhileconds -> expresion . OR dwhileconds
    (78) expresion -> expresion . RELOP exp
    (95) dwhileconds -> . expresion dwhileconds
    (96) dwhileconds -> . expresion AND dwhileconds
    (97) dwhileconds -> . expresion OR dwhileconds
    (98) dwhileconds -> . empty
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (126) empty -> .
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    AND             shift and go to state 308
    OR              shift and go to state 309
    RELOP           shift and go to state 109
    CPAREN          reduce using rule 126 (empty -> .)
    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 284
    dwhileconds                    shift and go to state 307
    exp                            shift and go to state 71
    empty                          shift and go to state 285
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 285

    (98) dwhileconds -> empty .

    CPAREN          reduce using rule 98 (dwhileconds -> empty .)


state 286

    (99) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MONT            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 99 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 287

    (14) modules -> FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN . modules2 block
    (16) modules2 -> . vars
    (17) modules2 -> . empty
    (8) vars -> . VAR vars1
    (126) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 126 (empty -> .)

    modules2                       shift and go to state 310
    vars                           shift and go to state 260
    empty                          shift and go to state 261

state 288

    (58) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (61) cn2 -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PLOT            reduce using rule 126 (empty -> .)
    COUNT           reduce using rule 126 (empty -> .)
    COUNTIF         reduce using rule 126 (empty -> .)
    MEAN            reduce using rule 126 (empty -> .)
    MEDIAN          reduce using rule 126 (empty -> .)
    MODE            reduce using rule 126 (empty -> .)
    STDV            reduce using rule 126 (empty -> .)
    KMEANS          reduce using rule 126 (empty -> .)
    DERL            reduce using rule 126 (empty -> .)
    DBERN           reduce using rule 126 (empty -> .)
    DPOI            reduce using rule 126 (empty -> .)
    TRANSPOSE       reduce using rule 126 (empty -> .)
    INVERSE         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    REF             reduce using rule 126 (empty -> .)
    RREF            reduce using rule 126 (empty -> .)
    MONT            reduce using rule 126 (empty -> .)
    DO              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    CBRACKET        reduce using rule 126 (empty -> .)
    CPAREN          reduce using rule 126 (empty -> .)

    cn2                            shift and go to state 311
    empty                          shift and go to state 312

state 289

    (59) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (62) cn3 -> . empty
    (126) empty -> .

    OBRACKET        reduce using rule 126 (empty -> .)

    cn3                            shift and go to state 313
    empty                          shift and go to state 314

state 290

    (63) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 315


state 291

    (64) ifblock2 -> estatuto .
    (65) ifblock2 -> estatuto . ifblock2
    (64) ifblock2 -> . estatuto
    (65) ifblock2 -> . estatuto ifblock2
    (66) ifblock2 -> . empty
    (27) estatuto -> . asign
    (28) estatuto -> . cond
    (29) estatuto -> . escrt
    (30) estatuto -> . plot
    (31) estatuto -> . count
    (32) estatuto -> . countif
    (33) estatuto -> . metodos
    (34) estatuto -> . dwhile
    (35) estatuto -> . readln
    (126) empty -> .
    (36) asign -> . ID EQUALS expresion SCOLON
    (37) asign -> . ID EQUALS ID SCOLON
    (38) asign -> . ID EQUALS ID asign2 SCOLON
    (39) asign -> . ID asign2 EQUALS ID SCOLON
    (40) asign -> . ID asign2 EQUALS expresion SCOLON
    (41) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (58) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (47) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (48) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (49) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (69) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (70) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (67) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (68) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (101) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (102) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (103) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (104) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (105) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (106) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (107) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (108) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (109) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (110) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (111) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (91) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (99) readln -> . READ OPAREN ID rn1 CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 64 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 64 (ifblock2 -> estatuto .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 39
    PLOT            shift and go to state 40
    COUNT           shift and go to state 41
    COUNTIF         shift and go to state 42
    MEAN            shift and go to state 43
    MEDIAN          shift and go to state 44
    MODE            shift and go to state 45
    STDV            shift and go to state 46
    KMEANS          shift and go to state 47
    DERL            shift and go to state 48
    DBERN           shift and go to state 49
    DPOI            shift and go to state 50
    TRANSPOSE       shift and go to state 51
    INVERSE         shift and go to state 52
    ROTATE          shift and go to state 53
    REF             shift and go to state 54
    RREF            shift and go to state 55
    MONT            shift and go to state 56
    DO              shift and go to state 57
    READ            shift and go to state 58

  ! CBRACKET        [ reduce using rule 126 (empty -> .) ]

    estatuto                       shift and go to state 291
    ifblock2                       shift and go to state 316
    empty                          shift and go to state 292
    asign                          shift and go to state 28
    cond                           shift and go to state 29
    escrt                          shift and go to state 30
    plot                           shift and go to state 31
    count                          shift and go to state 32
    countif                        shift and go to state 33
    metodos                        shift and go to state 34
    dwhile                         shift and go to state 35
    readln                         shift and go to state 36

state 292

    (66) ifblock2 -> empty .

    CBRACKET        reduce using rule 66 (ifblock2 -> empty .)


state 293

    (47) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MONT            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 47 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 294

    (52) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 52 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 52 (escrt3 -> ID escrt2 .)


state 295

    (54) escrt3 -> STRING escrt2 . escrt2
    (50) escrt2 -> . COMMA escrt3
    (51) escrt2 -> . empty
    (126) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 224
    CPAREN          reduce using rule 126 (empty -> .)

  ! COMMA           [ reduce using rule 126 (empty -> .) ]

    escrt2                         shift and go to state 317
    empty                          shift and go to state 225

state 296

    (74) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 74 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 297

    (76) xyfunc -> empty .

    CPAREN          reduce using rule 76 (xyfunc -> empty .)


state 298

    (75) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 75 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 299

    (71) plot2 -> LCOR varcte COMMA varcte RCOR .
    (72) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 71 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 318


state 300

    (67) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 319


state 301

    (68) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 320


state 302

    (121) mmmfunc -> OBRACKET mmmarray CBRACKET COMMA mmmfunc .

    CPAREN          reduce using rule 121 (mmmfunc -> OBRACKET mmmarray CBRACKET COMMA mmmfunc .)


state 303

    (105) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .

    ID              reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 105 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)


state 304

    (115) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 115 (expfunc -> ID COMMA ID COMMA ID .)


state 305

    (116) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 116 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 306

    (91) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (93) wn2 -> . empty
    (126) empty -> .

    SCOLON          reduce using rule 126 (empty -> .)

    wn2                            shift and go to state 321
    empty                          shift and go to state 322

state 307

    (95) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 95 (dwhileconds -> expresion dwhileconds .)


state 308

    (96) dwhileconds -> expresion AND . dwhileconds
    (95) dwhileconds -> . expresion dwhileconds
    (96) dwhileconds -> . expresion AND dwhileconds
    (97) dwhileconds -> . expresion OR dwhileconds
    (98) dwhileconds -> . empty
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (126) empty -> .
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    CPAREN          reduce using rule 126 (empty -> .)
    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 284
    dwhileconds                    shift and go to state 323
    empty                          shift and go to state 285
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 309

    (97) dwhileconds -> expresion OR . dwhileconds
    (95) dwhileconds -> . expresion dwhileconds
    (96) dwhileconds -> . expresion AND dwhileconds
    (97) dwhileconds -> . expresion OR dwhileconds
    (98) dwhileconds -> . empty
    (77) expresion -> . exp
    (78) expresion -> . expresion RELOP exp
    (126) empty -> .
    (79) exp -> . termino
    (80) exp -> . termino PLUS exp
    (81) exp -> . termino MINUS exp
    (82) termino -> . factor
    (83) termino -> . factor MULT termino
    (84) termino -> . factor DIV termino
    (85) factor -> . OPAREN expresion CPAREN
    (86) factor -> . varcte
    (87) varcte -> . ID
    (88) varcte -> . ID asign2
    (89) varcte -> . NUMERIC
    (90) varcte -> . NUMBER

    CPAREN          reduce using rule 126 (empty -> .)
    OPAREN          shift and go to state 77
    ID              shift and go to state 72
    NUMERIC         shift and go to state 73
    NUMBER          shift and go to state 74

    expresion                      shift and go to state 284
    dwhileconds                    shift and go to state 324
    empty                          shift and go to state 285
    exp                            shift and go to state 71
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    varcte                         shift and go to state 117

state 310

    (14) modules -> FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 . block
    (18) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 18

    block                          shift and go to state 325

state 311

    (58) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MONT            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 58 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 312

    (61) cn2 -> empty .

    ID              reduce using rule 61 (cn2 -> empty .)
    IF              reduce using rule 61 (cn2 -> empty .)
    PRINT           reduce using rule 61 (cn2 -> empty .)
    PLOT            reduce using rule 61 (cn2 -> empty .)
    COUNT           reduce using rule 61 (cn2 -> empty .)
    COUNTIF         reduce using rule 61 (cn2 -> empty .)
    MEAN            reduce using rule 61 (cn2 -> empty .)
    MEDIAN          reduce using rule 61 (cn2 -> empty .)
    MODE            reduce using rule 61 (cn2 -> empty .)
    STDV            reduce using rule 61 (cn2 -> empty .)
    KMEANS          reduce using rule 61 (cn2 -> empty .)
    DERL            reduce using rule 61 (cn2 -> empty .)
    DBERN           reduce using rule 61 (cn2 -> empty .)
    DPOI            reduce using rule 61 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 61 (cn2 -> empty .)
    INVERSE         reduce using rule 61 (cn2 -> empty .)
    ROTATE          reduce using rule 61 (cn2 -> empty .)
    REF             reduce using rule 61 (cn2 -> empty .)
    RREF            reduce using rule 61 (cn2 -> empty .)
    MONT            reduce using rule 61 (cn2 -> empty .)
    DO              reduce using rule 61 (cn2 -> empty .)
    READ            reduce using rule 61 (cn2 -> empty .)
    CBRACKET        reduce using rule 61 (cn2 -> empty .)
    CPAREN          reduce using rule 61 (cn2 -> empty .)


state 313

    (59) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (63) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 266

    ifblock                        shift and go to state 326

state 314

    (62) cn3 -> empty .

    OBRACKET        reduce using rule 62 (cn3 -> empty .)


state 315

    (63) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 63 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 63 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 316

    (65) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 65 (ifblock2 -> estatuto ifblock2 .)


state 317

    (54) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 54 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 54 (escrt3 -> STRING escrt2 escrt2 .)


state 318

    (72) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (71) plot2 -> . LCOR varcte COMMA varcte RCOR
    (72) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (73) plot2 -> . empty
    (126) empty -> .

    LCOR            shift and go to state 130
    CPAREN          reduce using rule 126 (empty -> .)

    plot2                          shift and go to state 327
    empty                          shift and go to state 328

state 319

    (67) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 329


state 320

    (68) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (58) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (59) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 38

    cond                           shift and go to state 330

state 321

    (91) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 331


state 322

    (93) wn2 -> empty .

    SCOLON          reduce using rule 93 (wn2 -> empty .)


state 323

    (96) dwhileconds -> expresion AND dwhileconds .

    CPAREN          reduce using rule 96 (dwhileconds -> expresion AND dwhileconds .)


state 324

    (97) dwhileconds -> expresion OR dwhileconds .

    CPAREN          reduce using rule 97 (dwhileconds -> expresion OR dwhileconds .)


state 325

    (14) modules -> FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block .

    FUNC            reduce using rule 14 (modules -> FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block .)
    OBRACKET        reduce using rule 14 (modules -> FUNC ID COLON tipo addfunction OPAREN modules2 CPAREN modules2 block .)


state 326

    (59) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 332


state 327

    (72) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 72 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 328

    (73) plot2 -> empty .

    CPAREN          reduce using rule 73 (plot2 -> empty .)


state 329

    (67) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MONT            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 67 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 330

    (68) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 333


state 331

    (91) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MONT            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 91 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 332

    (59) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (61) cn2 -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PLOT            reduce using rule 126 (empty -> .)
    COUNT           reduce using rule 126 (empty -> .)
    COUNTIF         reduce using rule 126 (empty -> .)
    MEAN            reduce using rule 126 (empty -> .)
    MEDIAN          reduce using rule 126 (empty -> .)
    MODE            reduce using rule 126 (empty -> .)
    STDV            reduce using rule 126 (empty -> .)
    KMEANS          reduce using rule 126 (empty -> .)
    DERL            reduce using rule 126 (empty -> .)
    DBERN           reduce using rule 126 (empty -> .)
    DPOI            reduce using rule 126 (empty -> .)
    TRANSPOSE       reduce using rule 126 (empty -> .)
    INVERSE         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    REF             reduce using rule 126 (empty -> .)
    RREF            reduce using rule 126 (empty -> .)
    MONT            reduce using rule 126 (empty -> .)
    DO              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    CBRACKET        reduce using rule 126 (empty -> .)
    CPAREN          reduce using rule 126 (empty -> .)

    cn2                            shift and go to state 334
    empty                          shift and go to state 312

state 333

    (68) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 335


state 334

    (59) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MONT            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 59 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 335

    (68) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MONT            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 68 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 70 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 142 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 146 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 172 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 174 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 217 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 219 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 269 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 269 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 270 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 295 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 26 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 26
WARNING: reduce/reduce conflict in state 122 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 122
WARNING: reduce/reduce conflict in state 129 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 129
WARNING: reduce/reduce conflict in state 269 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 269
WARNING: reduce/reduce conflict in state 291 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 291
