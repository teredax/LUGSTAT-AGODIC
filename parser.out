Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    LOGICAL
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID asign2 COLON tipo SCOLON
Rule 13    vars1 -> ID asign2 COMMA vars1
Rule 14    savename -> empty
Rule 15    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 16    mn1 -> empty
Rule 17    mn7 -> empty
Rule 18    mn2 -> empty
Rule 19    mn3 -> empty
Rule 20    funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN
Rule 21    fcn1 -> empty
Rule 22    funccall2 -> COMMA expresion funccall2
Rule 23    funccall2 -> empty
Rule 24    modules2 -> vars
Rule 25    modules2 -> empty
Rule 26    funblock -> OBRACKET block2 CBRACKET
Rule 27    block -> OBRACKET block2 CBRACKET
Rule 28    block2 -> estatuto
Rule 29    block2 -> estatuto block2
Rule 30    block2 -> empty
Rule 31    tipo -> INT
Rule 32    tipo -> BOOL
Rule 33    tipo -> DOUBLE
Rule 34    tipo -> STRING
Rule 35    tipo -> CHAR
Rule 36    estatuto -> asign
Rule 37    estatuto -> cond
Rule 38    estatuto -> escrt
Rule 39    estatuto -> plot
Rule 40    estatuto -> count
Rule 41    estatuto -> countif
Rule 42    estatuto -> metodos
Rule 43    estatuto -> dwhile
Rule 44    estatuto -> readln
Rule 45    estatuto -> funccall
Rule 46    asign -> ID EQUALS expresion SCOLON
Rule 47    asign -> ID EQUALS ID SCOLON
Rule 48    asign -> ID EQUALS ID asign2 SCOLON
Rule 49    asign -> ID asign2 EQUALS ID SCOLON
Rule 50    asign -> ID asign2 EQUALS expresion SCOLON
Rule 51    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 52    asign2 -> LCOR expresion RCOR asign3
Rule 53    asign2 -> LCOR varcte RCOR asign3
Rule 54    asign3 -> LCOR expresion RCOR
Rule 55    asign3 -> LCOR varcte RCOR
Rule 56    asign3 -> empty
Rule 57    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 58    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 59    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 60    escrt2 -> COMMA escrt3
Rule 61    escrt2 -> empty
Rule 62    escrt3 -> ID escrt2
Rule 63    escrt3 -> ID
Rule 64    escrt3 -> STRING escrt2 escrt2
Rule 65    en1 -> empty
Rule 66    en2 -> empty
Rule 67    en3 -> empty
Rule 68    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 69    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 70    cn1 -> empty
Rule 71    cn2 -> empty
Rule 72    cn3 -> empty
Rule 73    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 74    ifblock2 -> estatuto
Rule 75    ifblock2 -> estatuto ifblock2
Rule 76    ifblock2 -> empty
Rule 77    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 78    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 79    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 80    plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 81    plot2 -> LCOR varcte COMMA varcte RCOR
Rule 82    plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 83    plot2 -> empty
Rule 84    xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 85    xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 86    xyfunc -> empty
Rule 87    expresion -> exp
Rule 88    expresion -> expresion RELOP exp
Rule 89    exp -> termino
Rule 90    exp -> termino PLUS exp
Rule 91    exp -> termino MINUS exp
Rule 92    termino -> factor
Rule 93    termino -> factor MULT termino
Rule 94    termino -> factor DIV termino
Rule 95    factor -> OPAREN expresion CPAREN
Rule 96    factor -> varcte
Rule 97    varcte -> ID
Rule 98    varcte -> ID asign2
Rule 99    varcte -> NUMERIC
Rule 100   varcte -> NUMBER
Rule 101   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 102   wn1 -> empty
Rule 103   wn2 -> empty
Rule 104   wblock -> OBRACKET block2 CBRACKET
Rule 105   dwhileconds -> expresion dwhileconds
Rule 106   dwhileconds -> expresion AND dwhileconds
Rule 107   dwhileconds -> expresion OR dwhileconds
Rule 108   dwhileconds -> empty
Rule 109   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 110   rn1 -> empty
Rule 111   metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON
Rule 112   metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON
Rule 113   metodos -> MODE OPAREN mmmfunc CPAREN SCOLON
Rule 114   metodos -> STDV OPAREN mmmfunc CPAREN SCOLON
Rule 115   metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
Rule 116   metodos -> DERL OPAREN expfunc CPAREN SCOLON
Rule 117   metodos -> DBERN OPAREN expfunc CPAREN SCOLON
Rule 118   metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON
Rule 119   metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
Rule 120   metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON
Rule 121   metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON
Rule 122   metodos -> REF OPAREN mmmfunc CPAREN SCOLON
Rule 123   metodos -> RREF OPAREN mmmfunc CPAREN SCOLON
Rule 124   metodos -> MONT OPAREN mmmfunc CPAREN SCOLON
Rule 125   expfunc -> ID COMMA ID COMMA ID
Rule 126   expfunc -> varcte COMMA varcte COMMA varcte
Rule 127   expfunc2 -> ID COMMA ID
Rule 128   expfunc2 -> varcte COMMA varcte
Rule 129   mmmfunc -> ID
Rule 130   mmmfunc -> OBRACKET mmmarray CBRACKET
Rule 131   mmmfunc -> OBRACKET mmmarray CBRACKET COMMA mmmfunc
Rule 132   mmmfunc -> empty
Rule 133   mmmarray -> varcte
Rule 134   mmmarray -> varcte COMMA mmmarray
Rule 135   mmmarray -> empty
Rule 136   empty -> <empty>

Terminals, with rules where they appear

AND                  : 106
BOOL                 : 32
CBRACKET             : 26 27 73 104 130 131
CHAR                 : 35
CHARACTER            : 
COLON                : 11 12 15
COMMA                : 10 13 22 60 77 77 78 78 78 81 82 82 115 125 125 126 126 127 128 131 134
COMMENT              : 
COUNT                : 77
COUNTIF              : 78
CPAREN               : 15 20 57 58 59 68 69 77 78 79 80 95 101 109 111 112 113 114 115 116 117 118 119 120 121 122 123 124
CTED                 : 
CTEI                 : 
DBERN                : 117
DERL                 : 116
DIFF                 : 
DIV                  : 94
DO                   : 101
DOUBLE               : 33
DPOI                 : 118
ELSE                 : 69
EQ                   : 
EQUALS               : 46 47 48 49 50 51 84 85
FUNC                 : 15
FX                   : 84
FY                   : 85
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 15 20 46 47 47 48 48 49 49 50 51 51 57 62 63 77 78 97 98 109 125 125 125 127 127 129
IF                   : 68 69
INT                  : 31
INTEGER              : 
INVERSE              : 120
KMEANS               : 115
LCOR                 : 52 53 54 55 81 82
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 
LUGSTAT              : 1
MEAN                 : 111
MEDIAN               : 112
MINUS                : 91
MODE                 : 113
MONT                 : 124
MULT                 : 93
NUMBER               : 100
NUMERIC              : 99
OBRACKET             : 26 27 73 104 130 131
OPAREN               : 15 20 57 58 59 68 69 77 78 79 80 95 101 109 111 112 113 114 115 116 117 118 119 120 121 122 123 124
OR                   : 107
PER                  : 
PLOT                 : 79 80
PLUS                 : 90
PRINT                : 57 58 59
QUOTE                : 
RCOR                 : 52 53 54 55 81 82
READ                 : 109
REF                  : 122
RELOP                : 88
ROTATE               : 121
RREF                 : 123
SCOLON               : 1 11 12 46 47 48 49 50 51 57 58 59 68 69 77 78 79 80 84 85 101 109 111 112 113 114 115 116 117 118 119 120 121 122 123 124
STDV                 : 114
STRING               : 34 59 64
TIPO                 : 
TRANSPOSE            : 119
VAR                  : 9
WHILE                : 101
error                : 

Nonterminals, with rules where they appear

addmain              : 1
asign                : 36
asign2               : 12 13 48 49 50 51 51 98
asign3               : 52 53
block                : 1
block2               : 26 27 29 104
cn1                  : 68 69
cn2                  : 68 69
cn3                  : 69
cond                 : 37 78
count                : 40
countif              : 41
dwhile               : 43
dwhileconds          : 101 105 106 107
empty                : 2 3 5 8 14 16 17 18 19 21 23 25 30 56 61 65 66 67 70 71 72 76 83 86 102 103 108 110 132 135
en1                  : 58
en2                  : 59
en3                  : 57
escrt                : 38
escrt2               : 57 62 64 64
escrt3               : 60
estatuto             : 28 29 74 75
exp                  : 84 85 87 88 90 91
expfunc              : 116 117
expfunc2             : 118
expresion            : 20 22 46 50 52 54 58 68 69 88 95 105 106 107
factor               : 92 93 94
fcn1                 : 20
funblock             : 15
funccall             : 45
funccall2            : 20 22
ifblock              : 68 69 69
ifblock2             : 73 75
lugstat              : 0
lugstat2             : 1 11
lugstat3             : 1 7
metodos              : 42
mmmarray             : 130 131 134
mmmfunc              : 111 112 113 114 115 119 120 121 122 123 124 131
mn1                  : 15
mn2                  : 15
mn3                  : 15
mn7                  : 15
mnv                  : 1
modules              : 6 7
modules2             : 15 15
plot                 : 39
plot2                : 80 82
readln               : 44
rn1                  : 109
savename             : 
termino              : 89 90 91 93 94
tipo                 : 11 12 15
varcte               : 53 55 77 77 78 78 81 81 82 82 96 115 126 126 126 128 128 133 134
vars                 : 4 24
vars1                : 9 10 13
wblock               : 101
wn1                  : 101
wn2                  : 101
xyfunc               : 79 84 85

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (136) empty -> .

    VAR             reduce using rule 136 (empty -> .)
    FUNC            reduce using rule 136 (empty -> .)
    OBRACKET        reduce using rule 136 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (136) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 136 (empty -> .)
    OBRACKET        reduce using rule 136 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (15) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (136) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 136 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID asign2 COLON tipo SCOLON
    (13) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (136) empty -> .

    OBRACKET        reduce using rule 136 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (15) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (136) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 136 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (15) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . asign2 COLON tipo SCOLON
    (13) vars1 -> ID . asign2 COMMA vars1
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 24

    asign2                         shift and go to state 23

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (27) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (15) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID asign2 COLON tipo SCOLON
    (13) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (31) tipo -> . INT
    (32) tipo -> . BOOL
    (33) tipo -> . DOUBLE
    (34) tipo -> . STRING
    (35) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID asign2 . COLON tipo SCOLON
    (13) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 35
    COMMA           shift and go to state 36


state 24

    (52) asign2 -> LCOR . expresion RCOR asign3
    (53) asign2 -> LCOR . varcte RCOR asign3
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (27) block -> OBRACKET . block2 CBRACKET
    (28) block2 -> . estatuto
    (29) block2 -> . estatuto block2
    (30) block2 -> . empty
    (36) estatuto -> . asign
    (37) estatuto -> . cond
    (38) estatuto -> . escrt
    (39) estatuto -> . plot
    (40) estatuto -> . count
    (41) estatuto -> . countif
    (42) estatuto -> . metodos
    (43) estatuto -> . dwhile
    (44) estatuto -> . readln
    (45) estatuto -> . funccall
    (136) empty -> .
    (46) asign -> . ID EQUALS expresion SCOLON
    (47) asign -> . ID EQUALS ID SCOLON
    (48) asign -> . ID EQUALS ID asign2 SCOLON
    (49) asign -> . ID asign2 EQUALS ID SCOLON
    (50) asign -> . ID asign2 EQUALS expresion SCOLON
    (51) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (57) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (80) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (77) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (78) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (111) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (115) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (116) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (117) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (118) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (119) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (101) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (109) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (20) funccall -> . ID fcn1 OPAREN expresion funccall2 CPAREN

    CBRACKET        reduce using rule 136 (empty -> .)
    ID              shift and go to state 59
    IF              shift and go to state 60
    PRINT           shift and go to state 61
    PLOT            shift and go to state 62
    COUNT           shift and go to state 63
    COUNTIF         shift and go to state 64
    MEAN            shift and go to state 65
    MEDIAN          shift and go to state 66
    MODE            shift and go to state 67
    STDV            shift and go to state 68
    KMEANS          shift and go to state 69
    DERL            shift and go to state 70
    DBERN           shift and go to state 71
    DPOI            shift and go to state 72
    TRANSPOSE       shift and go to state 73
    INVERSE         shift and go to state 74
    ROTATE          shift and go to state 75
    REF             shift and go to state 76
    RREF            shift and go to state 77
    MONT            shift and go to state 78
    DO              shift and go to state 79
    READ            shift and go to state 80

    block2                         shift and go to state 46
    estatuto                       shift and go to state 47
    empty                          shift and go to state 48
    asign                          shift and go to state 49
    cond                           shift and go to state 50
    escrt                          shift and go to state 51
    plot                           shift and go to state 52
    count                          shift and go to state 53
    countif                        shift and go to state 54
    metodos                        shift and go to state 55
    dwhile                         shift and go to state 56
    readln                         shift and go to state 57
    funccall                       shift and go to state 58

state 27

    (15) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (31) tipo -> . INT
    (32) tipo -> . BOOL
    (33) tipo -> . DOUBLE
    (34) tipo -> . STRING
    (35) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 81

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 82


state 30

    (31) tipo -> INT .

    SCOLON          reduce using rule 31 (tipo -> INT .)
    OPAREN          reduce using rule 31 (tipo -> INT .)


state 31

    (32) tipo -> BOOL .

    SCOLON          reduce using rule 32 (tipo -> BOOL .)
    OPAREN          reduce using rule 32 (tipo -> BOOL .)


state 32

    (33) tipo -> DOUBLE .

    SCOLON          reduce using rule 33 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 33 (tipo -> DOUBLE .)


state 33

    (34) tipo -> STRING .

    SCOLON          reduce using rule 34 (tipo -> STRING .)
    OPAREN          reduce using rule 34 (tipo -> STRING .)


state 34

    (35) tipo -> CHAR .

    SCOLON          reduce using rule 35 (tipo -> CHAR .)
    OPAREN          reduce using rule 35 (tipo -> CHAR .)


state 35

    (12) vars1 -> ID asign2 COLON . tipo SCOLON
    (31) tipo -> . INT
    (32) tipo -> . BOOL
    (33) tipo -> . DOUBLE
    (34) tipo -> . STRING
    (35) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 83

state 36

    (13) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID asign2 COLON tipo SCOLON
    (13) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 84

state 37

    (52) asign2 -> LCOR expresion . RCOR asign3
    (88) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 85
    RELOP           shift and go to state 86


state 38

    (53) asign2 -> LCOR varcte . RCOR asign3
    (96) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 87
    MULT            reduce using rule 96 (factor -> varcte .)
    DIV             reduce using rule 96 (factor -> varcte .)
    PLUS            reduce using rule 96 (factor -> varcte .)
    MINUS           reduce using rule 96 (factor -> varcte .)
    RELOP           reduce using rule 96 (factor -> varcte .)

  ! RCOR            [ reduce using rule 96 (factor -> varcte .) ]


state 39

    (87) expresion -> exp .

    RCOR            reduce using rule 87 (expresion -> exp .)
    RELOP           reduce using rule 87 (expresion -> exp .)
    CPAREN          reduce using rule 87 (expresion -> exp .)
    SCOLON          reduce using rule 87 (expresion -> exp .)
    COMMA           reduce using rule 87 (expresion -> exp .)
    AND             reduce using rule 87 (expresion -> exp .)
    OR              reduce using rule 87 (expresion -> exp .)
    OPAREN          reduce using rule 87 (expresion -> exp .)
    ID              reduce using rule 87 (expresion -> exp .)
    NUMERIC         reduce using rule 87 (expresion -> exp .)
    NUMBER          reduce using rule 87 (expresion -> exp .)


state 40

    (97) varcte -> ID .
    (98) varcte -> ID . asign2
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3

    RCOR            reduce using rule 97 (varcte -> ID .)
    MULT            reduce using rule 97 (varcte -> ID .)
    DIV             reduce using rule 97 (varcte -> ID .)
    PLUS            reduce using rule 97 (varcte -> ID .)
    MINUS           reduce using rule 97 (varcte -> ID .)
    RELOP           reduce using rule 97 (varcte -> ID .)
    CPAREN          reduce using rule 97 (varcte -> ID .)
    SCOLON          reduce using rule 97 (varcte -> ID .)
    COMMA           reduce using rule 97 (varcte -> ID .)
    AND             reduce using rule 97 (varcte -> ID .)
    OR              reduce using rule 97 (varcte -> ID .)
    OPAREN          reduce using rule 97 (varcte -> ID .)
    ID              reduce using rule 97 (varcte -> ID .)
    NUMERIC         reduce using rule 97 (varcte -> ID .)
    NUMBER          reduce using rule 97 (varcte -> ID .)
    CBRACKET        reduce using rule 97 (varcte -> ID .)
    LCOR            shift and go to state 24

    asign2                         shift and go to state 88

state 41

    (99) varcte -> NUMERIC .

    RCOR            reduce using rule 99 (varcte -> NUMERIC .)
    MULT            reduce using rule 99 (varcte -> NUMERIC .)
    DIV             reduce using rule 99 (varcte -> NUMERIC .)
    PLUS            reduce using rule 99 (varcte -> NUMERIC .)
    MINUS           reduce using rule 99 (varcte -> NUMERIC .)
    RELOP           reduce using rule 99 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 99 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 99 (varcte -> NUMERIC .)
    COMMA           reduce using rule 99 (varcte -> NUMERIC .)
    AND             reduce using rule 99 (varcte -> NUMERIC .)
    OR              reduce using rule 99 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 99 (varcte -> NUMERIC .)
    ID              reduce using rule 99 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 99 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 99 (varcte -> NUMERIC .)
    CBRACKET        reduce using rule 99 (varcte -> NUMERIC .)


state 42

    (100) varcte -> NUMBER .

    RCOR            reduce using rule 100 (varcte -> NUMBER .)
    MULT            reduce using rule 100 (varcte -> NUMBER .)
    DIV             reduce using rule 100 (varcte -> NUMBER .)
    PLUS            reduce using rule 100 (varcte -> NUMBER .)
    MINUS           reduce using rule 100 (varcte -> NUMBER .)
    RELOP           reduce using rule 100 (varcte -> NUMBER .)
    CPAREN          reduce using rule 100 (varcte -> NUMBER .)
    SCOLON          reduce using rule 100 (varcte -> NUMBER .)
    COMMA           reduce using rule 100 (varcte -> NUMBER .)
    AND             reduce using rule 100 (varcte -> NUMBER .)
    OR              reduce using rule 100 (varcte -> NUMBER .)
    OPAREN          reduce using rule 100 (varcte -> NUMBER .)
    ID              reduce using rule 100 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 100 (varcte -> NUMBER .)
    NUMBER          reduce using rule 100 (varcte -> NUMBER .)
    CBRACKET        reduce using rule 100 (varcte -> NUMBER .)


state 43

    (89) exp -> termino .
    (90) exp -> termino . PLUS exp
    (91) exp -> termino . MINUS exp

    RCOR            reduce using rule 89 (exp -> termino .)
    RELOP           reduce using rule 89 (exp -> termino .)
    CPAREN          reduce using rule 89 (exp -> termino .)
    SCOLON          reduce using rule 89 (exp -> termino .)
    COMMA           reduce using rule 89 (exp -> termino .)
    AND             reduce using rule 89 (exp -> termino .)
    OR              reduce using rule 89 (exp -> termino .)
    OPAREN          reduce using rule 89 (exp -> termino .)
    ID              reduce using rule 89 (exp -> termino .)
    NUMERIC         reduce using rule 89 (exp -> termino .)
    NUMBER          reduce using rule 89 (exp -> termino .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 44

    (92) termino -> factor .
    (93) termino -> factor . MULT termino
    (94) termino -> factor . DIV termino

    PLUS            reduce using rule 92 (termino -> factor .)
    MINUS           reduce using rule 92 (termino -> factor .)
    RCOR            reduce using rule 92 (termino -> factor .)
    RELOP           reduce using rule 92 (termino -> factor .)
    CPAREN          reduce using rule 92 (termino -> factor .)
    SCOLON          reduce using rule 92 (termino -> factor .)
    COMMA           reduce using rule 92 (termino -> factor .)
    AND             reduce using rule 92 (termino -> factor .)
    OR              reduce using rule 92 (termino -> factor .)
    OPAREN          reduce using rule 92 (termino -> factor .)
    ID              reduce using rule 92 (termino -> factor .)
    NUMERIC         reduce using rule 92 (termino -> factor .)
    NUMBER          reduce using rule 92 (termino -> factor .)
    MULT            shift and go to state 91
    DIV             shift and go to state 92


state 45

    (95) factor -> OPAREN . expresion CPAREN
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 93
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 46

    (27) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 95


state 47

    (28) block2 -> estatuto .
    (29) block2 -> estatuto . block2
    (28) block2 -> . estatuto
    (29) block2 -> . estatuto block2
    (30) block2 -> . empty
    (36) estatuto -> . asign
    (37) estatuto -> . cond
    (38) estatuto -> . escrt
    (39) estatuto -> . plot
    (40) estatuto -> . count
    (41) estatuto -> . countif
    (42) estatuto -> . metodos
    (43) estatuto -> . dwhile
    (44) estatuto -> . readln
    (45) estatuto -> . funccall
    (136) empty -> .
    (46) asign -> . ID EQUALS expresion SCOLON
    (47) asign -> . ID EQUALS ID SCOLON
    (48) asign -> . ID EQUALS ID asign2 SCOLON
    (49) asign -> . ID asign2 EQUALS ID SCOLON
    (50) asign -> . ID asign2 EQUALS expresion SCOLON
    (51) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (57) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (80) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (77) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (78) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (111) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (115) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (116) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (117) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (118) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (119) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (101) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (109) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (20) funccall -> . ID fcn1 OPAREN expresion funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 28 (block2 -> estatuto .)
    CBRACKET        reduce using rule 28 (block2 -> estatuto .)
    ID              shift and go to state 59
    IF              shift and go to state 60
    PRINT           shift and go to state 61
    PLOT            shift and go to state 62
    COUNT           shift and go to state 63
    COUNTIF         shift and go to state 64
    MEAN            shift and go to state 65
    MEDIAN          shift and go to state 66
    MODE            shift and go to state 67
    STDV            shift and go to state 68
    KMEANS          shift and go to state 69
    DERL            shift and go to state 70
    DBERN           shift and go to state 71
    DPOI            shift and go to state 72
    TRANSPOSE       shift and go to state 73
    INVERSE         shift and go to state 74
    ROTATE          shift and go to state 75
    REF             shift and go to state 76
    RREF            shift and go to state 77
    MONT            shift and go to state 78
    DO              shift and go to state 79
    READ            shift and go to state 80

  ! CBRACKET        [ reduce using rule 136 (empty -> .) ]

    estatuto                       shift and go to state 47
    block2                         shift and go to state 96
    empty                          shift and go to state 48
    asign                          shift and go to state 49
    cond                           shift and go to state 50
    escrt                          shift and go to state 51
    plot                           shift and go to state 52
    count                          shift and go to state 53
    countif                        shift and go to state 54
    metodos                        shift and go to state 55
    dwhile                         shift and go to state 56
    readln                         shift and go to state 57
    funccall                       shift and go to state 58

state 48

    (30) block2 -> empty .

    CBRACKET        reduce using rule 30 (block2 -> empty .)


state 49

    (36) estatuto -> asign .

    ID              reduce using rule 36 (estatuto -> asign .)
    IF              reduce using rule 36 (estatuto -> asign .)
    PRINT           reduce using rule 36 (estatuto -> asign .)
    PLOT            reduce using rule 36 (estatuto -> asign .)
    COUNT           reduce using rule 36 (estatuto -> asign .)
    COUNTIF         reduce using rule 36 (estatuto -> asign .)
    MEAN            reduce using rule 36 (estatuto -> asign .)
    MEDIAN          reduce using rule 36 (estatuto -> asign .)
    MODE            reduce using rule 36 (estatuto -> asign .)
    STDV            reduce using rule 36 (estatuto -> asign .)
    KMEANS          reduce using rule 36 (estatuto -> asign .)
    DERL            reduce using rule 36 (estatuto -> asign .)
    DBERN           reduce using rule 36 (estatuto -> asign .)
    DPOI            reduce using rule 36 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 36 (estatuto -> asign .)
    INVERSE         reduce using rule 36 (estatuto -> asign .)
    ROTATE          reduce using rule 36 (estatuto -> asign .)
    REF             reduce using rule 36 (estatuto -> asign .)
    RREF            reduce using rule 36 (estatuto -> asign .)
    MONT            reduce using rule 36 (estatuto -> asign .)
    DO              reduce using rule 36 (estatuto -> asign .)
    READ            reduce using rule 36 (estatuto -> asign .)
    CBRACKET        reduce using rule 36 (estatuto -> asign .)


state 50

    (37) estatuto -> cond .

    ID              reduce using rule 37 (estatuto -> cond .)
    IF              reduce using rule 37 (estatuto -> cond .)
    PRINT           reduce using rule 37 (estatuto -> cond .)
    PLOT            reduce using rule 37 (estatuto -> cond .)
    COUNT           reduce using rule 37 (estatuto -> cond .)
    COUNTIF         reduce using rule 37 (estatuto -> cond .)
    MEAN            reduce using rule 37 (estatuto -> cond .)
    MEDIAN          reduce using rule 37 (estatuto -> cond .)
    MODE            reduce using rule 37 (estatuto -> cond .)
    STDV            reduce using rule 37 (estatuto -> cond .)
    KMEANS          reduce using rule 37 (estatuto -> cond .)
    DERL            reduce using rule 37 (estatuto -> cond .)
    DBERN           reduce using rule 37 (estatuto -> cond .)
    DPOI            reduce using rule 37 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 37 (estatuto -> cond .)
    INVERSE         reduce using rule 37 (estatuto -> cond .)
    ROTATE          reduce using rule 37 (estatuto -> cond .)
    REF             reduce using rule 37 (estatuto -> cond .)
    RREF            reduce using rule 37 (estatuto -> cond .)
    MONT            reduce using rule 37 (estatuto -> cond .)
    DO              reduce using rule 37 (estatuto -> cond .)
    READ            reduce using rule 37 (estatuto -> cond .)
    CBRACKET        reduce using rule 37 (estatuto -> cond .)


state 51

    (38) estatuto -> escrt .

    ID              reduce using rule 38 (estatuto -> escrt .)
    IF              reduce using rule 38 (estatuto -> escrt .)
    PRINT           reduce using rule 38 (estatuto -> escrt .)
    PLOT            reduce using rule 38 (estatuto -> escrt .)
    COUNT           reduce using rule 38 (estatuto -> escrt .)
    COUNTIF         reduce using rule 38 (estatuto -> escrt .)
    MEAN            reduce using rule 38 (estatuto -> escrt .)
    MEDIAN          reduce using rule 38 (estatuto -> escrt .)
    MODE            reduce using rule 38 (estatuto -> escrt .)
    STDV            reduce using rule 38 (estatuto -> escrt .)
    KMEANS          reduce using rule 38 (estatuto -> escrt .)
    DERL            reduce using rule 38 (estatuto -> escrt .)
    DBERN           reduce using rule 38 (estatuto -> escrt .)
    DPOI            reduce using rule 38 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 38 (estatuto -> escrt .)
    INVERSE         reduce using rule 38 (estatuto -> escrt .)
    ROTATE          reduce using rule 38 (estatuto -> escrt .)
    REF             reduce using rule 38 (estatuto -> escrt .)
    RREF            reduce using rule 38 (estatuto -> escrt .)
    MONT            reduce using rule 38 (estatuto -> escrt .)
    DO              reduce using rule 38 (estatuto -> escrt .)
    READ            reduce using rule 38 (estatuto -> escrt .)
    CBRACKET        reduce using rule 38 (estatuto -> escrt .)


state 52

    (39) estatuto -> plot .

    ID              reduce using rule 39 (estatuto -> plot .)
    IF              reduce using rule 39 (estatuto -> plot .)
    PRINT           reduce using rule 39 (estatuto -> plot .)
    PLOT            reduce using rule 39 (estatuto -> plot .)
    COUNT           reduce using rule 39 (estatuto -> plot .)
    COUNTIF         reduce using rule 39 (estatuto -> plot .)
    MEAN            reduce using rule 39 (estatuto -> plot .)
    MEDIAN          reduce using rule 39 (estatuto -> plot .)
    MODE            reduce using rule 39 (estatuto -> plot .)
    STDV            reduce using rule 39 (estatuto -> plot .)
    KMEANS          reduce using rule 39 (estatuto -> plot .)
    DERL            reduce using rule 39 (estatuto -> plot .)
    DBERN           reduce using rule 39 (estatuto -> plot .)
    DPOI            reduce using rule 39 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 39 (estatuto -> plot .)
    INVERSE         reduce using rule 39 (estatuto -> plot .)
    ROTATE          reduce using rule 39 (estatuto -> plot .)
    REF             reduce using rule 39 (estatuto -> plot .)
    RREF            reduce using rule 39 (estatuto -> plot .)
    MONT            reduce using rule 39 (estatuto -> plot .)
    DO              reduce using rule 39 (estatuto -> plot .)
    READ            reduce using rule 39 (estatuto -> plot .)
    CBRACKET        reduce using rule 39 (estatuto -> plot .)


state 53

    (40) estatuto -> count .

    ID              reduce using rule 40 (estatuto -> count .)
    IF              reduce using rule 40 (estatuto -> count .)
    PRINT           reduce using rule 40 (estatuto -> count .)
    PLOT            reduce using rule 40 (estatuto -> count .)
    COUNT           reduce using rule 40 (estatuto -> count .)
    COUNTIF         reduce using rule 40 (estatuto -> count .)
    MEAN            reduce using rule 40 (estatuto -> count .)
    MEDIAN          reduce using rule 40 (estatuto -> count .)
    MODE            reduce using rule 40 (estatuto -> count .)
    STDV            reduce using rule 40 (estatuto -> count .)
    KMEANS          reduce using rule 40 (estatuto -> count .)
    DERL            reduce using rule 40 (estatuto -> count .)
    DBERN           reduce using rule 40 (estatuto -> count .)
    DPOI            reduce using rule 40 (estatuto -> count .)
    TRANSPOSE       reduce using rule 40 (estatuto -> count .)
    INVERSE         reduce using rule 40 (estatuto -> count .)
    ROTATE          reduce using rule 40 (estatuto -> count .)
    REF             reduce using rule 40 (estatuto -> count .)
    RREF            reduce using rule 40 (estatuto -> count .)
    MONT            reduce using rule 40 (estatuto -> count .)
    DO              reduce using rule 40 (estatuto -> count .)
    READ            reduce using rule 40 (estatuto -> count .)
    CBRACKET        reduce using rule 40 (estatuto -> count .)


state 54

    (41) estatuto -> countif .

    ID              reduce using rule 41 (estatuto -> countif .)
    IF              reduce using rule 41 (estatuto -> countif .)
    PRINT           reduce using rule 41 (estatuto -> countif .)
    PLOT            reduce using rule 41 (estatuto -> countif .)
    COUNT           reduce using rule 41 (estatuto -> countif .)
    COUNTIF         reduce using rule 41 (estatuto -> countif .)
    MEAN            reduce using rule 41 (estatuto -> countif .)
    MEDIAN          reduce using rule 41 (estatuto -> countif .)
    MODE            reduce using rule 41 (estatuto -> countif .)
    STDV            reduce using rule 41 (estatuto -> countif .)
    KMEANS          reduce using rule 41 (estatuto -> countif .)
    DERL            reduce using rule 41 (estatuto -> countif .)
    DBERN           reduce using rule 41 (estatuto -> countif .)
    DPOI            reduce using rule 41 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 41 (estatuto -> countif .)
    INVERSE         reduce using rule 41 (estatuto -> countif .)
    ROTATE          reduce using rule 41 (estatuto -> countif .)
    REF             reduce using rule 41 (estatuto -> countif .)
    RREF            reduce using rule 41 (estatuto -> countif .)
    MONT            reduce using rule 41 (estatuto -> countif .)
    DO              reduce using rule 41 (estatuto -> countif .)
    READ            reduce using rule 41 (estatuto -> countif .)
    CBRACKET        reduce using rule 41 (estatuto -> countif .)


state 55

    (42) estatuto -> metodos .

    ID              reduce using rule 42 (estatuto -> metodos .)
    IF              reduce using rule 42 (estatuto -> metodos .)
    PRINT           reduce using rule 42 (estatuto -> metodos .)
    PLOT            reduce using rule 42 (estatuto -> metodos .)
    COUNT           reduce using rule 42 (estatuto -> metodos .)
    COUNTIF         reduce using rule 42 (estatuto -> metodos .)
    MEAN            reduce using rule 42 (estatuto -> metodos .)
    MEDIAN          reduce using rule 42 (estatuto -> metodos .)
    MODE            reduce using rule 42 (estatuto -> metodos .)
    STDV            reduce using rule 42 (estatuto -> metodos .)
    KMEANS          reduce using rule 42 (estatuto -> metodos .)
    DERL            reduce using rule 42 (estatuto -> metodos .)
    DBERN           reduce using rule 42 (estatuto -> metodos .)
    DPOI            reduce using rule 42 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 42 (estatuto -> metodos .)
    INVERSE         reduce using rule 42 (estatuto -> metodos .)
    ROTATE          reduce using rule 42 (estatuto -> metodos .)
    REF             reduce using rule 42 (estatuto -> metodos .)
    RREF            reduce using rule 42 (estatuto -> metodos .)
    MONT            reduce using rule 42 (estatuto -> metodos .)
    DO              reduce using rule 42 (estatuto -> metodos .)
    READ            reduce using rule 42 (estatuto -> metodos .)
    CBRACKET        reduce using rule 42 (estatuto -> metodos .)


state 56

    (43) estatuto -> dwhile .

    ID              reduce using rule 43 (estatuto -> dwhile .)
    IF              reduce using rule 43 (estatuto -> dwhile .)
    PRINT           reduce using rule 43 (estatuto -> dwhile .)
    PLOT            reduce using rule 43 (estatuto -> dwhile .)
    COUNT           reduce using rule 43 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 43 (estatuto -> dwhile .)
    MEAN            reduce using rule 43 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 43 (estatuto -> dwhile .)
    MODE            reduce using rule 43 (estatuto -> dwhile .)
    STDV            reduce using rule 43 (estatuto -> dwhile .)
    KMEANS          reduce using rule 43 (estatuto -> dwhile .)
    DERL            reduce using rule 43 (estatuto -> dwhile .)
    DBERN           reduce using rule 43 (estatuto -> dwhile .)
    DPOI            reduce using rule 43 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 43 (estatuto -> dwhile .)
    INVERSE         reduce using rule 43 (estatuto -> dwhile .)
    ROTATE          reduce using rule 43 (estatuto -> dwhile .)
    REF             reduce using rule 43 (estatuto -> dwhile .)
    RREF            reduce using rule 43 (estatuto -> dwhile .)
    MONT            reduce using rule 43 (estatuto -> dwhile .)
    DO              reduce using rule 43 (estatuto -> dwhile .)
    READ            reduce using rule 43 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 43 (estatuto -> dwhile .)


state 57

    (44) estatuto -> readln .

    ID              reduce using rule 44 (estatuto -> readln .)
    IF              reduce using rule 44 (estatuto -> readln .)
    PRINT           reduce using rule 44 (estatuto -> readln .)
    PLOT            reduce using rule 44 (estatuto -> readln .)
    COUNT           reduce using rule 44 (estatuto -> readln .)
    COUNTIF         reduce using rule 44 (estatuto -> readln .)
    MEAN            reduce using rule 44 (estatuto -> readln .)
    MEDIAN          reduce using rule 44 (estatuto -> readln .)
    MODE            reduce using rule 44 (estatuto -> readln .)
    STDV            reduce using rule 44 (estatuto -> readln .)
    KMEANS          reduce using rule 44 (estatuto -> readln .)
    DERL            reduce using rule 44 (estatuto -> readln .)
    DBERN           reduce using rule 44 (estatuto -> readln .)
    DPOI            reduce using rule 44 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 44 (estatuto -> readln .)
    INVERSE         reduce using rule 44 (estatuto -> readln .)
    ROTATE          reduce using rule 44 (estatuto -> readln .)
    REF             reduce using rule 44 (estatuto -> readln .)
    RREF            reduce using rule 44 (estatuto -> readln .)
    MONT            reduce using rule 44 (estatuto -> readln .)
    DO              reduce using rule 44 (estatuto -> readln .)
    READ            reduce using rule 44 (estatuto -> readln .)
    CBRACKET        reduce using rule 44 (estatuto -> readln .)


state 58

    (45) estatuto -> funccall .

    ID              reduce using rule 45 (estatuto -> funccall .)
    IF              reduce using rule 45 (estatuto -> funccall .)
    PRINT           reduce using rule 45 (estatuto -> funccall .)
    PLOT            reduce using rule 45 (estatuto -> funccall .)
    COUNT           reduce using rule 45 (estatuto -> funccall .)
    COUNTIF         reduce using rule 45 (estatuto -> funccall .)
    MEAN            reduce using rule 45 (estatuto -> funccall .)
    MEDIAN          reduce using rule 45 (estatuto -> funccall .)
    MODE            reduce using rule 45 (estatuto -> funccall .)
    STDV            reduce using rule 45 (estatuto -> funccall .)
    KMEANS          reduce using rule 45 (estatuto -> funccall .)
    DERL            reduce using rule 45 (estatuto -> funccall .)
    DBERN           reduce using rule 45 (estatuto -> funccall .)
    DPOI            reduce using rule 45 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 45 (estatuto -> funccall .)
    INVERSE         reduce using rule 45 (estatuto -> funccall .)
    ROTATE          reduce using rule 45 (estatuto -> funccall .)
    REF             reduce using rule 45 (estatuto -> funccall .)
    RREF            reduce using rule 45 (estatuto -> funccall .)
    MONT            reduce using rule 45 (estatuto -> funccall .)
    DO              reduce using rule 45 (estatuto -> funccall .)
    READ            reduce using rule 45 (estatuto -> funccall .)
    CBRACKET        reduce using rule 45 (estatuto -> funccall .)


state 59

    (46) asign -> ID . EQUALS expresion SCOLON
    (47) asign -> ID . EQUALS ID SCOLON
    (48) asign -> ID . EQUALS ID asign2 SCOLON
    (49) asign -> ID . asign2 EQUALS ID SCOLON
    (50) asign -> ID . asign2 EQUALS expresion SCOLON
    (51) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (20) funccall -> ID . fcn1 OPAREN expresion funccall2 CPAREN
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3
    (21) fcn1 -> . empty
    (136) empty -> .

    EQUALS          shift and go to state 97
    LCOR            shift and go to state 24
    OPAREN          reduce using rule 136 (empty -> .)

    asign2                         shift and go to state 98
    fcn1                           shift and go to state 99
    empty                          shift and go to state 100

state 60

    (68) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 101


state 61

    (57) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON

    OPAREN          shift and go to state 102


state 62

    (79) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (80) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 103


state 63

    (77) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 104


state 64

    (78) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 105


state 65

    (111) metodos -> MEAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 106


state 66

    (112) metodos -> MEDIAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 107


state 67

    (113) metodos -> MODE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 108


state 68

    (114) metodos -> STDV . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 109


state 69

    (115) metodos -> KMEANS . OPAREN varcte COMMA mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 110


state 70

    (116) metodos -> DERL . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 111


state 71

    (117) metodos -> DBERN . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 112


state 72

    (118) metodos -> DPOI . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 113


state 73

    (119) metodos -> TRANSPOSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 114


state 74

    (120) metodos -> INVERSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 115


state 75

    (121) metodos -> ROTATE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 116


state 76

    (122) metodos -> REF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 117


state 77

    (123) metodos -> RREF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 118


state 78

    (124) metodos -> MONT . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 119


state 79

    (101) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (102) wn1 -> . empty
    (136) empty -> .

    OBRACKET        reduce using rule 136 (empty -> .)

    wn1                            shift and go to state 120
    empty                          shift and go to state 121

state 80

    (109) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 122


state 81

    (15) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (16) mn1 -> . empty
    (136) empty -> .

    OPAREN          reduce using rule 136 (empty -> .)

    mn1                            shift and go to state 123
    empty                          shift and go to state 124

state 82

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (136) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 136 (empty -> .)
    OBRACKET        reduce using rule 136 (empty -> .)
    CPAREN          reduce using rule 136 (empty -> .)

    lugstat2                       shift and go to state 125
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 83

    (12) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 126


state 84

    (13) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 13 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 13 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 13 (vars1 -> ID asign2 COMMA vars1 .)


state 85

    (52) asign2 -> LCOR expresion RCOR . asign3
    (54) asign3 -> . LCOR expresion RCOR
    (55) asign3 -> . LCOR varcte RCOR
    (56) asign3 -> . empty
    (136) empty -> .

    LCOR            shift and go to state 127
    COLON           reduce using rule 136 (empty -> .)
    COMMA           reduce using rule 136 (empty -> .)
    RCOR            reduce using rule 136 (empty -> .)
    MULT            reduce using rule 136 (empty -> .)
    DIV             reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    RELOP           reduce using rule 136 (empty -> .)
    CPAREN          reduce using rule 136 (empty -> .)
    SCOLON          reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    OPAREN          reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    NUMERIC         reduce using rule 136 (empty -> .)
    NUMBER          reduce using rule 136 (empty -> .)
    CBRACKET        reduce using rule 136 (empty -> .)
    EQUALS          reduce using rule 136 (empty -> .)

    asign3                         shift and go to state 128
    empty                          shift and go to state 129

state 86

    (88) expresion -> expresion RELOP . exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    exp                            shift and go to state 130
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 87

    (53) asign2 -> LCOR varcte RCOR . asign3
    (54) asign3 -> . LCOR expresion RCOR
    (55) asign3 -> . LCOR varcte RCOR
    (56) asign3 -> . empty
    (136) empty -> .

    LCOR            shift and go to state 127
    COLON           reduce using rule 136 (empty -> .)
    COMMA           reduce using rule 136 (empty -> .)
    RCOR            reduce using rule 136 (empty -> .)
    MULT            reduce using rule 136 (empty -> .)
    DIV             reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    RELOP           reduce using rule 136 (empty -> .)
    CPAREN          reduce using rule 136 (empty -> .)
    SCOLON          reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    OPAREN          reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    NUMERIC         reduce using rule 136 (empty -> .)
    NUMBER          reduce using rule 136 (empty -> .)
    CBRACKET        reduce using rule 136 (empty -> .)
    EQUALS          reduce using rule 136 (empty -> .)

    asign3                         shift and go to state 131
    empty                          shift and go to state 129

state 88

    (98) varcte -> ID asign2 .

    RCOR            reduce using rule 98 (varcte -> ID asign2 .)
    MULT            reduce using rule 98 (varcte -> ID asign2 .)
    DIV             reduce using rule 98 (varcte -> ID asign2 .)
    PLUS            reduce using rule 98 (varcte -> ID asign2 .)
    MINUS           reduce using rule 98 (varcte -> ID asign2 .)
    RELOP           reduce using rule 98 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 98 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 98 (varcte -> ID asign2 .)
    COMMA           reduce using rule 98 (varcte -> ID asign2 .)
    AND             reduce using rule 98 (varcte -> ID asign2 .)
    OR              reduce using rule 98 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 98 (varcte -> ID asign2 .)
    ID              reduce using rule 98 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 98 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 98 (varcte -> ID asign2 .)
    CBRACKET        reduce using rule 98 (varcte -> ID asign2 .)


state 89

    (90) exp -> termino PLUS . exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    termino                        shift and go to state 43
    exp                            shift and go to state 132
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 90

    (91) exp -> termino MINUS . exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    termino                        shift and go to state 43
    exp                            shift and go to state 133
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 91

    (93) termino -> factor MULT . termino
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    factor                         shift and go to state 44
    termino                        shift and go to state 134
    varcte                         shift and go to state 94

state 92

    (94) termino -> factor DIV . termino
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    factor                         shift and go to state 44
    termino                        shift and go to state 135
    varcte                         shift and go to state 94

state 93

    (95) factor -> OPAREN expresion . CPAREN
    (88) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 136
    RELOP           shift and go to state 86


state 94

    (96) factor -> varcte .

    MULT            reduce using rule 96 (factor -> varcte .)
    DIV             reduce using rule 96 (factor -> varcte .)
    PLUS            reduce using rule 96 (factor -> varcte .)
    MINUS           reduce using rule 96 (factor -> varcte .)
    CPAREN          reduce using rule 96 (factor -> varcte .)
    RELOP           reduce using rule 96 (factor -> varcte .)
    RCOR            reduce using rule 96 (factor -> varcte .)
    SCOLON          reduce using rule 96 (factor -> varcte .)
    COMMA           reduce using rule 96 (factor -> varcte .)
    AND             reduce using rule 96 (factor -> varcte .)
    OR              reduce using rule 96 (factor -> varcte .)
    OPAREN          reduce using rule 96 (factor -> varcte .)
    ID              reduce using rule 96 (factor -> varcte .)
    NUMERIC         reduce using rule 96 (factor -> varcte .)
    NUMBER          reduce using rule 96 (factor -> varcte .)


state 95

    (27) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 27 (block -> OBRACKET block2 CBRACKET .)


state 96

    (29) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 29 (block2 -> estatuto block2 .)


state 97

    (46) asign -> ID EQUALS . expresion SCOLON
    (47) asign -> ID EQUALS . ID SCOLON
    (48) asign -> ID EQUALS . ID asign2 SCOLON
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 137
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 138
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 98

    (49) asign -> ID asign2 . EQUALS ID SCOLON
    (50) asign -> ID asign2 . EQUALS expresion SCOLON
    (51) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 139


state 99

    (20) funccall -> ID fcn1 . OPAREN expresion funccall2 CPAREN

    OPAREN          shift and go to state 140


state 100

    (21) fcn1 -> empty .

    OPAREN          reduce using rule 21 (fcn1 -> empty .)


state 101

    (68) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 141
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 102

    (57) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (59) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 142
    STRING          shift and go to state 144
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 143
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 103

    (79) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (80) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (84) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (85) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (86) xyfunc -> . empty
    (81) plot2 -> . LCOR varcte COMMA varcte RCOR
    (82) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (83) plot2 -> . empty
    (136) empty -> .

    FX              shift and go to state 147
    FY              shift and go to state 148
    LCOR            shift and go to state 150
    CPAREN          reduce using rule 136 (empty -> .)

    xyfunc                         shift and go to state 145
    plot2                          shift and go to state 146
    empty                          shift and go to state 149

state 104

    (77) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 151


state 105

    (78) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 152


state 106

    (111) metodos -> MEAN OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 153
    empty                          shift and go to state 156

state 107

    (112) metodos -> MEDIAN OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 157
    empty                          shift and go to state 156

state 108

    (113) metodos -> MODE OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 158
    empty                          shift and go to state 156

state 109

    (114) metodos -> STDV OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 159
    empty                          shift and go to state 156

state 110

    (115) metodos -> KMEANS OPAREN . varcte COMMA mmmfunc CPAREN SCOLON
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 160

state 111

    (116) metodos -> DERL OPAREN . expfunc CPAREN SCOLON
    (125) expfunc -> . ID COMMA ID COMMA ID
    (126) expfunc -> . varcte COMMA varcte COMMA varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 162
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expfunc                        shift and go to state 161
    varcte                         shift and go to state 163

state 112

    (117) metodos -> DBERN OPAREN . expfunc CPAREN SCOLON
    (125) expfunc -> . ID COMMA ID COMMA ID
    (126) expfunc -> . varcte COMMA varcte COMMA varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 162
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expfunc                        shift and go to state 164
    varcte                         shift and go to state 163

state 113

    (118) metodos -> DPOI OPAREN . expfunc2 CPAREN SCOLON
    (127) expfunc2 -> . ID COMMA ID
    (128) expfunc2 -> . varcte COMMA varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 166
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expfunc2                       shift and go to state 165
    varcte                         shift and go to state 167

state 114

    (119) metodos -> TRANSPOSE OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 168
    empty                          shift and go to state 156

state 115

    (120) metodos -> INVERSE OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 169
    empty                          shift and go to state 156

state 116

    (121) metodos -> ROTATE OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 170
    empty                          shift and go to state 156

state 117

    (122) metodos -> REF OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 171
    empty                          shift and go to state 156

state 118

    (123) metodos -> RREF OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 172
    empty                          shift and go to state 156

state 119

    (124) metodos -> MONT OPAREN . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 173
    empty                          shift and go to state 156

state 120

    (101) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (104) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 175

    wblock                         shift and go to state 174

state 121

    (102) wn1 -> empty .

    OBRACKET        reduce using rule 102 (wn1 -> empty .)


state 122

    (109) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 176


state 123

    (15) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 177


state 124

    (16) mn1 -> empty .

    OPAREN          reduce using rule 16 (mn1 -> empty .)


state 125

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 126

    (12) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 12 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 12 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 12 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 127

    (54) asign3 -> LCOR . expresion RCOR
    (55) asign3 -> LCOR . varcte RCOR
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 178
    varcte                         shift and go to state 179
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 128

    (52) asign2 -> LCOR expresion RCOR asign3 .

    COLON           reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    COMMA           reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    RCOR            reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    MULT            reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    DIV             reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    PLUS            reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    MINUS           reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    RELOP           reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    CPAREN          reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    SCOLON          reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    AND             reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    OR              reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    OPAREN          reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    ID              reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMERIC         reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMBER          reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    CBRACKET        reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)
    EQUALS          reduce using rule 52 (asign2 -> LCOR expresion RCOR asign3 .)


state 129

    (56) asign3 -> empty .

    COLON           reduce using rule 56 (asign3 -> empty .)
    COMMA           reduce using rule 56 (asign3 -> empty .)
    RCOR            reduce using rule 56 (asign3 -> empty .)
    MULT            reduce using rule 56 (asign3 -> empty .)
    DIV             reduce using rule 56 (asign3 -> empty .)
    PLUS            reduce using rule 56 (asign3 -> empty .)
    MINUS           reduce using rule 56 (asign3 -> empty .)
    RELOP           reduce using rule 56 (asign3 -> empty .)
    CPAREN          reduce using rule 56 (asign3 -> empty .)
    SCOLON          reduce using rule 56 (asign3 -> empty .)
    AND             reduce using rule 56 (asign3 -> empty .)
    OR              reduce using rule 56 (asign3 -> empty .)
    OPAREN          reduce using rule 56 (asign3 -> empty .)
    ID              reduce using rule 56 (asign3 -> empty .)
    NUMERIC         reduce using rule 56 (asign3 -> empty .)
    NUMBER          reduce using rule 56 (asign3 -> empty .)
    CBRACKET        reduce using rule 56 (asign3 -> empty .)
    EQUALS          reduce using rule 56 (asign3 -> empty .)


state 130

    (88) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 88 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 88 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 88 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 88 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 88 (expresion -> expresion RELOP exp .)
    AND             reduce using rule 88 (expresion -> expresion RELOP exp .)
    OR              reduce using rule 88 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 88 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 88 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 88 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 88 (expresion -> expresion RELOP exp .)


state 131

    (53) asign2 -> LCOR varcte RCOR asign3 .

    COLON           reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    COMMA           reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    RCOR            reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    MULT            reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    DIV             reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    PLUS            reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    MINUS           reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    RELOP           reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    CPAREN          reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    SCOLON          reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    AND             reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    OR              reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    OPAREN          reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    ID              reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMERIC         reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMBER          reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    CBRACKET        reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)
    EQUALS          reduce using rule 53 (asign2 -> LCOR varcte RCOR asign3 .)


state 132

    (90) exp -> termino PLUS exp .

    RCOR            reduce using rule 90 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 90 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 90 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 90 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 90 (exp -> termino PLUS exp .)
    AND             reduce using rule 90 (exp -> termino PLUS exp .)
    OR              reduce using rule 90 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 90 (exp -> termino PLUS exp .)
    ID              reduce using rule 90 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 90 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 90 (exp -> termino PLUS exp .)


state 133

    (91) exp -> termino MINUS exp .

    RCOR            reduce using rule 91 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 91 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 91 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 91 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 91 (exp -> termino MINUS exp .)
    AND             reduce using rule 91 (exp -> termino MINUS exp .)
    OR              reduce using rule 91 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 91 (exp -> termino MINUS exp .)
    ID              reduce using rule 91 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 91 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 91 (exp -> termino MINUS exp .)


state 134

    (93) termino -> factor MULT termino .

    PLUS            reduce using rule 93 (termino -> factor MULT termino .)
    MINUS           reduce using rule 93 (termino -> factor MULT termino .)
    RCOR            reduce using rule 93 (termino -> factor MULT termino .)
    RELOP           reduce using rule 93 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 93 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 93 (termino -> factor MULT termino .)
    COMMA           reduce using rule 93 (termino -> factor MULT termino .)
    AND             reduce using rule 93 (termino -> factor MULT termino .)
    OR              reduce using rule 93 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 93 (termino -> factor MULT termino .)
    ID              reduce using rule 93 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 93 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 93 (termino -> factor MULT termino .)


state 135

    (94) termino -> factor DIV termino .

    PLUS            reduce using rule 94 (termino -> factor DIV termino .)
    MINUS           reduce using rule 94 (termino -> factor DIV termino .)
    RCOR            reduce using rule 94 (termino -> factor DIV termino .)
    RELOP           reduce using rule 94 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 94 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 94 (termino -> factor DIV termino .)
    COMMA           reduce using rule 94 (termino -> factor DIV termino .)
    AND             reduce using rule 94 (termino -> factor DIV termino .)
    OR              reduce using rule 94 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 94 (termino -> factor DIV termino .)
    ID              reduce using rule 94 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 94 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 94 (termino -> factor DIV termino .)


state 136

    (95) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    AND             reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    OR              reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 95 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 95 (factor -> OPAREN expresion CPAREN .)


state 137

    (47) asign -> ID EQUALS ID . SCOLON
    (48) asign -> ID EQUALS ID . asign2 SCOLON
    (97) varcte -> ID .
    (98) varcte -> ID . asign2
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 180
    MULT            reduce using rule 97 (varcte -> ID .)
    DIV             reduce using rule 97 (varcte -> ID .)
    PLUS            reduce using rule 97 (varcte -> ID .)
    MINUS           reduce using rule 97 (varcte -> ID .)
    RELOP           reduce using rule 97 (varcte -> ID .)
    LCOR            shift and go to state 24

  ! SCOLON          [ reduce using rule 97 (varcte -> ID .) ]

    asign2                         shift and go to state 181

state 138

    (46) asign -> ID EQUALS expresion . SCOLON
    (88) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 182
    RELOP           shift and go to state 86


state 139

    (49) asign -> ID asign2 EQUALS . ID SCOLON
    (50) asign -> ID asign2 EQUALS . expresion SCOLON
    (51) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 183
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 184
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 140

    (20) funccall -> ID fcn1 OPAREN . expresion funccall2 CPAREN
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 185
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 141

    (68) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (88) expresion -> expresion . RELOP exp
    (70) cn1 -> . empty
    (136) empty -> .

    RELOP           shift and go to state 86
    CPAREN          reduce using rule 136 (empty -> .)

    cn1                            shift and go to state 186
    empty                          shift and go to state 187

state 142

    (57) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (97) varcte -> ID .
    (98) varcte -> ID . asign2
    (67) en3 -> . empty
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3
    (136) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 97 (varcte -> ID .)
    MULT            reduce using rule 97 (varcte -> ID .)
    DIV             reduce using rule 97 (varcte -> ID .)
    PLUS            reduce using rule 97 (varcte -> ID .)
    MINUS           reduce using rule 97 (varcte -> ID .)
    RELOP           reduce using rule 97 (varcte -> ID .)
    CPAREN          reduce using rule 97 (varcte -> ID .)
    LCOR            shift and go to state 24
    COMMA           reduce using rule 136 (empty -> .)

  ! CPAREN          [ reduce using rule 136 (empty -> .) ]

    en3                            shift and go to state 188
    asign2                         shift and go to state 88
    empty                          shift and go to state 189

state 143

    (58) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (88) expresion -> expresion . RELOP exp
    (65) en1 -> . empty
    (136) empty -> .

    RELOP           shift and go to state 86
    CPAREN          reduce using rule 136 (empty -> .)

    en1                            shift and go to state 190
    empty                          shift and go to state 191

state 144

    (59) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON

    CPAREN          shift and go to state 192


state 145

    (79) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 193


state 146

    (80) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 194


state 147

    (84) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 195


state 148

    (85) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 196


state 149

    (86) xyfunc -> empty .
    (83) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 83 (plot2 -> empty .)
    CPAREN          reduce using rule 83 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 86 (xyfunc -> empty .) ]


state 150

    (81) plot2 -> LCOR . varcte COMMA varcte RCOR
    (82) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 197

state 151

    (77) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 198


state 152

    (78) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 199


state 153

    (111) metodos -> MEAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 200


state 154

    (129) mmmfunc -> ID .

    CPAREN          reduce using rule 129 (mmmfunc -> ID .)


state 155

    (130) mmmfunc -> OBRACKET . mmmarray CBRACKET
    (131) mmmfunc -> OBRACKET . mmmarray CBRACKET COMMA mmmfunc
    (133) mmmarray -> . varcte
    (134) mmmarray -> . varcte COMMA mmmarray
    (135) mmmarray -> . empty
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER
    (136) empty -> .

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42
    CBRACKET        reduce using rule 136 (empty -> .)

    mmmarray                       shift and go to state 201
    varcte                         shift and go to state 202
    empty                          shift and go to state 203

state 156

    (132) mmmfunc -> empty .

    CPAREN          reduce using rule 132 (mmmfunc -> empty .)


state 157

    (112) metodos -> MEDIAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 204


state 158

    (113) metodos -> MODE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 205


state 159

    (114) metodos -> STDV OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 206


state 160

    (115) metodos -> KMEANS OPAREN varcte . COMMA mmmfunc CPAREN SCOLON

    COMMA           shift and go to state 207


state 161

    (116) metodos -> DERL OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 208


state 162

    (125) expfunc -> ID . COMMA ID COMMA ID
    (97) varcte -> ID .
    (98) varcte -> ID . asign2
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 209
    LCOR            shift and go to state 24

  ! COMMA           [ reduce using rule 97 (varcte -> ID .) ]

    asign2                         shift and go to state 88

state 163

    (126) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 210


state 164

    (117) metodos -> DBERN OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 211


state 165

    (118) metodos -> DPOI OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 212


state 166

    (127) expfunc2 -> ID . COMMA ID
    (97) varcte -> ID .
    (98) varcte -> ID . asign2
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 213
    LCOR            shift and go to state 24

  ! COMMA           [ reduce using rule 97 (varcte -> ID .) ]

    asign2                         shift and go to state 88

state 167

    (128) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 214


state 168

    (119) metodos -> TRANSPOSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 215


state 169

    (120) metodos -> INVERSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 216


state 170

    (121) metodos -> ROTATE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 217


state 171

    (122) metodos -> REF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 218


state 172

    (123) metodos -> RREF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 219


state 173

    (124) metodos -> MONT OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 220


state 174

    (101) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 221


state 175

    (104) wblock -> OBRACKET . block2 CBRACKET
    (28) block2 -> . estatuto
    (29) block2 -> . estatuto block2
    (30) block2 -> . empty
    (36) estatuto -> . asign
    (37) estatuto -> . cond
    (38) estatuto -> . escrt
    (39) estatuto -> . plot
    (40) estatuto -> . count
    (41) estatuto -> . countif
    (42) estatuto -> . metodos
    (43) estatuto -> . dwhile
    (44) estatuto -> . readln
    (45) estatuto -> . funccall
    (136) empty -> .
    (46) asign -> . ID EQUALS expresion SCOLON
    (47) asign -> . ID EQUALS ID SCOLON
    (48) asign -> . ID EQUALS ID asign2 SCOLON
    (49) asign -> . ID asign2 EQUALS ID SCOLON
    (50) asign -> . ID asign2 EQUALS expresion SCOLON
    (51) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (57) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (80) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (77) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (78) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (111) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (115) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (116) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (117) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (118) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (119) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (101) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (109) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (20) funccall -> . ID fcn1 OPAREN expresion funccall2 CPAREN

    CBRACKET        reduce using rule 136 (empty -> .)
    ID              shift and go to state 59
    IF              shift and go to state 60
    PRINT           shift and go to state 61
    PLOT            shift and go to state 62
    COUNT           shift and go to state 63
    COUNTIF         shift and go to state 64
    MEAN            shift and go to state 65
    MEDIAN          shift and go to state 66
    MODE            shift and go to state 67
    STDV            shift and go to state 68
    KMEANS          shift and go to state 69
    DERL            shift and go to state 70
    DBERN           shift and go to state 71
    DPOI            shift and go to state 72
    TRANSPOSE       shift and go to state 73
    INVERSE         shift and go to state 74
    ROTATE          shift and go to state 75
    REF             shift and go to state 76
    RREF            shift and go to state 77
    MONT            shift and go to state 78
    DO              shift and go to state 79
    READ            shift and go to state 80

    block2                         shift and go to state 222
    estatuto                       shift and go to state 47
    empty                          shift and go to state 48
    asign                          shift and go to state 49
    cond                           shift and go to state 50
    escrt                          shift and go to state 51
    plot                           shift and go to state 52
    count                          shift and go to state 53
    countif                        shift and go to state 54
    metodos                        shift and go to state 55
    dwhile                         shift and go to state 56
    readln                         shift and go to state 57
    funccall                       shift and go to state 58

state 176

    (109) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (110) rn1 -> . empty
    (136) empty -> .

    CPAREN          reduce using rule 136 (empty -> .)

    rn1                            shift and go to state 223
    empty                          shift and go to state 224

state 177

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (24) modules2 -> . vars
    (25) modules2 -> . empty
    (9) vars -> . VAR vars1
    (136) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 136 (empty -> .)

    modules2                       shift and go to state 225
    vars                           shift and go to state 226
    empty                          shift and go to state 227

state 178

    (54) asign3 -> LCOR expresion . RCOR
    (88) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 228
    RELOP           shift and go to state 86


state 179

    (55) asign3 -> LCOR varcte . RCOR
    (96) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 229
    MULT            reduce using rule 96 (factor -> varcte .)
    DIV             reduce using rule 96 (factor -> varcte .)
    PLUS            reduce using rule 96 (factor -> varcte .)
    MINUS           reduce using rule 96 (factor -> varcte .)
    RELOP           reduce using rule 96 (factor -> varcte .)

  ! RCOR            [ reduce using rule 96 (factor -> varcte .) ]


state 180

    (47) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    MONT            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 47 (asign -> ID EQUALS ID SCOLON .)


state 181

    (48) asign -> ID EQUALS ID asign2 . SCOLON
    (98) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 230
    MULT            reduce using rule 98 (varcte -> ID asign2 .)
    DIV             reduce using rule 98 (varcte -> ID asign2 .)
    PLUS            reduce using rule 98 (varcte -> ID asign2 .)
    MINUS           reduce using rule 98 (varcte -> ID asign2 .)
    RELOP           reduce using rule 98 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 98 (varcte -> ID asign2 .) ]


state 182

    (46) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    MONT            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 46 (asign -> ID EQUALS expresion SCOLON .)


state 183

    (49) asign -> ID asign2 EQUALS ID . SCOLON
    (51) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (97) varcte -> ID .
    (98) varcte -> ID . asign2
    (52) asign2 -> . LCOR expresion RCOR asign3
    (53) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 232
    MULT            reduce using rule 97 (varcte -> ID .)
    DIV             reduce using rule 97 (varcte -> ID .)
    PLUS            reduce using rule 97 (varcte -> ID .)
    MINUS           reduce using rule 97 (varcte -> ID .)
    RELOP           reduce using rule 97 (varcte -> ID .)
    LCOR            shift and go to state 24

  ! SCOLON          [ reduce using rule 97 (varcte -> ID .) ]

    asign2                         shift and go to state 231

state 184

    (50) asign -> ID asign2 EQUALS expresion . SCOLON
    (88) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 233
    RELOP           shift and go to state 86


state 185

    (20) funccall -> ID fcn1 OPAREN expresion . funccall2 CPAREN
    (88) expresion -> expresion . RELOP exp
    (22) funccall2 -> . COMMA expresion funccall2
    (23) funccall2 -> . empty
    (136) empty -> .

    RELOP           shift and go to state 86
    COMMA           shift and go to state 235
    CPAREN          reduce using rule 136 (empty -> .)

    funccall2                      shift and go to state 234
    empty                          shift and go to state 236

state 186

    (68) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (69) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 237


state 187

    (70) cn1 -> empty .

    CPAREN          reduce using rule 70 (cn1 -> empty .)


state 188

    (57) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (60) escrt2 -> . COMMA escrt3
    (61) escrt2 -> . empty
    (136) empty -> .

    COMMA           shift and go to state 239
    CPAREN          reduce using rule 136 (empty -> .)

    escrt2                         shift and go to state 238
    empty                          shift and go to state 240

state 189

    (67) en3 -> empty .

    COMMA           reduce using rule 67 (en3 -> empty .)
    CPAREN          reduce using rule 67 (en3 -> empty .)


state 190

    (58) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 241


state 191

    (65) en1 -> empty .

    CPAREN          reduce using rule 65 (en1 -> empty .)


state 192

    (59) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (66) en2 -> . empty
    (136) empty -> .

    SCOLON          reduce using rule 136 (empty -> .)

    en2                            shift and go to state 242
    empty                          shift and go to state 243

state 193

    (79) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 244


state 194

    (80) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 245


state 195

    (84) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    exp                            shift and go to state 246
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 196

    (85) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    exp                            shift and go to state 247
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 197

    (81) plot2 -> LCOR varcte . COMMA varcte RCOR
    (82) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 248


state 198

    (77) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 249

state 199

    (78) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 250

state 200

    (111) metodos -> MEAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 251


state 201

    (130) mmmfunc -> OBRACKET mmmarray . CBRACKET
    (131) mmmfunc -> OBRACKET mmmarray . CBRACKET COMMA mmmfunc

    CBRACKET        shift and go to state 252


state 202

    (133) mmmarray -> varcte .
    (134) mmmarray -> varcte . COMMA mmmarray

    CBRACKET        reduce using rule 133 (mmmarray -> varcte .)
    COMMA           shift and go to state 253


state 203

    (135) mmmarray -> empty .

    CBRACKET        reduce using rule 135 (mmmarray -> empty .)


state 204

    (112) metodos -> MEDIAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 254


state 205

    (113) metodos -> MODE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 255


state 206

    (114) metodos -> STDV OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 256


state 207

    (115) metodos -> KMEANS OPAREN varcte COMMA . mmmfunc CPAREN SCOLON
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 257
    empty                          shift and go to state 156

state 208

    (116) metodos -> DERL OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 258


state 209

    (125) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 259


state 210

    (126) expfunc -> varcte COMMA . varcte COMMA varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 260

state 211

    (117) metodos -> DBERN OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 261


state 212

    (118) metodos -> DPOI OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 262


state 213

    (127) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 263


state 214

    (128) expfunc2 -> varcte COMMA . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 264

state 215

    (119) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 265


state 216

    (120) metodos -> INVERSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 266


state 217

    (121) metodos -> ROTATE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 267


state 218

    (122) metodos -> REF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 268


state 219

    (123) metodos -> RREF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 269


state 220

    (124) metodos -> MONT OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 270


state 221

    (101) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 271


state 222

    (104) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 272


state 223

    (109) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 273


state 224

    (110) rn1 -> empty .

    CPAREN          reduce using rule 110 (rn1 -> empty .)


state 225

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (18) mn2 -> . empty
    (136) empty -> .

    CPAREN          reduce using rule 136 (empty -> .)

    mn2                            shift and go to state 274
    empty                          shift and go to state 275

state 226

    (24) modules2 -> vars .

    CPAREN          reduce using rule 24 (modules2 -> vars .)
    OBRACKET        reduce using rule 24 (modules2 -> vars .)


state 227

    (25) modules2 -> empty .

    CPAREN          reduce using rule 25 (modules2 -> empty .)
    OBRACKET        reduce using rule 25 (modules2 -> empty .)


state 228

    (54) asign3 -> LCOR expresion RCOR .

    COLON           reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    MULT            reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    DIV             reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    AND             reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    OR              reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    ID              reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    CBRACKET        reduce using rule 54 (asign3 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 54 (asign3 -> LCOR expresion RCOR .)


state 229

    (55) asign3 -> LCOR varcte RCOR .

    COLON           reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    MULT            reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    DIV             reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    AND             reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    OR              reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    ID              reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    CBRACKET        reduce using rule 55 (asign3 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 55 (asign3 -> LCOR varcte RCOR .)


state 230

    (48) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 48 (asign -> ID EQUALS ID asign2 SCOLON .)


state 231

    (51) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (98) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 276
    MULT            reduce using rule 98 (varcte -> ID asign2 .)
    DIV             reduce using rule 98 (varcte -> ID asign2 .)
    PLUS            reduce using rule 98 (varcte -> ID asign2 .)
    MINUS           reduce using rule 98 (varcte -> ID asign2 .)
    RELOP           reduce using rule 98 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 98 (varcte -> ID asign2 .) ]


state 232

    (49) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    MONT            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 49 (asign -> ID asign2 EQUALS ID SCOLON .)


state 233

    (50) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MONT            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 50 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 234

    (20) funccall -> ID fcn1 OPAREN expresion funccall2 . CPAREN

    CPAREN          shift and go to state 277


state 235

    (22) funccall2 -> COMMA . expresion funccall2
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 278
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 236

    (23) funccall2 -> empty .

    CPAREN          reduce using rule 23 (funccall2 -> empty .)


state 237

    (68) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (69) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (73) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 280

    ifblock                        shift and go to state 279

state 238

    (57) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 281


state 239

    (60) escrt2 -> COMMA . escrt3
    (62) escrt3 -> . ID escrt2
    (63) escrt3 -> . ID
    (64) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 283
    STRING          shift and go to state 284

    escrt3                         shift and go to state 282

state 240

    (61) escrt2 -> empty .

    CPAREN          reduce using rule 61 (escrt2 -> empty .)
    COMMA           reduce using rule 61 (escrt2 -> empty .)


state 241

    (58) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 285


state 242

    (59) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 286


state 243

    (66) en2 -> empty .

    SCOLON          reduce using rule 66 (en2 -> empty .)


state 244

    (79) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MONT            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 79 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 245

    (80) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MONT            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 80 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 246

    (84) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 287


state 247

    (85) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 288


state 248

    (81) plot2 -> LCOR varcte COMMA . varcte RCOR
    (82) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 289

state 249

    (77) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 290


state 250

    (78) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 291


state 251

    (111) metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 111 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)


state 252

    (130) mmmfunc -> OBRACKET mmmarray CBRACKET .
    (131) mmmfunc -> OBRACKET mmmarray CBRACKET . COMMA mmmfunc

    CPAREN          reduce using rule 130 (mmmfunc -> OBRACKET mmmarray CBRACKET .)
    COMMA           shift and go to state 292


state 253

    (134) mmmarray -> varcte COMMA . mmmarray
    (133) mmmarray -> . varcte
    (134) mmmarray -> . varcte COMMA mmmarray
    (135) mmmarray -> . empty
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER
    (136) empty -> .

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42
    CBRACKET        reduce using rule 136 (empty -> .)

    varcte                         shift and go to state 202
    mmmarray                       shift and go to state 293
    empty                          shift and go to state 203

state 254

    (112) metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 112 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)


state 255

    (113) metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 113 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)


state 256

    (114) metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 114 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)


state 257

    (115) metodos -> KMEANS OPAREN varcte COMMA mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 294


state 258

    (116) metodos -> DERL OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 116 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)


state 259

    (125) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 295


state 260

    (126) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 296


state 261

    (117) metodos -> DBERN OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 117 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)


state 262

    (118) metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MONT            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 118 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)


state 263

    (127) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 127 (expfunc2 -> ID COMMA ID .)


state 264

    (128) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 128 (expfunc2 -> varcte COMMA varcte .)


state 265

    (119) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 119 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)


state 266

    (120) metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 120 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)


state 267

    (121) metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 121 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)


state 268

    (122) metodos -> REF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 122 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)


state 269

    (123) metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 123 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)


state 270

    (124) metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 124 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)


state 271

    (101) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (105) dwhileconds -> . expresion dwhileconds
    (106) dwhileconds -> . expresion AND dwhileconds
    (107) dwhileconds -> . expresion OR dwhileconds
    (108) dwhileconds -> . empty
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (136) empty -> .
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    CPAREN          reduce using rule 136 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    dwhileconds                    shift and go to state 297
    expresion                      shift and go to state 298
    empty                          shift and go to state 299
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 272

    (104) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 104 (wblock -> OBRACKET block2 CBRACKET .)


state 273

    (109) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 300


state 274

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 301


state 275

    (18) mn2 -> empty .

    CPAREN          reduce using rule 18 (mn2 -> empty .)


state 276

    (51) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 51 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 277

    (20) funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .

    ID              reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    IF              reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    PRINT           reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    PLOT            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    COUNT           reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    COUNTIF         reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    MEAN            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    MEDIAN          reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    MODE            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    STDV            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    KMEANS          reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    DERL            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    DBERN           reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    DPOI            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    INVERSE         reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    ROTATE          reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    REF             reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    RREF            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    MONT            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    DO              reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    READ            reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)
    CBRACKET        reduce using rule 20 (funccall -> ID fcn1 OPAREN expresion funccall2 CPAREN .)


state 278

    (22) funccall2 -> COMMA expresion . funccall2
    (88) expresion -> expresion . RELOP exp
    (22) funccall2 -> . COMMA expresion funccall2
    (23) funccall2 -> . empty
    (136) empty -> .

    RELOP           shift and go to state 86
    COMMA           shift and go to state 235
    CPAREN          reduce using rule 136 (empty -> .)

    funccall2                      shift and go to state 302
    empty                          shift and go to state 236

state 279

    (68) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (69) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 303
    ELSE            shift and go to state 304


state 280

    (73) ifblock -> OBRACKET . ifblock2 CBRACKET
    (74) ifblock2 -> . estatuto
    (75) ifblock2 -> . estatuto ifblock2
    (76) ifblock2 -> . empty
    (36) estatuto -> . asign
    (37) estatuto -> . cond
    (38) estatuto -> . escrt
    (39) estatuto -> . plot
    (40) estatuto -> . count
    (41) estatuto -> . countif
    (42) estatuto -> . metodos
    (43) estatuto -> . dwhile
    (44) estatuto -> . readln
    (45) estatuto -> . funccall
    (136) empty -> .
    (46) asign -> . ID EQUALS expresion SCOLON
    (47) asign -> . ID EQUALS ID SCOLON
    (48) asign -> . ID EQUALS ID asign2 SCOLON
    (49) asign -> . ID asign2 EQUALS ID SCOLON
    (50) asign -> . ID asign2 EQUALS expresion SCOLON
    (51) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (57) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (80) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (77) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (78) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (111) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (115) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (116) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (117) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (118) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (119) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (101) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (109) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (20) funccall -> . ID fcn1 OPAREN expresion funccall2 CPAREN

    CBRACKET        reduce using rule 136 (empty -> .)
    ID              shift and go to state 59
    IF              shift and go to state 60
    PRINT           shift and go to state 61
    PLOT            shift and go to state 62
    COUNT           shift and go to state 63
    COUNTIF         shift and go to state 64
    MEAN            shift and go to state 65
    MEDIAN          shift and go to state 66
    MODE            shift and go to state 67
    STDV            shift and go to state 68
    KMEANS          shift and go to state 69
    DERL            shift and go to state 70
    DBERN           shift and go to state 71
    DPOI            shift and go to state 72
    TRANSPOSE       shift and go to state 73
    INVERSE         shift and go to state 74
    ROTATE          shift and go to state 75
    REF             shift and go to state 76
    RREF            shift and go to state 77
    MONT            shift and go to state 78
    DO              shift and go to state 79
    READ            shift and go to state 80

    ifblock2                       shift and go to state 305
    estatuto                       shift and go to state 306
    empty                          shift and go to state 307
    asign                          shift and go to state 49
    cond                           shift and go to state 50
    escrt                          shift and go to state 51
    plot                           shift and go to state 52
    count                          shift and go to state 53
    countif                        shift and go to state 54
    metodos                        shift and go to state 55
    dwhile                         shift and go to state 56
    readln                         shift and go to state 57
    funccall                       shift and go to state 58

state 281

    (57) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 308


state 282

    (60) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 60 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 60 (escrt2 -> COMMA escrt3 .)


state 283

    (62) escrt3 -> ID . escrt2
    (63) escrt3 -> ID .
    (60) escrt2 -> . COMMA escrt3
    (61) escrt2 -> . empty
    (136) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 63 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 63 (escrt3 -> ID .)
    COMMA           shift and go to state 239

  ! COMMA           [ reduce using rule 63 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 136 (empty -> .) ]
  ! COMMA           [ reduce using rule 136 (empty -> .) ]

    escrt2                         shift and go to state 309
    empty                          shift and go to state 240

state 284

    (64) escrt3 -> STRING . escrt2 escrt2
    (60) escrt2 -> . COMMA escrt3
    (61) escrt2 -> . empty
    (136) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 239
    CPAREN          reduce using rule 136 (empty -> .)

  ! COMMA           [ reduce using rule 136 (empty -> .) ]

    escrt2                         shift and go to state 310
    empty                          shift and go to state 240

state 285

    (58) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MONT            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 58 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 286

    (59) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MONT            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 59 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 287

    (84) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (84) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (85) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (86) xyfunc -> . empty
    (136) empty -> .

    FX              shift and go to state 147
    FY              shift and go to state 148
    CPAREN          reduce using rule 136 (empty -> .)

    xyfunc                         shift and go to state 311
    empty                          shift and go to state 312

state 288

    (85) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (84) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (85) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (86) xyfunc -> . empty
    (136) empty -> .

    FX              shift and go to state 147
    FY              shift and go to state 148
    CPAREN          reduce using rule 136 (empty -> .)

    xyfunc                         shift and go to state 313
    empty                          shift and go to state 312

state 289

    (81) plot2 -> LCOR varcte COMMA varcte . RCOR
    (82) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 314


state 290

    (77) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 315

state 291

    (78) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 316

state 292

    (131) mmmfunc -> OBRACKET mmmarray CBRACKET COMMA . mmmfunc
    (129) mmmfunc -> . ID
    (130) mmmfunc -> . OBRACKET mmmarray CBRACKET
    (131) mmmfunc -> . OBRACKET mmmarray CBRACKET COMMA mmmfunc
    (132) mmmfunc -> . empty
    (136) empty -> .

    ID              shift and go to state 154
    OBRACKET        shift and go to state 155
    CPAREN          reduce using rule 136 (empty -> .)

    mmmfunc                        shift and go to state 317
    empty                          shift and go to state 156

state 293

    (134) mmmarray -> varcte COMMA mmmarray .

    CBRACKET        reduce using rule 134 (mmmarray -> varcte COMMA mmmarray .)


state 294

    (115) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 318


state 295

    (125) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 319


state 296

    (126) expfunc -> varcte COMMA varcte COMMA . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    varcte                         shift and go to state 320

state 297

    (101) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 321


state 298

    (105) dwhileconds -> expresion . dwhileconds
    (106) dwhileconds -> expresion . AND dwhileconds
    (107) dwhileconds -> expresion . OR dwhileconds
    (88) expresion -> expresion . RELOP exp
    (105) dwhileconds -> . expresion dwhileconds
    (106) dwhileconds -> . expresion AND dwhileconds
    (107) dwhileconds -> . expresion OR dwhileconds
    (108) dwhileconds -> . empty
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (136) empty -> .
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    AND             shift and go to state 323
    OR              shift and go to state 324
    RELOP           shift and go to state 86
    CPAREN          reduce using rule 136 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 298
    dwhileconds                    shift and go to state 322
    exp                            shift and go to state 39
    empty                          shift and go to state 299
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 299

    (108) dwhileconds -> empty .

    CPAREN          reduce using rule 108 (dwhileconds -> empty .)


state 300

    (109) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MONT            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 109 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 301

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (24) modules2 -> . vars
    (25) modules2 -> . empty
    (9) vars -> . VAR vars1
    (136) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 136 (empty -> .)

    modules2                       shift and go to state 325
    vars                           shift and go to state 226
    empty                          shift and go to state 227

state 302

    (22) funccall2 -> COMMA expresion funccall2 .

    CPAREN          reduce using rule 22 (funccall2 -> COMMA expresion funccall2 .)


state 303

    (68) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (71) cn2 -> . empty
    (136) empty -> .

    ID              reduce using rule 136 (empty -> .)
    IF              reduce using rule 136 (empty -> .)
    PRINT           reduce using rule 136 (empty -> .)
    PLOT            reduce using rule 136 (empty -> .)
    COUNT           reduce using rule 136 (empty -> .)
    COUNTIF         reduce using rule 136 (empty -> .)
    MEAN            reduce using rule 136 (empty -> .)
    MEDIAN          reduce using rule 136 (empty -> .)
    MODE            reduce using rule 136 (empty -> .)
    STDV            reduce using rule 136 (empty -> .)
    KMEANS          reduce using rule 136 (empty -> .)
    DERL            reduce using rule 136 (empty -> .)
    DBERN           reduce using rule 136 (empty -> .)
    DPOI            reduce using rule 136 (empty -> .)
    TRANSPOSE       reduce using rule 136 (empty -> .)
    INVERSE         reduce using rule 136 (empty -> .)
    ROTATE          reduce using rule 136 (empty -> .)
    REF             reduce using rule 136 (empty -> .)
    RREF            reduce using rule 136 (empty -> .)
    MONT            reduce using rule 136 (empty -> .)
    DO              reduce using rule 136 (empty -> .)
    READ            reduce using rule 136 (empty -> .)
    CBRACKET        reduce using rule 136 (empty -> .)
    CPAREN          reduce using rule 136 (empty -> .)

    cn2                            shift and go to state 326
    empty                          shift and go to state 327

state 304

    (69) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (72) cn3 -> . empty
    (136) empty -> .

    OBRACKET        reduce using rule 136 (empty -> .)

    cn3                            shift and go to state 328
    empty                          shift and go to state 329

state 305

    (73) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 330


state 306

    (74) ifblock2 -> estatuto .
    (75) ifblock2 -> estatuto . ifblock2
    (74) ifblock2 -> . estatuto
    (75) ifblock2 -> . estatuto ifblock2
    (76) ifblock2 -> . empty
    (36) estatuto -> . asign
    (37) estatuto -> . cond
    (38) estatuto -> . escrt
    (39) estatuto -> . plot
    (40) estatuto -> . count
    (41) estatuto -> . countif
    (42) estatuto -> . metodos
    (43) estatuto -> . dwhile
    (44) estatuto -> . readln
    (45) estatuto -> . funccall
    (136) empty -> .
    (46) asign -> . ID EQUALS expresion SCOLON
    (47) asign -> . ID EQUALS ID SCOLON
    (48) asign -> . ID EQUALS ID asign2 SCOLON
    (49) asign -> . ID asign2 EQUALS ID SCOLON
    (50) asign -> . ID asign2 EQUALS expresion SCOLON
    (51) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (57) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (80) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (77) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (78) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (111) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (115) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (116) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (117) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (118) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (119) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (101) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (109) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (20) funccall -> . ID fcn1 OPAREN expresion funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 74 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 74 (ifblock2 -> estatuto .)
    ID              shift and go to state 59
    IF              shift and go to state 60
    PRINT           shift and go to state 61
    PLOT            shift and go to state 62
    COUNT           shift and go to state 63
    COUNTIF         shift and go to state 64
    MEAN            shift and go to state 65
    MEDIAN          shift and go to state 66
    MODE            shift and go to state 67
    STDV            shift and go to state 68
    KMEANS          shift and go to state 69
    DERL            shift and go to state 70
    DBERN           shift and go to state 71
    DPOI            shift and go to state 72
    TRANSPOSE       shift and go to state 73
    INVERSE         shift and go to state 74
    ROTATE          shift and go to state 75
    REF             shift and go to state 76
    RREF            shift and go to state 77
    MONT            shift and go to state 78
    DO              shift and go to state 79
    READ            shift and go to state 80

  ! CBRACKET        [ reduce using rule 136 (empty -> .) ]

    estatuto                       shift and go to state 306
    ifblock2                       shift and go to state 331
    empty                          shift and go to state 307
    asign                          shift and go to state 49
    cond                           shift and go to state 50
    escrt                          shift and go to state 51
    plot                           shift and go to state 52
    count                          shift and go to state 53
    countif                        shift and go to state 54
    metodos                        shift and go to state 55
    dwhile                         shift and go to state 56
    readln                         shift and go to state 57
    funccall                       shift and go to state 58

state 307

    (76) ifblock2 -> empty .

    CBRACKET        reduce using rule 76 (ifblock2 -> empty .)


state 308

    (57) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MONT            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 57 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 309

    (62) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 62 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 62 (escrt3 -> ID escrt2 .)


state 310

    (64) escrt3 -> STRING escrt2 . escrt2
    (60) escrt2 -> . COMMA escrt3
    (61) escrt2 -> . empty
    (136) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 239
    CPAREN          reduce using rule 136 (empty -> .)

  ! COMMA           [ reduce using rule 136 (empty -> .) ]

    escrt2                         shift and go to state 332
    empty                          shift and go to state 240

state 311

    (84) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 84 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 312

    (86) xyfunc -> empty .

    CPAREN          reduce using rule 86 (xyfunc -> empty .)


state 313

    (85) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 85 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 314

    (81) plot2 -> LCOR varcte COMMA varcte RCOR .
    (82) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 81 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 333


state 315

    (77) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 334


state 316

    (78) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 335


state 317

    (131) mmmfunc -> OBRACKET mmmarray CBRACKET COMMA mmmfunc .

    CPAREN          reduce using rule 131 (mmmfunc -> OBRACKET mmmarray CBRACKET COMMA mmmfunc .)


state 318

    (115) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .

    ID              reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 115 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)


state 319

    (125) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 125 (expfunc -> ID COMMA ID COMMA ID .)


state 320

    (126) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 126 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 321

    (101) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (103) wn2 -> . empty
    (136) empty -> .

    SCOLON          reduce using rule 136 (empty -> .)

    wn2                            shift and go to state 336
    empty                          shift and go to state 337

state 322

    (105) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 105 (dwhileconds -> expresion dwhileconds .)


state 323

    (106) dwhileconds -> expresion AND . dwhileconds
    (105) dwhileconds -> . expresion dwhileconds
    (106) dwhileconds -> . expresion AND dwhileconds
    (107) dwhileconds -> . expresion OR dwhileconds
    (108) dwhileconds -> . empty
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (136) empty -> .
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    CPAREN          reduce using rule 136 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 298
    dwhileconds                    shift and go to state 338
    empty                          shift and go to state 299
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 324

    (107) dwhileconds -> expresion OR . dwhileconds
    (105) dwhileconds -> . expresion dwhileconds
    (106) dwhileconds -> . expresion AND dwhileconds
    (107) dwhileconds -> . expresion OR dwhileconds
    (108) dwhileconds -> . empty
    (87) expresion -> . exp
    (88) expresion -> . expresion RELOP exp
    (136) empty -> .
    (89) exp -> . termino
    (90) exp -> . termino PLUS exp
    (91) exp -> . termino MINUS exp
    (92) termino -> . factor
    (93) termino -> . factor MULT termino
    (94) termino -> . factor DIV termino
    (95) factor -> . OPAREN expresion CPAREN
    (96) factor -> . varcte
    (97) varcte -> . ID
    (98) varcte -> . ID asign2
    (99) varcte -> . NUMERIC
    (100) varcte -> . NUMBER

    CPAREN          reduce using rule 136 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 40
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 42

    expresion                      shift and go to state 298
    dwhileconds                    shift and go to state 339
    empty                          shift and go to state 299
    exp                            shift and go to state 39
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 94

state 325

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (19) mn3 -> . empty
    (136) empty -> .

    OBRACKET        reduce using rule 136 (empty -> .)

    mn3                            shift and go to state 340
    empty                          shift and go to state 341

state 326

    (68) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MONT            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 68 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 327

    (71) cn2 -> empty .

    ID              reduce using rule 71 (cn2 -> empty .)
    IF              reduce using rule 71 (cn2 -> empty .)
    PRINT           reduce using rule 71 (cn2 -> empty .)
    PLOT            reduce using rule 71 (cn2 -> empty .)
    COUNT           reduce using rule 71 (cn2 -> empty .)
    COUNTIF         reduce using rule 71 (cn2 -> empty .)
    MEAN            reduce using rule 71 (cn2 -> empty .)
    MEDIAN          reduce using rule 71 (cn2 -> empty .)
    MODE            reduce using rule 71 (cn2 -> empty .)
    STDV            reduce using rule 71 (cn2 -> empty .)
    KMEANS          reduce using rule 71 (cn2 -> empty .)
    DERL            reduce using rule 71 (cn2 -> empty .)
    DBERN           reduce using rule 71 (cn2 -> empty .)
    DPOI            reduce using rule 71 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 71 (cn2 -> empty .)
    INVERSE         reduce using rule 71 (cn2 -> empty .)
    ROTATE          reduce using rule 71 (cn2 -> empty .)
    REF             reduce using rule 71 (cn2 -> empty .)
    RREF            reduce using rule 71 (cn2 -> empty .)
    MONT            reduce using rule 71 (cn2 -> empty .)
    DO              reduce using rule 71 (cn2 -> empty .)
    READ            reduce using rule 71 (cn2 -> empty .)
    CBRACKET        reduce using rule 71 (cn2 -> empty .)
    CPAREN          reduce using rule 71 (cn2 -> empty .)


state 328

    (69) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (73) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 280

    ifblock                        shift and go to state 342

state 329

    (72) cn3 -> empty .

    OBRACKET        reduce using rule 72 (cn3 -> empty .)


state 330

    (73) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 73 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 73 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 331

    (75) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 75 (ifblock2 -> estatuto ifblock2 .)


state 332

    (64) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 64 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 64 (escrt3 -> STRING escrt2 escrt2 .)


state 333

    (82) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (81) plot2 -> . LCOR varcte COMMA varcte RCOR
    (82) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (83) plot2 -> . empty
    (136) empty -> .

    LCOR            shift and go to state 150
    CPAREN          reduce using rule 136 (empty -> .)

    plot2                          shift and go to state 343
    empty                          shift and go to state 344

state 334

    (77) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 345


state 335

    (78) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 60

    cond                           shift and go to state 346

state 336

    (101) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 347


state 337

    (103) wn2 -> empty .

    SCOLON          reduce using rule 103 (wn2 -> empty .)


state 338

    (106) dwhileconds -> expresion AND dwhileconds .

    CPAREN          reduce using rule 106 (dwhileconds -> expresion AND dwhileconds .)


state 339

    (107) dwhileconds -> expresion OR dwhileconds .

    CPAREN          reduce using rule 107 (dwhileconds -> expresion OR dwhileconds .)


state 340

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (26) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 349

    funblock                       shift and go to state 348

state 341

    (19) mn3 -> empty .

    OBRACKET        reduce using rule 19 (mn3 -> empty .)


state 342

    (69) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 350


state 343

    (82) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 82 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 344

    (83) plot2 -> empty .

    CPAREN          reduce using rule 83 (plot2 -> empty .)


state 345

    (77) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MONT            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 77 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 346

    (78) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 351


state 347

    (101) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MONT            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 101 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 348

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (17) mn7 -> . empty
    (136) empty -> .

    FUNC            reduce using rule 136 (empty -> .)
    OBRACKET        reduce using rule 136 (empty -> .)

    mn7                            shift and go to state 352
    empty                          shift and go to state 353

state 349

    (26) funblock -> OBRACKET . block2 CBRACKET
    (28) block2 -> . estatuto
    (29) block2 -> . estatuto block2
    (30) block2 -> . empty
    (36) estatuto -> . asign
    (37) estatuto -> . cond
    (38) estatuto -> . escrt
    (39) estatuto -> . plot
    (40) estatuto -> . count
    (41) estatuto -> . countif
    (42) estatuto -> . metodos
    (43) estatuto -> . dwhile
    (44) estatuto -> . readln
    (45) estatuto -> . funccall
    (136) empty -> .
    (46) asign -> . ID EQUALS expresion SCOLON
    (47) asign -> . ID EQUALS ID SCOLON
    (48) asign -> . ID EQUALS ID asign2 SCOLON
    (49) asign -> . ID asign2 EQUALS ID SCOLON
    (50) asign -> . ID asign2 EQUALS expresion SCOLON
    (51) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (68) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (69) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (57) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (58) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (59) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (80) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (77) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (78) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (111) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (112) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (113) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (114) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (115) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (116) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (117) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (118) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (119) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (120) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (121) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (101) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (109) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (20) funccall -> . ID fcn1 OPAREN expresion funccall2 CPAREN

    CBRACKET        reduce using rule 136 (empty -> .)
    ID              shift and go to state 59
    IF              shift and go to state 60
    PRINT           shift and go to state 61
    PLOT            shift and go to state 62
    COUNT           shift and go to state 63
    COUNTIF         shift and go to state 64
    MEAN            shift and go to state 65
    MEDIAN          shift and go to state 66
    MODE            shift and go to state 67
    STDV            shift and go to state 68
    KMEANS          shift and go to state 69
    DERL            shift and go to state 70
    DBERN           shift and go to state 71
    DPOI            shift and go to state 72
    TRANSPOSE       shift and go to state 73
    INVERSE         shift and go to state 74
    ROTATE          shift and go to state 75
    REF             shift and go to state 76
    RREF            shift and go to state 77
    MONT            shift and go to state 78
    DO              shift and go to state 79
    READ            shift and go to state 80

    block2                         shift and go to state 354
    estatuto                       shift and go to state 47
    empty                          shift and go to state 48
    asign                          shift and go to state 49
    cond                           shift and go to state 50
    escrt                          shift and go to state 51
    plot                           shift and go to state 52
    count                          shift and go to state 53
    countif                        shift and go to state 54
    metodos                        shift and go to state 55
    dwhile                         shift and go to state 56
    readln                         shift and go to state 57
    funccall                       shift and go to state 58

state 350

    (69) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (71) cn2 -> . empty
    (136) empty -> .

    ID              reduce using rule 136 (empty -> .)
    IF              reduce using rule 136 (empty -> .)
    PRINT           reduce using rule 136 (empty -> .)
    PLOT            reduce using rule 136 (empty -> .)
    COUNT           reduce using rule 136 (empty -> .)
    COUNTIF         reduce using rule 136 (empty -> .)
    MEAN            reduce using rule 136 (empty -> .)
    MEDIAN          reduce using rule 136 (empty -> .)
    MODE            reduce using rule 136 (empty -> .)
    STDV            reduce using rule 136 (empty -> .)
    KMEANS          reduce using rule 136 (empty -> .)
    DERL            reduce using rule 136 (empty -> .)
    DBERN           reduce using rule 136 (empty -> .)
    DPOI            reduce using rule 136 (empty -> .)
    TRANSPOSE       reduce using rule 136 (empty -> .)
    INVERSE         reduce using rule 136 (empty -> .)
    ROTATE          reduce using rule 136 (empty -> .)
    REF             reduce using rule 136 (empty -> .)
    RREF            reduce using rule 136 (empty -> .)
    MONT            reduce using rule 136 (empty -> .)
    DO              reduce using rule 136 (empty -> .)
    READ            reduce using rule 136 (empty -> .)
    CBRACKET        reduce using rule 136 (empty -> .)
    CPAREN          reduce using rule 136 (empty -> .)

    cn2                            shift and go to state 355
    empty                          shift and go to state 327

state 351

    (78) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 356


state 352

    (15) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 15 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 15 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 353

    (17) mn7 -> empty .

    FUNC            reduce using rule 17 (mn7 -> empty .)
    OBRACKET        reduce using rule 17 (mn7 -> empty .)


state 354

    (26) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 357


state 355

    (69) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MONT            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 69 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 356

    (78) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MONT            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 78 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 357

    (26) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 26 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 26 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 38 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 162 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 166 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 179 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 181 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 183 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 231 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 283 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 283 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 284 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 310 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 47 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 47
WARNING: reduce/reduce conflict in state 142 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 142
WARNING: reduce/reduce conflict in state 149 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 149
WARNING: reduce/reduce conflict in state 283 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 283
WARNING: reduce/reduce conflict in state 306 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 306
