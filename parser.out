Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
Rule 26    fcn1 -> empty
Rule 27    fcn2 -> empty
Rule 28    fcn3 -> empty
Rule 29    funccall2 -> COMMA expresion fcn2 funccall2
Rule 30    funccall2 -> ID fcn2 funccall2
Rule 31    funccall2 -> empty
Rule 32    modules2 -> vars
Rule 33    modules2 -> empty
Rule 34    funblock -> OBRACKET block2 CBRACKET
Rule 35    block -> OBRACKET block2 CBRACKET
Rule 36    block2 -> estatuto
Rule 37    block2 -> estatuto block2
Rule 38    block2 -> empty
Rule 39    tipo -> INT
Rule 40    tipo -> BOOL
Rule 41    tipo -> DOUBLE
Rule 42    tipo -> STRING
Rule 43    tipo -> CHAR
Rule 44    estatuto -> asign
Rule 45    estatuto -> cond
Rule 46    estatuto -> escrt
Rule 47    estatuto -> plot
Rule 48    estatuto -> count
Rule 49    estatuto -> countif
Rule 50    estatuto -> metodos
Rule 51    estatuto -> dwhile
Rule 52    estatuto -> readln
Rule 53    estatuto -> funccall
Rule 54    asign -> ID EQUALS expresion SCOLON
Rule 55    asign -> ID EQUALS ID SCOLON
Rule 56    asign -> ID EQUALS ID asign2 SCOLON
Rule 57    asign -> ID asign2 EQUALS ID SCOLON
Rule 58    asign -> ID asign2 EQUALS expresion SCOLON
Rule 59    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 60    asign2 -> LCOR expresion RCOR LCOR varcte RCOR
Rule 61    asign2 -> LCOR expresion RCOR LCOR expresion RCOR
Rule 62    asign2 -> LCOR varcte RCOR LCOR expresion RCOR
Rule 63    asign2 -> LCOR varcte RCOR LCOR varcte RCOR
Rule 64    asign2 -> LCOR expresion RCOR
Rule 65    asign2 -> LCOR varcte RCOR
Rule 66    asign3 -> LCOR expresion RCOR
Rule 67    asign3 -> LCOR varcte RCOR
Rule 68    asign3 -> empty
Rule 69    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 70    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 71    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 72    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 73    escrt2 -> COMMA escrt3
Rule 74    escrt2 -> empty
Rule 75    escrt3 -> ID escrt2
Rule 76    escrt3 -> ID
Rule 77    escrt3 -> STRING escrt2 escrt2
Rule 78    en1 -> empty
Rule 79    en2 -> empty
Rule 80    en3 -> empty
Rule 81    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 82    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 83    cn1 -> empty
Rule 84    cn2 -> empty
Rule 85    cn3 -> empty
Rule 86    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 87    ifblock2 -> estatuto
Rule 88    ifblock2 -> estatuto ifblock2
Rule 89    ifblock2 -> empty
Rule 90    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 91    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 92    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 93    plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 94    plot2 -> LCOR varcte COMMA varcte RCOR
Rule 95    plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 96    plot2 -> empty
Rule 97    xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 98    xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 99    xyfunc -> empty
Rule 100   expresion -> exp
Rule 101   expresion -> expresion RELOP exp
Rule 102   exp -> termino
Rule 103   exp -> termino PLUS exp
Rule 104   exp -> termino MINUS exp
Rule 105   termino -> factor
Rule 106   termino -> factor MULT termino
Rule 107   termino -> factor DIV termino
Rule 108   factor -> OPAREN expresion CPAREN
Rule 109   factor -> varcte
Rule 110   varcte -> ID
Rule 111   varcte -> ID asign2
Rule 112   varcte -> NUMERIC
Rule 113   varcte -> NUMBER
Rule 114   varcte -> LOGICAL
Rule 115   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 116   wn1 -> empty
Rule 117   wn2 -> empty
Rule 118   wblock -> OBRACKET block2 CBRACKET
Rule 119   dwhileconds -> expresion dwhileconds
Rule 120   dwhileconds -> expresion AND dwhileconds
Rule 121   dwhileconds -> expresion OR dwhileconds
Rule 122   dwhileconds -> empty
Rule 123   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 124   rn1 -> empty
Rule 125   metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON
Rule 126   metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON
Rule 127   metodos -> MODE OPAREN mmmfunc CPAREN SCOLON
Rule 128   metodos -> STDV OPAREN mmmfunc CPAREN SCOLON
Rule 129   metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
Rule 130   metodos -> DERL OPAREN expfunc CPAREN SCOLON
Rule 131   metodos -> DBERN OPAREN expfunc CPAREN SCOLON
Rule 132   metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON
Rule 133   metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
Rule 134   metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON
Rule 135   metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON
Rule 136   metodos -> REF OPAREN mmmfunc CPAREN SCOLON
Rule 137   metodos -> RREF OPAREN mmmfunc CPAREN SCOLON
Rule 138   metodos -> MONT OPAREN mmmfunc CPAREN SCOLON
Rule 139   metodos -> EULER OPAREN CPAREN SCOLON
Rule 140   expfunc -> ID COMMA ID COMMA ID
Rule 141   expfunc -> varcte COMMA varcte COMMA varcte
Rule 142   expfunc2 -> ID COMMA ID
Rule 143   expfunc2 -> varcte COMMA varcte
Rule 144   mmmfunc -> LCOR RCOR
Rule 145   mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc
Rule 146   mmmfunc -> LCOR mmmarray RCOR
Rule 147   mmmfunc -> ID
Rule 148   mmmfunc -> empty
Rule 149   mmmarray -> varcte
Rule 150   mmmarray -> varcte COMMA mmmarray
Rule 151   mmmarray -> empty
Rule 152   empty -> <empty>

Terminals, with rules where they appear

AND                  : 120
BOOL                 : 40
CBRACKET             : 34 35 86 118
CHAR                 : 43
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 29 73 90 90 91 91 91 94 95 95 129 140 140 141 141 142 143 145 150
COMMENT              : 
COUNT                : 90
COUNTIF              : 91
CPAREN               : 19 24 25 69 70 71 72 81 82 90 91 92 93 108 115 123 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139
CTED                 : 
CTEI                 : 
DBERN                : 131
DERL                 : 130
DIFF                 : 
DIV                  : 107
DO                   : 115
DOUBLE               : 41
DPOI                 : 132
ELSE                 : 82
EQ                   : 
EQUALS               : 54 55 56 57 58 59 97 98
EULER                : 139
FUNC                 : 19
FX                   : 97
FY                   : 98
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 25 25 30 54 55 55 56 56 57 57 58 59 59 69 75 76 90 91 110 111 123 140 140 140 142 142 147
IF                   : 81 82
INT                  : 39
INTEGER              : 
INVERSE              : 134
KMEANS               : 129
LCOR                 : 12 13 14 14 15 15 60 60 61 61 62 62 63 63 64 65 66 67 94 95 144 145 146
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 114
LUGSTAT              : 1
MEAN                 : 125
MEDIAN               : 126
MINUS                : 104
MODE                 : 127
MONT                 : 138
MULT                 : 106
NUMBER               : 12 13 14 14 15 15 113
NUMERIC              : 112
OBRACKET             : 34 35 86 118
OPAREN               : 19 24 25 69 70 71 72 81 82 90 91 92 93 108 115 123 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139
OR                   : 121
PER                  : 
PLOT                 : 92 93
PLUS                 : 103
PRINT                : 69 70 71 72
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 60 60 61 61 62 62 63 63 64 65 66 67 94 95 144 145 146
READ                 : 123
REF                  : 136
RELOP                : 101
ROTATE               : 135
RREF                 : 137
SCOLON               : 1 11 12 13 14 15 16 54 55 56 57 58 59 69 70 71 72 81 82 90 91 92 93 97 98 115 123 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139
STDV                 : 128
STRING               : 42 71 72 77
TIPO                 : 
TRANSPOSE            : 133
VAR                  : 9
WHILE                : 115
error                : 

Nonterminals, with rules where they appear

addmain              : 1
asign                : 44
asign2               : 16 17 56 57 58 59 59 111
asign3               : 
block                : 1
block2               : 34 35 37 118
cn1                  : 81 82
cn2                  : 81 82
cn3                  : 82
cond                 : 45 91
count                : 48
countif              : 49
dwhile               : 51
dwhileconds          : 115 119 120 121
empty                : 2 3 5 8 18 20 21 23 26 27 28 31 33 38 68 74 78 79 80 83 84 85 89 96 99 116 117 122 124 148 151
en1                  : 70
en2                  : 71 72
en3                  : 69
escrt                : 46
escrt2               : 69 72 75 77 77
escrt3               : 73
estatuto             : 36 37 87 88
exp                  : 97 98 100 101 103 104
expfunc              : 130 131
expfunc2             : 132
expresion            : 24 29 54 58 60 61 61 62 64 66 70 81 82 101 108 119 120 121
factor               : 105 106 107
fcn1                 : 24 25
fcn2                 : 24 25 29 30
fcn3                 : 24
funblock             : 19
funccall             : 53
funccall2            : 24 25 29 30
ifblock              : 81 82 82
ifblock2             : 86 88
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 50
mmmarray             : 145 146 150
mmmfunc              : 125 126 127 128 129 133 134 135 136 137 138 145
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 47
plot2                : 93 95
readln               : 52
rn1                  : 123
savename             : 
termino              : 102 103 104 106 107
tipo                 : 11 12 13 14 15 16 19
varcte               : 60 62 63 63 65 67 90 90 91 91 94 94 95 95 109 129 141 141 141 143 143 149 150
vars                 : 4 32
vars1                : 9 10 17
wblock               : 115
wn1                  : 115
wn2                  : 115
xyfunc               : 92 97 98

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (152) empty -> .

    VAR             reduce using rule 152 (empty -> .)
    FUNC            reduce using rule 152 (empty -> .)
    OBRACKET        reduce using rule 152 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (152) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 152 (empty -> .)
    OBRACKET        reduce using rule 152 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (152) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 152 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (152) empty -> .

    OBRACKET        reduce using rule 152 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (152) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 152 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (35) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (60) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (61) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (62) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (63) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (64) asign2 -> LCOR . expresion RCOR
    (65) asign2 -> LCOR . varcte RCOR
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    NUMBER          shift and go to state 36
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (35) block -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (152) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (125) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (126) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (127) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (130) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (131) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (132) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (133) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (137) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (138) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 152 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    block2                         shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 83

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 84


state 30

    (39) tipo -> INT .

    SCOLON          reduce using rule 39 (tipo -> INT .)
    OPAREN          reduce using rule 39 (tipo -> INT .)


state 31

    (40) tipo -> BOOL .

    SCOLON          reduce using rule 40 (tipo -> BOOL .)
    OPAREN          reduce using rule 40 (tipo -> BOOL .)


state 32

    (41) tipo -> DOUBLE .

    SCOLON          reduce using rule 41 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 41 (tipo -> DOUBLE .)


state 33

    (42) tipo -> STRING .

    SCOLON          reduce using rule 42 (tipo -> STRING .)
    OPAREN          reduce using rule 42 (tipo -> STRING .)


state 34

    (43) tipo -> CHAR .

    SCOLON          reduce using rule 43 (tipo -> CHAR .)
    OPAREN          reduce using rule 43 (tipo -> CHAR .)


state 35

    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

    RCOR            reduce using rule 110 (varcte -> ID .)
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    CPAREN          reduce using rule 110 (varcte -> ID .)
    SCOLON          reduce using rule 110 (varcte -> ID .)
    COMMA           reduce using rule 110 (varcte -> ID .)
    ID              reduce using rule 110 (varcte -> ID .)
    AND             reduce using rule 110 (varcte -> ID .)
    OR              reduce using rule 110 (varcte -> ID .)
    OPAREN          reduce using rule 110 (varcte -> ID .)
    NUMERIC         reduce using rule 110 (varcte -> ID .)
    NUMBER          reduce using rule 110 (varcte -> ID .)
    LOGICAL         reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 86

    asign2                         shift and go to state 85

state 36

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (113) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 87
    MULT            reduce using rule 113 (varcte -> NUMBER .)
    DIV             reduce using rule 113 (varcte -> NUMBER .)
    PLUS            reduce using rule 113 (varcte -> NUMBER .)
    MINUS           reduce using rule 113 (varcte -> NUMBER .)
    RELOP           reduce using rule 113 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 113 (varcte -> NUMBER .) ]


state 37

    (60) asign2 -> LCOR expresion . RCOR LCOR varcte RCOR
    (61) asign2 -> LCOR expresion . RCOR LCOR expresion RCOR
    (64) asign2 -> LCOR expresion . RCOR
    (101) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 88
    RELOP           shift and go to state 89


state 38

    (62) asign2 -> LCOR varcte . RCOR LCOR expresion RCOR
    (63) asign2 -> LCOR varcte . RCOR LCOR varcte RCOR
    (65) asign2 -> LCOR varcte . RCOR
    (109) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 90
    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)

  ! RCOR            [ reduce using rule 109 (factor -> varcte .) ]


state 39

    (100) expresion -> exp .

    RCOR            reduce using rule 100 (expresion -> exp .)
    RELOP           reduce using rule 100 (expresion -> exp .)
    CPAREN          reduce using rule 100 (expresion -> exp .)
    SCOLON          reduce using rule 100 (expresion -> exp .)
    COMMA           reduce using rule 100 (expresion -> exp .)
    ID              reduce using rule 100 (expresion -> exp .)
    AND             reduce using rule 100 (expresion -> exp .)
    OR              reduce using rule 100 (expresion -> exp .)
    OPAREN          reduce using rule 100 (expresion -> exp .)
    NUMERIC         reduce using rule 100 (expresion -> exp .)
    NUMBER          reduce using rule 100 (expresion -> exp .)
    LOGICAL         reduce using rule 100 (expresion -> exp .)


state 40

    (112) varcte -> NUMERIC .

    RCOR            reduce using rule 112 (varcte -> NUMERIC .)
    MULT            reduce using rule 112 (varcte -> NUMERIC .)
    DIV             reduce using rule 112 (varcte -> NUMERIC .)
    PLUS            reduce using rule 112 (varcte -> NUMERIC .)
    MINUS           reduce using rule 112 (varcte -> NUMERIC .)
    RELOP           reduce using rule 112 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 112 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 112 (varcte -> NUMERIC .)
    COMMA           reduce using rule 112 (varcte -> NUMERIC .)
    ID              reduce using rule 112 (varcte -> NUMERIC .)
    AND             reduce using rule 112 (varcte -> NUMERIC .)
    OR              reduce using rule 112 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 112 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 112 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 112 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 112 (varcte -> NUMERIC .)


state 41

    (114) varcte -> LOGICAL .

    RCOR            reduce using rule 114 (varcte -> LOGICAL .)
    MULT            reduce using rule 114 (varcte -> LOGICAL .)
    DIV             reduce using rule 114 (varcte -> LOGICAL .)
    PLUS            reduce using rule 114 (varcte -> LOGICAL .)
    MINUS           reduce using rule 114 (varcte -> LOGICAL .)
    RELOP           reduce using rule 114 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 114 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 114 (varcte -> LOGICAL .)
    COMMA           reduce using rule 114 (varcte -> LOGICAL .)
    ID              reduce using rule 114 (varcte -> LOGICAL .)
    AND             reduce using rule 114 (varcte -> LOGICAL .)
    OR              reduce using rule 114 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 114 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 114 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 114 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 114 (varcte -> LOGICAL .)


state 42

    (102) exp -> termino .
    (103) exp -> termino . PLUS exp
    (104) exp -> termino . MINUS exp

    RCOR            reduce using rule 102 (exp -> termino .)
    RELOP           reduce using rule 102 (exp -> termino .)
    CPAREN          reduce using rule 102 (exp -> termino .)
    SCOLON          reduce using rule 102 (exp -> termino .)
    COMMA           reduce using rule 102 (exp -> termino .)
    ID              reduce using rule 102 (exp -> termino .)
    AND             reduce using rule 102 (exp -> termino .)
    OR              reduce using rule 102 (exp -> termino .)
    OPAREN          reduce using rule 102 (exp -> termino .)
    NUMERIC         reduce using rule 102 (exp -> termino .)
    NUMBER          reduce using rule 102 (exp -> termino .)
    LOGICAL         reduce using rule 102 (exp -> termino .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92


state 43

    (105) termino -> factor .
    (106) termino -> factor . MULT termino
    (107) termino -> factor . DIV termino

    PLUS            reduce using rule 105 (termino -> factor .)
    MINUS           reduce using rule 105 (termino -> factor .)
    RCOR            reduce using rule 105 (termino -> factor .)
    RELOP           reduce using rule 105 (termino -> factor .)
    CPAREN          reduce using rule 105 (termino -> factor .)
    SCOLON          reduce using rule 105 (termino -> factor .)
    COMMA           reduce using rule 105 (termino -> factor .)
    ID              reduce using rule 105 (termino -> factor .)
    AND             reduce using rule 105 (termino -> factor .)
    OR              reduce using rule 105 (termino -> factor .)
    OPAREN          reduce using rule 105 (termino -> factor .)
    NUMERIC         reduce using rule 105 (termino -> factor .)
    NUMBER          reduce using rule 105 (termino -> factor .)
    LOGICAL         reduce using rule 105 (termino -> factor .)
    MULT            shift and go to state 93
    DIV             shift and go to state 94


state 44

    (108) factor -> OPAREN . expresion CPAREN
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 95
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 45

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 98

state 46

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 99

state 47

    (35) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 100


state 48

    (36) block2 -> estatuto .
    (37) block2 -> estatuto . block2
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (152) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (125) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (126) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (127) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (130) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (131) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (132) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (133) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (137) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (138) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 36 (block2 -> estatuto .)
    CBRACKET        reduce using rule 36 (block2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

  ! CBRACKET        [ reduce using rule 152 (empty -> .) ]

    estatuto                       shift and go to state 48
    block2                         shift and go to state 101
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 49

    (38) block2 -> empty .

    CBRACKET        reduce using rule 38 (block2 -> empty .)


state 50

    (44) estatuto -> asign .

    ID              reduce using rule 44 (estatuto -> asign .)
    IF              reduce using rule 44 (estatuto -> asign .)
    PRINT           reduce using rule 44 (estatuto -> asign .)
    PLOT            reduce using rule 44 (estatuto -> asign .)
    COUNT           reduce using rule 44 (estatuto -> asign .)
    COUNTIF         reduce using rule 44 (estatuto -> asign .)
    MEAN            reduce using rule 44 (estatuto -> asign .)
    MEDIAN          reduce using rule 44 (estatuto -> asign .)
    MODE            reduce using rule 44 (estatuto -> asign .)
    STDV            reduce using rule 44 (estatuto -> asign .)
    KMEANS          reduce using rule 44 (estatuto -> asign .)
    DERL            reduce using rule 44 (estatuto -> asign .)
    DBERN           reduce using rule 44 (estatuto -> asign .)
    DPOI            reduce using rule 44 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 44 (estatuto -> asign .)
    INVERSE         reduce using rule 44 (estatuto -> asign .)
    ROTATE          reduce using rule 44 (estatuto -> asign .)
    REF             reduce using rule 44 (estatuto -> asign .)
    RREF            reduce using rule 44 (estatuto -> asign .)
    MONT            reduce using rule 44 (estatuto -> asign .)
    EULER           reduce using rule 44 (estatuto -> asign .)
    DO              reduce using rule 44 (estatuto -> asign .)
    READ            reduce using rule 44 (estatuto -> asign .)
    CBRACKET        reduce using rule 44 (estatuto -> asign .)


state 51

    (45) estatuto -> cond .

    ID              reduce using rule 45 (estatuto -> cond .)
    IF              reduce using rule 45 (estatuto -> cond .)
    PRINT           reduce using rule 45 (estatuto -> cond .)
    PLOT            reduce using rule 45 (estatuto -> cond .)
    COUNT           reduce using rule 45 (estatuto -> cond .)
    COUNTIF         reduce using rule 45 (estatuto -> cond .)
    MEAN            reduce using rule 45 (estatuto -> cond .)
    MEDIAN          reduce using rule 45 (estatuto -> cond .)
    MODE            reduce using rule 45 (estatuto -> cond .)
    STDV            reduce using rule 45 (estatuto -> cond .)
    KMEANS          reduce using rule 45 (estatuto -> cond .)
    DERL            reduce using rule 45 (estatuto -> cond .)
    DBERN           reduce using rule 45 (estatuto -> cond .)
    DPOI            reduce using rule 45 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 45 (estatuto -> cond .)
    INVERSE         reduce using rule 45 (estatuto -> cond .)
    ROTATE          reduce using rule 45 (estatuto -> cond .)
    REF             reduce using rule 45 (estatuto -> cond .)
    RREF            reduce using rule 45 (estatuto -> cond .)
    MONT            reduce using rule 45 (estatuto -> cond .)
    EULER           reduce using rule 45 (estatuto -> cond .)
    DO              reduce using rule 45 (estatuto -> cond .)
    READ            reduce using rule 45 (estatuto -> cond .)
    CBRACKET        reduce using rule 45 (estatuto -> cond .)


state 52

    (46) estatuto -> escrt .

    ID              reduce using rule 46 (estatuto -> escrt .)
    IF              reduce using rule 46 (estatuto -> escrt .)
    PRINT           reduce using rule 46 (estatuto -> escrt .)
    PLOT            reduce using rule 46 (estatuto -> escrt .)
    COUNT           reduce using rule 46 (estatuto -> escrt .)
    COUNTIF         reduce using rule 46 (estatuto -> escrt .)
    MEAN            reduce using rule 46 (estatuto -> escrt .)
    MEDIAN          reduce using rule 46 (estatuto -> escrt .)
    MODE            reduce using rule 46 (estatuto -> escrt .)
    STDV            reduce using rule 46 (estatuto -> escrt .)
    KMEANS          reduce using rule 46 (estatuto -> escrt .)
    DERL            reduce using rule 46 (estatuto -> escrt .)
    DBERN           reduce using rule 46 (estatuto -> escrt .)
    DPOI            reduce using rule 46 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 46 (estatuto -> escrt .)
    INVERSE         reduce using rule 46 (estatuto -> escrt .)
    ROTATE          reduce using rule 46 (estatuto -> escrt .)
    REF             reduce using rule 46 (estatuto -> escrt .)
    RREF            reduce using rule 46 (estatuto -> escrt .)
    MONT            reduce using rule 46 (estatuto -> escrt .)
    EULER           reduce using rule 46 (estatuto -> escrt .)
    DO              reduce using rule 46 (estatuto -> escrt .)
    READ            reduce using rule 46 (estatuto -> escrt .)
    CBRACKET        reduce using rule 46 (estatuto -> escrt .)


state 53

    (47) estatuto -> plot .

    ID              reduce using rule 47 (estatuto -> plot .)
    IF              reduce using rule 47 (estatuto -> plot .)
    PRINT           reduce using rule 47 (estatuto -> plot .)
    PLOT            reduce using rule 47 (estatuto -> plot .)
    COUNT           reduce using rule 47 (estatuto -> plot .)
    COUNTIF         reduce using rule 47 (estatuto -> plot .)
    MEAN            reduce using rule 47 (estatuto -> plot .)
    MEDIAN          reduce using rule 47 (estatuto -> plot .)
    MODE            reduce using rule 47 (estatuto -> plot .)
    STDV            reduce using rule 47 (estatuto -> plot .)
    KMEANS          reduce using rule 47 (estatuto -> plot .)
    DERL            reduce using rule 47 (estatuto -> plot .)
    DBERN           reduce using rule 47 (estatuto -> plot .)
    DPOI            reduce using rule 47 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 47 (estatuto -> plot .)
    INVERSE         reduce using rule 47 (estatuto -> plot .)
    ROTATE          reduce using rule 47 (estatuto -> plot .)
    REF             reduce using rule 47 (estatuto -> plot .)
    RREF            reduce using rule 47 (estatuto -> plot .)
    MONT            reduce using rule 47 (estatuto -> plot .)
    EULER           reduce using rule 47 (estatuto -> plot .)
    DO              reduce using rule 47 (estatuto -> plot .)
    READ            reduce using rule 47 (estatuto -> plot .)
    CBRACKET        reduce using rule 47 (estatuto -> plot .)


state 54

    (48) estatuto -> count .

    ID              reduce using rule 48 (estatuto -> count .)
    IF              reduce using rule 48 (estatuto -> count .)
    PRINT           reduce using rule 48 (estatuto -> count .)
    PLOT            reduce using rule 48 (estatuto -> count .)
    COUNT           reduce using rule 48 (estatuto -> count .)
    COUNTIF         reduce using rule 48 (estatuto -> count .)
    MEAN            reduce using rule 48 (estatuto -> count .)
    MEDIAN          reduce using rule 48 (estatuto -> count .)
    MODE            reduce using rule 48 (estatuto -> count .)
    STDV            reduce using rule 48 (estatuto -> count .)
    KMEANS          reduce using rule 48 (estatuto -> count .)
    DERL            reduce using rule 48 (estatuto -> count .)
    DBERN           reduce using rule 48 (estatuto -> count .)
    DPOI            reduce using rule 48 (estatuto -> count .)
    TRANSPOSE       reduce using rule 48 (estatuto -> count .)
    INVERSE         reduce using rule 48 (estatuto -> count .)
    ROTATE          reduce using rule 48 (estatuto -> count .)
    REF             reduce using rule 48 (estatuto -> count .)
    RREF            reduce using rule 48 (estatuto -> count .)
    MONT            reduce using rule 48 (estatuto -> count .)
    EULER           reduce using rule 48 (estatuto -> count .)
    DO              reduce using rule 48 (estatuto -> count .)
    READ            reduce using rule 48 (estatuto -> count .)
    CBRACKET        reduce using rule 48 (estatuto -> count .)


state 55

    (49) estatuto -> countif .

    ID              reduce using rule 49 (estatuto -> countif .)
    IF              reduce using rule 49 (estatuto -> countif .)
    PRINT           reduce using rule 49 (estatuto -> countif .)
    PLOT            reduce using rule 49 (estatuto -> countif .)
    COUNT           reduce using rule 49 (estatuto -> countif .)
    COUNTIF         reduce using rule 49 (estatuto -> countif .)
    MEAN            reduce using rule 49 (estatuto -> countif .)
    MEDIAN          reduce using rule 49 (estatuto -> countif .)
    MODE            reduce using rule 49 (estatuto -> countif .)
    STDV            reduce using rule 49 (estatuto -> countif .)
    KMEANS          reduce using rule 49 (estatuto -> countif .)
    DERL            reduce using rule 49 (estatuto -> countif .)
    DBERN           reduce using rule 49 (estatuto -> countif .)
    DPOI            reduce using rule 49 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 49 (estatuto -> countif .)
    INVERSE         reduce using rule 49 (estatuto -> countif .)
    ROTATE          reduce using rule 49 (estatuto -> countif .)
    REF             reduce using rule 49 (estatuto -> countif .)
    RREF            reduce using rule 49 (estatuto -> countif .)
    MONT            reduce using rule 49 (estatuto -> countif .)
    EULER           reduce using rule 49 (estatuto -> countif .)
    DO              reduce using rule 49 (estatuto -> countif .)
    READ            reduce using rule 49 (estatuto -> countif .)
    CBRACKET        reduce using rule 49 (estatuto -> countif .)


state 56

    (50) estatuto -> metodos .

    ID              reduce using rule 50 (estatuto -> metodos .)
    IF              reduce using rule 50 (estatuto -> metodos .)
    PRINT           reduce using rule 50 (estatuto -> metodos .)
    PLOT            reduce using rule 50 (estatuto -> metodos .)
    COUNT           reduce using rule 50 (estatuto -> metodos .)
    COUNTIF         reduce using rule 50 (estatuto -> metodos .)
    MEAN            reduce using rule 50 (estatuto -> metodos .)
    MEDIAN          reduce using rule 50 (estatuto -> metodos .)
    MODE            reduce using rule 50 (estatuto -> metodos .)
    STDV            reduce using rule 50 (estatuto -> metodos .)
    KMEANS          reduce using rule 50 (estatuto -> metodos .)
    DERL            reduce using rule 50 (estatuto -> metodos .)
    DBERN           reduce using rule 50 (estatuto -> metodos .)
    DPOI            reduce using rule 50 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 50 (estatuto -> metodos .)
    INVERSE         reduce using rule 50 (estatuto -> metodos .)
    ROTATE          reduce using rule 50 (estatuto -> metodos .)
    REF             reduce using rule 50 (estatuto -> metodos .)
    RREF            reduce using rule 50 (estatuto -> metodos .)
    MONT            reduce using rule 50 (estatuto -> metodos .)
    EULER           reduce using rule 50 (estatuto -> metodos .)
    DO              reduce using rule 50 (estatuto -> metodos .)
    READ            reduce using rule 50 (estatuto -> metodos .)
    CBRACKET        reduce using rule 50 (estatuto -> metodos .)


state 57

    (51) estatuto -> dwhile .

    ID              reduce using rule 51 (estatuto -> dwhile .)
    IF              reduce using rule 51 (estatuto -> dwhile .)
    PRINT           reduce using rule 51 (estatuto -> dwhile .)
    PLOT            reduce using rule 51 (estatuto -> dwhile .)
    COUNT           reduce using rule 51 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 51 (estatuto -> dwhile .)
    MEAN            reduce using rule 51 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 51 (estatuto -> dwhile .)
    MODE            reduce using rule 51 (estatuto -> dwhile .)
    STDV            reduce using rule 51 (estatuto -> dwhile .)
    KMEANS          reduce using rule 51 (estatuto -> dwhile .)
    DERL            reduce using rule 51 (estatuto -> dwhile .)
    DBERN           reduce using rule 51 (estatuto -> dwhile .)
    DPOI            reduce using rule 51 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 51 (estatuto -> dwhile .)
    INVERSE         reduce using rule 51 (estatuto -> dwhile .)
    ROTATE          reduce using rule 51 (estatuto -> dwhile .)
    REF             reduce using rule 51 (estatuto -> dwhile .)
    RREF            reduce using rule 51 (estatuto -> dwhile .)
    MONT            reduce using rule 51 (estatuto -> dwhile .)
    EULER           reduce using rule 51 (estatuto -> dwhile .)
    DO              reduce using rule 51 (estatuto -> dwhile .)
    READ            reduce using rule 51 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 51 (estatuto -> dwhile .)


state 58

    (52) estatuto -> readln .

    ID              reduce using rule 52 (estatuto -> readln .)
    IF              reduce using rule 52 (estatuto -> readln .)
    PRINT           reduce using rule 52 (estatuto -> readln .)
    PLOT            reduce using rule 52 (estatuto -> readln .)
    COUNT           reduce using rule 52 (estatuto -> readln .)
    COUNTIF         reduce using rule 52 (estatuto -> readln .)
    MEAN            reduce using rule 52 (estatuto -> readln .)
    MEDIAN          reduce using rule 52 (estatuto -> readln .)
    MODE            reduce using rule 52 (estatuto -> readln .)
    STDV            reduce using rule 52 (estatuto -> readln .)
    KMEANS          reduce using rule 52 (estatuto -> readln .)
    DERL            reduce using rule 52 (estatuto -> readln .)
    DBERN           reduce using rule 52 (estatuto -> readln .)
    DPOI            reduce using rule 52 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 52 (estatuto -> readln .)
    INVERSE         reduce using rule 52 (estatuto -> readln .)
    ROTATE          reduce using rule 52 (estatuto -> readln .)
    REF             reduce using rule 52 (estatuto -> readln .)
    RREF            reduce using rule 52 (estatuto -> readln .)
    MONT            reduce using rule 52 (estatuto -> readln .)
    EULER           reduce using rule 52 (estatuto -> readln .)
    DO              reduce using rule 52 (estatuto -> readln .)
    READ            reduce using rule 52 (estatuto -> readln .)
    CBRACKET        reduce using rule 52 (estatuto -> readln .)


state 59

    (53) estatuto -> funccall .

    ID              reduce using rule 53 (estatuto -> funccall .)
    IF              reduce using rule 53 (estatuto -> funccall .)
    PRINT           reduce using rule 53 (estatuto -> funccall .)
    PLOT            reduce using rule 53 (estatuto -> funccall .)
    COUNT           reduce using rule 53 (estatuto -> funccall .)
    COUNTIF         reduce using rule 53 (estatuto -> funccall .)
    MEAN            reduce using rule 53 (estatuto -> funccall .)
    MEDIAN          reduce using rule 53 (estatuto -> funccall .)
    MODE            reduce using rule 53 (estatuto -> funccall .)
    STDV            reduce using rule 53 (estatuto -> funccall .)
    KMEANS          reduce using rule 53 (estatuto -> funccall .)
    DERL            reduce using rule 53 (estatuto -> funccall .)
    DBERN           reduce using rule 53 (estatuto -> funccall .)
    DPOI            reduce using rule 53 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 53 (estatuto -> funccall .)
    INVERSE         reduce using rule 53 (estatuto -> funccall .)
    ROTATE          reduce using rule 53 (estatuto -> funccall .)
    REF             reduce using rule 53 (estatuto -> funccall .)
    RREF            reduce using rule 53 (estatuto -> funccall .)
    MONT            reduce using rule 53 (estatuto -> funccall .)
    EULER           reduce using rule 53 (estatuto -> funccall .)
    DO              reduce using rule 53 (estatuto -> funccall .)
    READ            reduce using rule 53 (estatuto -> funccall .)
    CBRACKET        reduce using rule 53 (estatuto -> funccall .)


state 60

    (54) asign -> ID . EQUALS expresion SCOLON
    (55) asign -> ID . EQUALS ID SCOLON
    (56) asign -> ID . EQUALS ID asign2 SCOLON
    (57) asign -> ID . asign2 EQUALS ID SCOLON
    (58) asign -> ID . asign2 EQUALS expresion SCOLON
    (59) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

    EQUALS          shift and go to state 102
    OPAREN          shift and go to state 104
    LCOR            shift and go to state 86

    asign2                         shift and go to state 103

state 61

    (81) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 105


state 62

    (69) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 106


state 63

    (92) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (93) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 107


state 64

    (90) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 108


state 65

    (91) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 109


state 66

    (125) metodos -> MEAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 110


state 67

    (126) metodos -> MEDIAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 111


state 68

    (127) metodos -> MODE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 112


state 69

    (128) metodos -> STDV . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 113


state 70

    (129) metodos -> KMEANS . OPAREN varcte COMMA mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 114


state 71

    (130) metodos -> DERL . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 115


state 72

    (131) metodos -> DBERN . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 116


state 73

    (132) metodos -> DPOI . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 117


state 74

    (133) metodos -> TRANSPOSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 118


state 75

    (134) metodos -> INVERSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 119


state 76

    (135) metodos -> ROTATE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 120


state 77

    (136) metodos -> REF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 121


state 78

    (137) metodos -> RREF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 122


state 79

    (138) metodos -> MONT . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 123


state 80

    (139) metodos -> EULER . OPAREN CPAREN SCOLON

    OPAREN          shift and go to state 124


state 81

    (115) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (116) wn1 -> . empty
    (152) empty -> .

    OBRACKET        reduce using rule 152 (empty -> .)

    wn1                            shift and go to state 125
    empty                          shift and go to state 126

state 82

    (123) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 127


state 83

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (152) empty -> .

    OPAREN          reduce using rule 152 (empty -> .)

    mn1                            shift and go to state 128
    empty                          shift and go to state 129

state 84

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (152) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 152 (empty -> .)
    OBRACKET        reduce using rule 152 (empty -> .)
    CPAREN          reduce using rule 152 (empty -> .)

    lugstat2                       shift and go to state 130
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 85

    (111) varcte -> ID asign2 .

    RCOR            reduce using rule 111 (varcte -> ID asign2 .)
    MULT            reduce using rule 111 (varcte -> ID asign2 .)
    DIV             reduce using rule 111 (varcte -> ID asign2 .)
    PLUS            reduce using rule 111 (varcte -> ID asign2 .)
    MINUS           reduce using rule 111 (varcte -> ID asign2 .)
    RELOP           reduce using rule 111 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 111 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 111 (varcte -> ID asign2 .)
    COMMA           reduce using rule 111 (varcte -> ID asign2 .)
    ID              reduce using rule 111 (varcte -> ID asign2 .)
    AND             reduce using rule 111 (varcte -> ID asign2 .)
    OR              reduce using rule 111 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 111 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 111 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 111 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 111 (varcte -> ID asign2 .)


state 86

    (60) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (61) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (62) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (63) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (64) asign2 -> LCOR . expresion RCOR
    (65) asign2 -> LCOR . varcte RCOR
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 87

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 132
    LCOR            shift and go to state 131


state 88

    (60) asign2 -> LCOR expresion RCOR . LCOR varcte RCOR
    (61) asign2 -> LCOR expresion RCOR . LCOR expresion RCOR
    (64) asign2 -> LCOR expresion RCOR .

    LCOR            shift and go to state 133
    COLON           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    MULT            reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    DIV             reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    ID              reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    AND             reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    OR              reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)


state 89

    (101) expresion -> expresion RELOP . exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 134
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 90

    (62) asign2 -> LCOR varcte RCOR . LCOR expresion RCOR
    (63) asign2 -> LCOR varcte RCOR . LCOR varcte RCOR
    (65) asign2 -> LCOR varcte RCOR .

    LCOR            shift and go to state 135
    COLON           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    MULT            reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    DIV             reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    ID              reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    AND             reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    OR              reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)


state 91

    (103) exp -> termino PLUS . exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 136
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 92

    (104) exp -> termino MINUS . exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 137
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 93

    (106) termino -> factor MULT . termino
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 138
    varcte                         shift and go to state 96

state 94

    (107) termino -> factor DIV . termino
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 139
    varcte                         shift and go to state 96

state 95

    (108) factor -> OPAREN expresion . CPAREN
    (101) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 140
    RELOP           shift and go to state 89


state 96

    (109) factor -> varcte .

    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    CPAREN          reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)
    RCOR            reduce using rule 109 (factor -> varcte .)
    SCOLON          reduce using rule 109 (factor -> varcte .)
    COMMA           reduce using rule 109 (factor -> varcte .)
    ID              reduce using rule 109 (factor -> varcte .)
    AND             reduce using rule 109 (factor -> varcte .)
    OR              reduce using rule 109 (factor -> varcte .)
    OPAREN          reduce using rule 109 (factor -> varcte .)
    NUMERIC         reduce using rule 109 (factor -> varcte .)
    NUMBER          reduce using rule 109 (factor -> varcte .)
    LOGICAL         reduce using rule 109 (factor -> varcte .)


state 97

    (113) varcte -> NUMBER .

    MULT            reduce using rule 113 (varcte -> NUMBER .)
    DIV             reduce using rule 113 (varcte -> NUMBER .)
    PLUS            reduce using rule 113 (varcte -> NUMBER .)
    MINUS           reduce using rule 113 (varcte -> NUMBER .)
    CPAREN          reduce using rule 113 (varcte -> NUMBER .)
    RELOP           reduce using rule 113 (varcte -> NUMBER .)
    RCOR            reduce using rule 113 (varcte -> NUMBER .)
    SCOLON          reduce using rule 113 (varcte -> NUMBER .)
    COMMA           reduce using rule 113 (varcte -> NUMBER .)
    ID              reduce using rule 113 (varcte -> NUMBER .)
    AND             reduce using rule 113 (varcte -> NUMBER .)
    OR              reduce using rule 113 (varcte -> NUMBER .)
    OPAREN          reduce using rule 113 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 113 (varcte -> NUMBER .)
    NUMBER          reduce using rule 113 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 113 (varcte -> NUMBER .)


state 98

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 141


state 99

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 100

    (35) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 35 (block -> OBRACKET block2 CBRACKET .)


state 101

    (37) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 37 (block2 -> estatuto block2 .)


state 102

    (54) asign -> ID EQUALS . expresion SCOLON
    (55) asign -> ID EQUALS . ID SCOLON
    (56) asign -> ID EQUALS . ID asign2 SCOLON
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 142
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 143
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 103

    (57) asign -> ID asign2 . EQUALS ID SCOLON
    (58) asign -> ID asign2 . EQUALS expresion SCOLON
    (59) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 144


state 104

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN . fcn1 ID fcn2 funccall2 CPAREN
    (26) fcn1 -> . empty
    (152) empty -> .

    ID              reduce using rule 152 (empty -> .)
    OPAREN          reduce using rule 152 (empty -> .)
    NUMERIC         reduce using rule 152 (empty -> .)
    NUMBER          reduce using rule 152 (empty -> .)
    LOGICAL         reduce using rule 152 (empty -> .)

    fcn1                           shift and go to state 145
    empty                          shift and go to state 146

state 105

    (81) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 147
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 106

    (69) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (71) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (72) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 148
    STRING          shift and go to state 150
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 149
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 107

    (92) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (93) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (97) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (98) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (99) xyfunc -> . empty
    (94) plot2 -> . LCOR varcte COMMA varcte RCOR
    (95) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (96) plot2 -> . empty
    (152) empty -> .

    FX              shift and go to state 153
    FY              shift and go to state 154
    LCOR            shift and go to state 156
    CPAREN          reduce using rule 152 (empty -> .)

    xyfunc                         shift and go to state 151
    plot2                          shift and go to state 152
    empty                          shift and go to state 155

state 108

    (90) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 157


state 109

    (91) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 158


state 110

    (125) metodos -> MEAN OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 159
    empty                          shift and go to state 162

state 111

    (126) metodos -> MEDIAN OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 163
    empty                          shift and go to state 162

state 112

    (127) metodos -> MODE OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 164
    empty                          shift and go to state 162

state 113

    (128) metodos -> STDV OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 165
    empty                          shift and go to state 162

state 114

    (129) metodos -> KMEANS OPAREN . varcte COMMA mmmfunc CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 166

state 115

    (130) metodos -> DERL OPAREN . expfunc CPAREN SCOLON
    (140) expfunc -> . ID COMMA ID COMMA ID
    (141) expfunc -> . varcte COMMA varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 168
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 167
    varcte                         shift and go to state 169

state 116

    (131) metodos -> DBERN OPAREN . expfunc CPAREN SCOLON
    (140) expfunc -> . ID COMMA ID COMMA ID
    (141) expfunc -> . varcte COMMA varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 168
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 170
    varcte                         shift and go to state 169

state 117

    (132) metodos -> DPOI OPAREN . expfunc2 CPAREN SCOLON
    (142) expfunc2 -> . ID COMMA ID
    (143) expfunc2 -> . varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 172
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 171
    varcte                         shift and go to state 173

state 118

    (133) metodos -> TRANSPOSE OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 174
    empty                          shift and go to state 162

state 119

    (134) metodos -> INVERSE OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 175
    empty                          shift and go to state 162

state 120

    (135) metodos -> ROTATE OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 176
    empty                          shift and go to state 162

state 121

    (136) metodos -> REF OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 177
    empty                          shift and go to state 162

state 122

    (137) metodos -> RREF OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 178
    empty                          shift and go to state 162

state 123

    (138) metodos -> MONT OPAREN . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 179
    empty                          shift and go to state 162

state 124

    (139) metodos -> EULER OPAREN . CPAREN SCOLON

    CPAREN          shift and go to state 180


state 125

    (115) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (118) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 182

    wblock                         shift and go to state 181

state 126

    (116) wn1 -> empty .

    OBRACKET        reduce using rule 116 (wn1 -> empty .)


state 127

    (123) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 183


state 128

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 184


state 129

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 130

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 131

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 185


state 132

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 186

state 133

    (60) asign2 -> LCOR expresion RCOR LCOR . varcte RCOR
    (61) asign2 -> LCOR expresion RCOR LCOR . expresion RCOR
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 187
    varcte                         shift and go to state 188
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 134

    (101) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 101 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 101 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 101 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 101 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 101 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 101 (expresion -> expresion RELOP exp .)
    AND             reduce using rule 101 (expresion -> expresion RELOP exp .)
    OR              reduce using rule 101 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 101 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 101 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 101 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 101 (expresion -> expresion RELOP exp .)


state 135

    (62) asign2 -> LCOR varcte RCOR LCOR . expresion RCOR
    (63) asign2 -> LCOR varcte RCOR LCOR . varcte RCOR
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    varcte                         shift and go to state 189
    expresion                      shift and go to state 190
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 136

    (103) exp -> termino PLUS exp .

    RCOR            reduce using rule 103 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 103 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 103 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 103 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 103 (exp -> termino PLUS exp .)
    ID              reduce using rule 103 (exp -> termino PLUS exp .)
    AND             reduce using rule 103 (exp -> termino PLUS exp .)
    OR              reduce using rule 103 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 103 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 103 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 103 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 103 (exp -> termino PLUS exp .)


state 137

    (104) exp -> termino MINUS exp .

    RCOR            reduce using rule 104 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 104 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 104 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 104 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 104 (exp -> termino MINUS exp .)
    ID              reduce using rule 104 (exp -> termino MINUS exp .)
    AND             reduce using rule 104 (exp -> termino MINUS exp .)
    OR              reduce using rule 104 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 104 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 104 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 104 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 104 (exp -> termino MINUS exp .)


state 138

    (106) termino -> factor MULT termino .

    PLUS            reduce using rule 106 (termino -> factor MULT termino .)
    MINUS           reduce using rule 106 (termino -> factor MULT termino .)
    RCOR            reduce using rule 106 (termino -> factor MULT termino .)
    RELOP           reduce using rule 106 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 106 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 106 (termino -> factor MULT termino .)
    COMMA           reduce using rule 106 (termino -> factor MULT termino .)
    ID              reduce using rule 106 (termino -> factor MULT termino .)
    AND             reduce using rule 106 (termino -> factor MULT termino .)
    OR              reduce using rule 106 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 106 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 106 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 106 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 106 (termino -> factor MULT termino .)


state 139

    (107) termino -> factor DIV termino .

    PLUS            reduce using rule 107 (termino -> factor DIV termino .)
    MINUS           reduce using rule 107 (termino -> factor DIV termino .)
    RCOR            reduce using rule 107 (termino -> factor DIV termino .)
    RELOP           reduce using rule 107 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 107 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 107 (termino -> factor DIV termino .)
    COMMA           reduce using rule 107 (termino -> factor DIV termino .)
    ID              reduce using rule 107 (termino -> factor DIV termino .)
    AND             reduce using rule 107 (termino -> factor DIV termino .)
    OR              reduce using rule 107 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 107 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 107 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 107 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 107 (termino -> factor DIV termino .)


state 140

    (108) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    AND             reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    OR              reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 108 (factor -> OPAREN expresion CPAREN .)


state 141

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 142

    (55) asign -> ID EQUALS ID . SCOLON
    (56) asign -> ID EQUALS ID . asign2 SCOLON
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 191
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 86

  ! SCOLON          [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 192

state 143

    (54) asign -> ID EQUALS expresion . SCOLON
    (101) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 193
    RELOP           shift and go to state 89


state 144

    (57) asign -> ID asign2 EQUALS . ID SCOLON
    (58) asign -> ID asign2 EQUALS . expresion SCOLON
    (59) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 194
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 195
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 145

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN fcn1 . ID fcn2 funccall2 CPAREN
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 196
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 197
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 146

    (26) fcn1 -> empty .

    ID              reduce using rule 26 (fcn1 -> empty .)
    OPAREN          reduce using rule 26 (fcn1 -> empty .)
    NUMERIC         reduce using rule 26 (fcn1 -> empty .)
    NUMBER          reduce using rule 26 (fcn1 -> empty .)
    LOGICAL         reduce using rule 26 (fcn1 -> empty .)


state 147

    (81) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (101) expresion -> expresion . RELOP exp
    (83) cn1 -> . empty
    (152) empty -> .

    RELOP           shift and go to state 89
    CPAREN          reduce using rule 152 (empty -> .)

    cn1                            shift and go to state 198
    empty                          shift and go to state 199

state 148

    (69) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (80) en3 -> . empty
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR
    (152) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 110 (varcte -> ID .)
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    CPAREN          reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 86
    COMMA           reduce using rule 152 (empty -> .)

  ! CPAREN          [ reduce using rule 152 (empty -> .) ]

    en3                            shift and go to state 200
    asign2                         shift and go to state 85
    empty                          shift and go to state 201

state 149

    (70) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (101) expresion -> expresion . RELOP exp
    (78) en1 -> . empty
    (152) empty -> .

    RELOP           shift and go to state 89
    CPAREN          reduce using rule 152 (empty -> .)

    en1                            shift and go to state 202
    empty                          shift and go to state 203

state 150

    (71) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (72) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (152) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 204
    COMMA           shift and go to state 206

  ! CPAREN          [ reduce using rule 152 (empty -> .) ]

    escrt2                         shift and go to state 205
    empty                          shift and go to state 207

state 151

    (92) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 208


state 152

    (93) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 209


state 153

    (97) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 210


state 154

    (98) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 211


state 155

    (99) xyfunc -> empty .
    (96) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 96 (plot2 -> empty .)
    CPAREN          reduce using rule 96 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 99 (xyfunc -> empty .) ]


state 156

    (94) plot2 -> LCOR . varcte COMMA varcte RCOR
    (95) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 212

state 157

    (90) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 213


state 158

    (91) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 214


state 159

    (125) metodos -> MEAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 215


state 160

    (144) mmmfunc -> LCOR . RCOR
    (145) mmmfunc -> LCOR . mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> LCOR . mmmarray RCOR
    (149) mmmarray -> . varcte
    (150) mmmarray -> . varcte COMMA mmmarray
    (151) mmmarray -> . empty
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (152) empty -> .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 216
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

  ! RCOR            [ reduce using rule 152 (empty -> .) ]

    mmmarray                       shift and go to state 217
    varcte                         shift and go to state 218
    empty                          shift and go to state 219

state 161

    (147) mmmfunc -> ID .

    CPAREN          reduce using rule 147 (mmmfunc -> ID .)


state 162

    (148) mmmfunc -> empty .

    CPAREN          reduce using rule 148 (mmmfunc -> empty .)


state 163

    (126) metodos -> MEDIAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 220


state 164

    (127) metodos -> MODE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 221


state 165

    (128) metodos -> STDV OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 222


state 166

    (129) metodos -> KMEANS OPAREN varcte . COMMA mmmfunc CPAREN SCOLON

    COMMA           shift and go to state 223


state 167

    (130) metodos -> DERL OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 224


state 168

    (140) expfunc -> ID . COMMA ID COMMA ID
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 225
    LCOR            shift and go to state 86

  ! COMMA           [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 85

state 169

    (141) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 226


state 170

    (131) metodos -> DBERN OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 227


state 171

    (132) metodos -> DPOI OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 228


state 172

    (142) expfunc2 -> ID . COMMA ID
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 229
    LCOR            shift and go to state 86

  ! COMMA           [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 85

state 173

    (143) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 230


state 174

    (133) metodos -> TRANSPOSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 231


state 175

    (134) metodos -> INVERSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 232


state 176

    (135) metodos -> ROTATE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 233


state 177

    (136) metodos -> REF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 234


state 178

    (137) metodos -> RREF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 235


state 179

    (138) metodos -> MONT OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 236


state 180

    (139) metodos -> EULER OPAREN CPAREN . SCOLON

    SCOLON          shift and go to state 237


state 181

    (115) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 238


state 182

    (118) wblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (152) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (125) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (126) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (127) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (130) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (131) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (132) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (133) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (137) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (138) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 152 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    block2                         shift and go to state 239
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 183

    (123) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (124) rn1 -> . empty
    (152) empty -> .

    CPAREN          reduce using rule 152 (empty -> .)

    rn1                            shift and go to state 240
    empty                          shift and go to state 241

state 184

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (152) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 152 (empty -> .)

    modules2                       shift and go to state 242
    vars                           shift and go to state 243
    empty                          shift and go to state 244

state 185

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 245


state 186

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 246


state 187

    (61) asign2 -> LCOR expresion RCOR LCOR expresion . RCOR
    (101) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 247
    RELOP           shift and go to state 89


state 188

    (60) asign2 -> LCOR expresion RCOR LCOR varcte . RCOR
    (109) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 248
    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)

  ! RCOR            [ reduce using rule 109 (factor -> varcte .) ]


state 189

    (63) asign2 -> LCOR varcte RCOR LCOR varcte . RCOR
    (109) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 249
    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)

  ! RCOR            [ reduce using rule 109 (factor -> varcte .) ]


state 190

    (62) asign2 -> LCOR varcte RCOR LCOR expresion . RCOR
    (101) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 250
    RELOP           shift and go to state 89


state 191

    (55) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MONT            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    EULER           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)


state 192

    (56) asign -> ID EQUALS ID asign2 . SCOLON
    (111) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 251
    MULT            reduce using rule 111 (varcte -> ID asign2 .)
    DIV             reduce using rule 111 (varcte -> ID asign2 .)
    PLUS            reduce using rule 111 (varcte -> ID asign2 .)
    MINUS           reduce using rule 111 (varcte -> ID asign2 .)
    RELOP           reduce using rule 111 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 111 (varcte -> ID asign2 .) ]


state 193

    (54) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MONT            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    EULER           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)


state 194

    (57) asign -> ID asign2 EQUALS ID . SCOLON
    (59) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 253
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 86

  ! SCOLON          [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 252

state 195

    (58) asign -> ID asign2 EQUALS expresion . SCOLON
    (101) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 254
    RELOP           shift and go to state 89


state 196

    (25) funccall -> ID OPAREN fcn1 ID . fcn2 funccall2 CPAREN
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (27) fcn2 -> . empty
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR
    (152) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 110 (varcte -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 110 (varcte -> ID .)
  ! reduce/reduce conflict for CPAREN resolved using rule 110 (varcte -> ID .)
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    COMMA           reduce using rule 110 (varcte -> ID .)
    ID              reduce using rule 110 (varcte -> ID .)
    CPAREN          reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 86

  ! COMMA           [ reduce using rule 152 (empty -> .) ]
  ! ID              [ reduce using rule 152 (empty -> .) ]
  ! CPAREN          [ reduce using rule 152 (empty -> .) ]

    fcn2                           shift and go to state 255
    asign2                         shift and go to state 85
    empty                          shift and go to state 256

state 197

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (101) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (152) empty -> .

    RELOP           shift and go to state 89
    COMMA           reduce using rule 152 (empty -> .)
    ID              reduce using rule 152 (empty -> .)
    CPAREN          reduce using rule 152 (empty -> .)

    fcn2                           shift and go to state 257
    empty                          shift and go to state 256

state 198

    (81) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (82) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 258


state 199

    (83) cn1 -> empty .

    CPAREN          reduce using rule 83 (cn1 -> empty .)


state 200

    (69) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (152) empty -> .

    COMMA           shift and go to state 206
    CPAREN          reduce using rule 152 (empty -> .)

    escrt2                         shift and go to state 259
    empty                          shift and go to state 207

state 201

    (80) en3 -> empty .

    COMMA           reduce using rule 80 (en3 -> empty .)
    CPAREN          reduce using rule 80 (en3 -> empty .)


state 202

    (70) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 260


state 203

    (78) en1 -> empty .

    CPAREN          reduce using rule 78 (en1 -> empty .)


state 204

    (71) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (79) en2 -> . empty
    (152) empty -> .

    SCOLON          reduce using rule 152 (empty -> .)

    en2                            shift and go to state 261
    empty                          shift and go to state 262

state 205

    (72) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 263


state 206

    (73) escrt2 -> COMMA . escrt3
    (75) escrt3 -> . ID escrt2
    (76) escrt3 -> . ID
    (77) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 265
    STRING          shift and go to state 266

    escrt3                         shift and go to state 264

state 207

    (74) escrt2 -> empty .

    CPAREN          reduce using rule 74 (escrt2 -> empty .)
    COMMA           reduce using rule 74 (escrt2 -> empty .)


state 208

    (92) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 267


state 209

    (93) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 268


state 210

    (97) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 269
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 211

    (98) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 270
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 212

    (94) plot2 -> LCOR varcte . COMMA varcte RCOR
    (95) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 271


state 213

    (90) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 272

state 214

    (91) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 273

state 215

    (125) metodos -> MEAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 274


state 216

    (144) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 144 (mmmfunc -> LCOR RCOR .)


state 217

    (145) mmmfunc -> LCOR mmmarray . RCOR COMMA mmmfunc
    (146) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 275


state 218

    (149) mmmarray -> varcte .
    (150) mmmarray -> varcte . COMMA mmmarray

    RCOR            reduce using rule 149 (mmmarray -> varcte .)
    COMMA           shift and go to state 276


state 219

    (151) mmmarray -> empty .

    RCOR            reduce using rule 151 (mmmarray -> empty .)


state 220

    (126) metodos -> MEDIAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 277


state 221

    (127) metodos -> MODE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 278


state 222

    (128) metodos -> STDV OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 279


state 223

    (129) metodos -> KMEANS OPAREN varcte COMMA . mmmfunc CPAREN SCOLON
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 280
    empty                          shift and go to state 162

state 224

    (130) metodos -> DERL OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 281


state 225

    (140) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 282


state 226

    (141) expfunc -> varcte COMMA . varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 283

state 227

    (131) metodos -> DBERN OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 284


state 228

    (132) metodos -> DPOI OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 285


state 229

    (142) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 286


state 230

    (143) expfunc2 -> varcte COMMA . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 287

state 231

    (133) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 288


state 232

    (134) metodos -> INVERSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 289


state 233

    (135) metodos -> ROTATE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 290


state 234

    (136) metodos -> REF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 291


state 235

    (137) metodos -> RREF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 292


state 236

    (138) metodos -> MONT OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 293


state 237

    (139) metodos -> EULER OPAREN CPAREN SCOLON .

    ID              reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    IF              reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    PRINT           reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    PLOT            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    COUNT           reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    COUNTIF         reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MEAN            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MEDIAN          reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MODE            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    STDV            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    KMEANS          reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DERL            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DBERN           reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DPOI            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    INVERSE         reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    ROTATE          reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    REF             reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    RREF            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MONT            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    EULER           reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DO              reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    READ            reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)
    CBRACKET        reduce using rule 139 (metodos -> EULER OPAREN CPAREN SCOLON .)


state 238

    (115) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 294


state 239

    (118) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 295


state 240

    (123) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 296


state 241

    (124) rn1 -> empty .

    CPAREN          reduce using rule 124 (rn1 -> empty .)


state 242

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 297

state 243

    (32) modules2 -> vars .

    CPAREN          reduce using rule 32 (modules2 -> vars .)
    OBRACKET        reduce using rule 32 (modules2 -> vars .)


state 244

    (33) modules2 -> empty .

    CPAREN          reduce using rule 33 (modules2 -> empty .)
    OBRACKET        reduce using rule 33 (modules2 -> empty .)


state 245

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 298


state 246

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (152) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 152 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 152 (empty -> .) ]
  ! CPAREN          [ reduce using rule 152 (empty -> .) ]

    lugstat2                       shift and go to state 299
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 247

    (61) asign2 -> LCOR expresion RCOR LCOR expresion RCOR .

    COLON           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    ID              reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    AND             reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    OR              reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)


state 248

    (60) asign2 -> LCOR expresion RCOR LCOR varcte RCOR .

    COLON           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    ID              reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    AND             reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    OR              reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)


state 249

    (63) asign2 -> LCOR varcte RCOR LCOR varcte RCOR .

    COLON           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    ID              reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    AND             reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    OR              reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)


state 250

    (62) asign2 -> LCOR varcte RCOR LCOR expresion RCOR .

    COLON           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    ID              reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    AND             reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    OR              reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)


state 251

    (56) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)


state 252

    (59) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (111) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 300
    MULT            reduce using rule 111 (varcte -> ID asign2 .)
    DIV             reduce using rule 111 (varcte -> ID asign2 .)
    PLUS            reduce using rule 111 (varcte -> ID asign2 .)
    MINUS           reduce using rule 111 (varcte -> ID asign2 .)
    RELOP           reduce using rule 111 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 111 (varcte -> ID asign2 .) ]


state 253

    (57) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MONT            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    EULER           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)


state 254

    (58) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MONT            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    EULER           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 255

    (25) funccall -> ID OPAREN fcn1 ID fcn2 . funccall2 CPAREN
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (152) empty -> .

    COMMA           shift and go to state 303
    ID              shift and go to state 301
    CPAREN          reduce using rule 152 (empty -> .)

    funccall2                      shift and go to state 302
    empty                          shift and go to state 304

state 256

    (27) fcn2 -> empty .

    COMMA           reduce using rule 27 (fcn2 -> empty .)
    ID              reduce using rule 27 (fcn2 -> empty .)
    CPAREN          reduce using rule 27 (fcn2 -> empty .)


state 257

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (152) empty -> .

    COMMA           shift and go to state 303
    ID              shift and go to state 301
    CPAREN          reduce using rule 152 (empty -> .)

    funccall2                      shift and go to state 305
    empty                          shift and go to state 304

state 258

    (81) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (82) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (86) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 307

    ifblock                        shift and go to state 306

state 259

    (69) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 308


state 260

    (70) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 309


state 261

    (71) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 310


state 262

    (79) en2 -> empty .

    SCOLON          reduce using rule 79 (en2 -> empty .)


state 263

    (72) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (79) en2 -> . empty
    (152) empty -> .

    SCOLON          reduce using rule 152 (empty -> .)

    en2                            shift and go to state 311
    empty                          shift and go to state 262

state 264

    (73) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 73 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 73 (escrt2 -> COMMA escrt3 .)


state 265

    (75) escrt3 -> ID . escrt2
    (76) escrt3 -> ID .
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (152) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 76 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 76 (escrt3 -> ID .)
    COMMA           shift and go to state 206

  ! COMMA           [ reduce using rule 76 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 152 (empty -> .) ]
  ! COMMA           [ reduce using rule 152 (empty -> .) ]

    escrt2                         shift and go to state 312
    empty                          shift and go to state 207

state 266

    (77) escrt3 -> STRING . escrt2 escrt2
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (152) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 206
    CPAREN          reduce using rule 152 (empty -> .)

  ! COMMA           [ reduce using rule 152 (empty -> .) ]

    escrt2                         shift and go to state 313
    empty                          shift and go to state 207

state 267

    (92) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MONT            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    EULER           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 268

    (93) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MONT            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    EULER           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 269

    (97) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 314


state 270

    (98) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 315


state 271

    (94) plot2 -> LCOR varcte COMMA . varcte RCOR
    (95) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 316

state 272

    (90) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 317


state 273

    (91) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 318


state 274

    (125) metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 125 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)


state 275

    (145) mmmfunc -> LCOR mmmarray RCOR . COMMA mmmfunc
    (146) mmmfunc -> LCOR mmmarray RCOR .

    COMMA           shift and go to state 319
    CPAREN          reduce using rule 146 (mmmfunc -> LCOR mmmarray RCOR .)


state 276

    (150) mmmarray -> varcte COMMA . mmmarray
    (149) mmmarray -> . varcte
    (150) mmmarray -> . varcte COMMA mmmarray
    (151) mmmarray -> . empty
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (152) empty -> .

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    RCOR            reduce using rule 152 (empty -> .)

    varcte                         shift and go to state 218
    mmmarray                       shift and go to state 320
    empty                          shift and go to state 219

state 277

    (126) metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 126 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)


state 278

    (127) metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 127 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)


state 279

    (128) metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 128 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)


state 280

    (129) metodos -> KMEANS OPAREN varcte COMMA mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 321


state 281

    (130) metodos -> DERL OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 130 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)


state 282

    (140) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 322


state 283

    (141) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 323


state 284

    (131) metodos -> DBERN OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 131 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)


state 285

    (132) metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MONT            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)


state 286

    (142) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 142 (expfunc2 -> ID COMMA ID .)


state 287

    (143) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 143 (expfunc2 -> varcte COMMA varcte .)


state 288

    (133) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 133 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)


state 289

    (134) metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 134 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)


state 290

    (135) metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 135 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)


state 291

    (136) metodos -> REF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 136 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)


state 292

    (137) metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 137 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)


state 293

    (138) metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 138 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)


state 294

    (115) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (119) dwhileconds -> . expresion dwhileconds
    (120) dwhileconds -> . expresion AND dwhileconds
    (121) dwhileconds -> . expresion OR dwhileconds
    (122) dwhileconds -> . empty
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (152) empty -> .
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    CPAREN          reduce using rule 152 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    dwhileconds                    shift and go to state 324
    expresion                      shift and go to state 325
    empty                          shift and go to state 326
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 295

    (118) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 118 (wblock -> OBRACKET block2 CBRACKET .)


state 296

    (123) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 327


state 297

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 328


state 298

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 329

state 299

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 300

    (59) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 301

    (30) funccall2 -> ID . fcn2 funccall2
    (27) fcn2 -> . empty
    (152) empty -> .

    COMMA           reduce using rule 152 (empty -> .)
    ID              reduce using rule 152 (empty -> .)
    CPAREN          reduce using rule 152 (empty -> .)

    fcn2                           shift and go to state 330
    empty                          shift and go to state 256

state 302

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 . CPAREN

    CPAREN          shift and go to state 331


state 303

    (29) funccall2 -> COMMA . expresion fcn2 funccall2
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 332
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 304

    (31) funccall2 -> empty .

    CPAREN          reduce using rule 31 (funccall2 -> empty .)


state 305

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 333


state 306

    (81) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 334
    ELSE            shift and go to state 335


state 307

    (86) ifblock -> OBRACKET . ifblock2 CBRACKET
    (87) ifblock2 -> . estatuto
    (88) ifblock2 -> . estatuto ifblock2
    (89) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (152) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (125) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (126) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (127) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (130) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (131) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (132) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (133) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (137) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (138) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 152 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    ifblock2                       shift and go to state 336
    estatuto                       shift and go to state 337
    empty                          shift and go to state 338
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 308

    (69) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 339


state 309

    (70) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MONT            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    EULER           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 310

    (71) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MONT            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    EULER           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 311

    (72) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 340


state 312

    (75) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 75 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 75 (escrt3 -> ID escrt2 .)


state 313

    (77) escrt3 -> STRING escrt2 . escrt2
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (152) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 206
    CPAREN          reduce using rule 152 (empty -> .)

  ! COMMA           [ reduce using rule 152 (empty -> .) ]

    escrt2                         shift and go to state 341
    empty                          shift and go to state 207

state 314

    (97) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (97) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (98) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (99) xyfunc -> . empty
    (152) empty -> .

    FX              shift and go to state 153
    FY              shift and go to state 154
    CPAREN          reduce using rule 152 (empty -> .)

    xyfunc                         shift and go to state 342
    empty                          shift and go to state 343

state 315

    (98) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (97) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (98) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (99) xyfunc -> . empty
    (152) empty -> .

    FX              shift and go to state 153
    FY              shift and go to state 154
    CPAREN          reduce using rule 152 (empty -> .)

    xyfunc                         shift and go to state 344
    empty                          shift and go to state 343

state 316

    (94) plot2 -> LCOR varcte COMMA varcte . RCOR
    (95) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 345


state 317

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 346

state 318

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 347

state 319

    (145) mmmfunc -> LCOR mmmarray RCOR COMMA . mmmfunc
    (144) mmmfunc -> . LCOR RCOR
    (145) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (146) mmmfunc -> . LCOR mmmarray RCOR
    (147) mmmfunc -> . ID
    (148) mmmfunc -> . empty
    (152) empty -> .

    LCOR            shift and go to state 160
    ID              shift and go to state 161
    CPAREN          reduce using rule 152 (empty -> .)

    mmmfunc                        shift and go to state 348
    empty                          shift and go to state 162

state 320

    (150) mmmarray -> varcte COMMA mmmarray .

    RCOR            reduce using rule 150 (mmmarray -> varcte COMMA mmmarray .)


state 321

    (129) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 349


state 322

    (140) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 350


state 323

    (141) expfunc -> varcte COMMA varcte COMMA . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 351

state 324

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 352


state 325

    (119) dwhileconds -> expresion . dwhileconds
    (120) dwhileconds -> expresion . AND dwhileconds
    (121) dwhileconds -> expresion . OR dwhileconds
    (101) expresion -> expresion . RELOP exp
    (119) dwhileconds -> . expresion dwhileconds
    (120) dwhileconds -> . expresion AND dwhileconds
    (121) dwhileconds -> . expresion OR dwhileconds
    (122) dwhileconds -> . empty
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (152) empty -> .
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    AND             shift and go to state 354
    OR              shift and go to state 355
    RELOP           shift and go to state 89
    CPAREN          reduce using rule 152 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 325
    dwhileconds                    shift and go to state 353
    exp                            shift and go to state 39
    empty                          shift and go to state 326
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 326

    (122) dwhileconds -> empty .

    CPAREN          reduce using rule 122 (dwhileconds -> empty .)


state 327

    (123) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MONT            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    EULER           reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 123 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 328

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (152) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 152 (empty -> .)

    modules2                       shift and go to state 356
    vars                           shift and go to state 243
    empty                          shift and go to state 244

state 329

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 357


state 330

    (30) funccall2 -> ID fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (152) empty -> .

    COMMA           shift and go to state 303
    ID              shift and go to state 301
    CPAREN          reduce using rule 152 (empty -> .)

    funccall2                      shift and go to state 358
    empty                          shift and go to state 304

state 331

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .

    ID              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    IF              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PRINT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PLOT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNTIF         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEAN            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEDIAN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MODE            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    STDV            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    KMEANS          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DERL            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DBERN           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DPOI            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    INVERSE         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    ROTATE          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    REF             reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RREF            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MONT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    EULER           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DO              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    READ            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CBRACKET        reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)


state 332

    (29) funccall2 -> COMMA expresion . fcn2 funccall2
    (101) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (152) empty -> .

    RELOP           shift and go to state 89
    COMMA           reduce using rule 152 (empty -> .)
    ID              reduce using rule 152 (empty -> .)
    CPAREN          reduce using rule 152 (empty -> .)

    fcn2                           shift and go to state 359
    empty                          shift and go to state 256

state 333

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (28) fcn3 -> . empty
    (152) empty -> .

    ID              reduce using rule 152 (empty -> .)
    IF              reduce using rule 152 (empty -> .)
    PRINT           reduce using rule 152 (empty -> .)
    PLOT            reduce using rule 152 (empty -> .)
    COUNT           reduce using rule 152 (empty -> .)
    COUNTIF         reduce using rule 152 (empty -> .)
    MEAN            reduce using rule 152 (empty -> .)
    MEDIAN          reduce using rule 152 (empty -> .)
    MODE            reduce using rule 152 (empty -> .)
    STDV            reduce using rule 152 (empty -> .)
    KMEANS          reduce using rule 152 (empty -> .)
    DERL            reduce using rule 152 (empty -> .)
    DBERN           reduce using rule 152 (empty -> .)
    DPOI            reduce using rule 152 (empty -> .)
    TRANSPOSE       reduce using rule 152 (empty -> .)
    INVERSE         reduce using rule 152 (empty -> .)
    ROTATE          reduce using rule 152 (empty -> .)
    REF             reduce using rule 152 (empty -> .)
    RREF            reduce using rule 152 (empty -> .)
    MONT            reduce using rule 152 (empty -> .)
    EULER           reduce using rule 152 (empty -> .)
    DO              reduce using rule 152 (empty -> .)
    READ            reduce using rule 152 (empty -> .)
    CBRACKET        reduce using rule 152 (empty -> .)

    fcn3                           shift and go to state 360
    empty                          shift and go to state 361

state 334

    (81) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (84) cn2 -> . empty
    (152) empty -> .

    ID              reduce using rule 152 (empty -> .)
    IF              reduce using rule 152 (empty -> .)
    PRINT           reduce using rule 152 (empty -> .)
    PLOT            reduce using rule 152 (empty -> .)
    COUNT           reduce using rule 152 (empty -> .)
    COUNTIF         reduce using rule 152 (empty -> .)
    MEAN            reduce using rule 152 (empty -> .)
    MEDIAN          reduce using rule 152 (empty -> .)
    MODE            reduce using rule 152 (empty -> .)
    STDV            reduce using rule 152 (empty -> .)
    KMEANS          reduce using rule 152 (empty -> .)
    DERL            reduce using rule 152 (empty -> .)
    DBERN           reduce using rule 152 (empty -> .)
    DPOI            reduce using rule 152 (empty -> .)
    TRANSPOSE       reduce using rule 152 (empty -> .)
    INVERSE         reduce using rule 152 (empty -> .)
    ROTATE          reduce using rule 152 (empty -> .)
    REF             reduce using rule 152 (empty -> .)
    RREF            reduce using rule 152 (empty -> .)
    MONT            reduce using rule 152 (empty -> .)
    EULER           reduce using rule 152 (empty -> .)
    DO              reduce using rule 152 (empty -> .)
    READ            reduce using rule 152 (empty -> .)
    CBRACKET        reduce using rule 152 (empty -> .)
    CPAREN          reduce using rule 152 (empty -> .)

    cn2                            shift and go to state 362
    empty                          shift and go to state 363

state 335

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (85) cn3 -> . empty
    (152) empty -> .

    OBRACKET        reduce using rule 152 (empty -> .)

    cn3                            shift and go to state 364
    empty                          shift and go to state 365

state 336

    (86) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 366


state 337

    (87) ifblock2 -> estatuto .
    (88) ifblock2 -> estatuto . ifblock2
    (87) ifblock2 -> . estatuto
    (88) ifblock2 -> . estatuto ifblock2
    (89) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (152) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (125) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (126) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (127) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (130) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (131) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (132) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (133) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (137) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (138) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 87 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 87 (ifblock2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

  ! CBRACKET        [ reduce using rule 152 (empty -> .) ]

    estatuto                       shift and go to state 337
    ifblock2                       shift and go to state 367
    empty                          shift and go to state 338
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 338

    (89) ifblock2 -> empty .

    CBRACKET        reduce using rule 89 (ifblock2 -> empty .)


state 339

    (69) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MONT            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    EULER           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 340

    (72) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MONT            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    EULER           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 341

    (77) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 77 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 77 (escrt3 -> STRING escrt2 escrt2 .)


state 342

    (97) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 97 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 343

    (99) xyfunc -> empty .

    CPAREN          reduce using rule 99 (xyfunc -> empty .)


state 344

    (98) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 98 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 345

    (94) plot2 -> LCOR varcte COMMA varcte RCOR .
    (95) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 94 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 368


state 346

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 369


state 347

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 370


state 348

    (145) mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc .

    CPAREN          reduce using rule 145 (mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc .)


state 349

    (129) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .

    ID              reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 129 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)


state 350

    (140) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 140 (expfunc -> ID COMMA ID COMMA ID .)


state 351

    (141) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 141 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 352

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (117) wn2 -> . empty
    (152) empty -> .

    SCOLON          reduce using rule 152 (empty -> .)

    wn2                            shift and go to state 371
    empty                          shift and go to state 372

state 353

    (119) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 119 (dwhileconds -> expresion dwhileconds .)


state 354

    (120) dwhileconds -> expresion AND . dwhileconds
    (119) dwhileconds -> . expresion dwhileconds
    (120) dwhileconds -> . expresion AND dwhileconds
    (121) dwhileconds -> . expresion OR dwhileconds
    (122) dwhileconds -> . empty
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (152) empty -> .
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    CPAREN          reduce using rule 152 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 325
    dwhileconds                    shift and go to state 373
    empty                          shift and go to state 326
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 355

    (121) dwhileconds -> expresion OR . dwhileconds
    (119) dwhileconds -> . expresion dwhileconds
    (120) dwhileconds -> . expresion AND dwhileconds
    (121) dwhileconds -> . expresion OR dwhileconds
    (122) dwhileconds -> . empty
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (152) empty -> .
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    CPAREN          reduce using rule 152 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 325
    dwhileconds                    shift and go to state 374
    empty                          shift and go to state 326
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 356

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (152) empty -> .

    OBRACKET        reduce using rule 152 (empty -> .)

    mn3                            shift and go to state 375
    empty                          shift and go to state 376

state 357

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (152) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 152 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 152 (empty -> .) ]
  ! CPAREN          [ reduce using rule 152 (empty -> .) ]

    lugstat2                       shift and go to state 377
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 358

    (30) funccall2 -> ID fcn2 funccall2 .

    CPAREN          reduce using rule 30 (funccall2 -> ID fcn2 funccall2 .)


state 359

    (29) funccall2 -> COMMA expresion fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (152) empty -> .

    COMMA           shift and go to state 303
    ID              shift and go to state 301
    CPAREN          reduce using rule 152 (empty -> .)

    funccall2                      shift and go to state 378
    empty                          shift and go to state 304

state 360

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MONT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    EULER           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 361

    (28) fcn3 -> empty .

    ID              reduce using rule 28 (fcn3 -> empty .)
    IF              reduce using rule 28 (fcn3 -> empty .)
    PRINT           reduce using rule 28 (fcn3 -> empty .)
    PLOT            reduce using rule 28 (fcn3 -> empty .)
    COUNT           reduce using rule 28 (fcn3 -> empty .)
    COUNTIF         reduce using rule 28 (fcn3 -> empty .)
    MEAN            reduce using rule 28 (fcn3 -> empty .)
    MEDIAN          reduce using rule 28 (fcn3 -> empty .)
    MODE            reduce using rule 28 (fcn3 -> empty .)
    STDV            reduce using rule 28 (fcn3 -> empty .)
    KMEANS          reduce using rule 28 (fcn3 -> empty .)
    DERL            reduce using rule 28 (fcn3 -> empty .)
    DBERN           reduce using rule 28 (fcn3 -> empty .)
    DPOI            reduce using rule 28 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 28 (fcn3 -> empty .)
    INVERSE         reduce using rule 28 (fcn3 -> empty .)
    ROTATE          reduce using rule 28 (fcn3 -> empty .)
    REF             reduce using rule 28 (fcn3 -> empty .)
    RREF            reduce using rule 28 (fcn3 -> empty .)
    MONT            reduce using rule 28 (fcn3 -> empty .)
    EULER           reduce using rule 28 (fcn3 -> empty .)
    DO              reduce using rule 28 (fcn3 -> empty .)
    READ            reduce using rule 28 (fcn3 -> empty .)
    CBRACKET        reduce using rule 28 (fcn3 -> empty .)


state 362

    (81) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MONT            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    EULER           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 363

    (84) cn2 -> empty .

    ID              reduce using rule 84 (cn2 -> empty .)
    IF              reduce using rule 84 (cn2 -> empty .)
    PRINT           reduce using rule 84 (cn2 -> empty .)
    PLOT            reduce using rule 84 (cn2 -> empty .)
    COUNT           reduce using rule 84 (cn2 -> empty .)
    COUNTIF         reduce using rule 84 (cn2 -> empty .)
    MEAN            reduce using rule 84 (cn2 -> empty .)
    MEDIAN          reduce using rule 84 (cn2 -> empty .)
    MODE            reduce using rule 84 (cn2 -> empty .)
    STDV            reduce using rule 84 (cn2 -> empty .)
    KMEANS          reduce using rule 84 (cn2 -> empty .)
    DERL            reduce using rule 84 (cn2 -> empty .)
    DBERN           reduce using rule 84 (cn2 -> empty .)
    DPOI            reduce using rule 84 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 84 (cn2 -> empty .)
    INVERSE         reduce using rule 84 (cn2 -> empty .)
    ROTATE          reduce using rule 84 (cn2 -> empty .)
    REF             reduce using rule 84 (cn2 -> empty .)
    RREF            reduce using rule 84 (cn2 -> empty .)
    MONT            reduce using rule 84 (cn2 -> empty .)
    EULER           reduce using rule 84 (cn2 -> empty .)
    DO              reduce using rule 84 (cn2 -> empty .)
    READ            reduce using rule 84 (cn2 -> empty .)
    CBRACKET        reduce using rule 84 (cn2 -> empty .)
    CPAREN          reduce using rule 84 (cn2 -> empty .)


state 364

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (86) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 307

    ifblock                        shift and go to state 379

state 365

    (85) cn3 -> empty .

    OBRACKET        reduce using rule 85 (cn3 -> empty .)


state 366

    (86) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 86 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 86 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 367

    (88) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 88 (ifblock2 -> estatuto ifblock2 .)


state 368

    (95) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (94) plot2 -> . LCOR varcte COMMA varcte RCOR
    (95) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (96) plot2 -> . empty
    (152) empty -> .

    LCOR            shift and go to state 156
    CPAREN          reduce using rule 152 (empty -> .)

    plot2                          shift and go to state 380
    empty                          shift and go to state 381

state 369

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 382


state 370

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 61

    cond                           shift and go to state 383

state 371

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 384


state 372

    (117) wn2 -> empty .

    SCOLON          reduce using rule 117 (wn2 -> empty .)


state 373

    (120) dwhileconds -> expresion AND dwhileconds .

    CPAREN          reduce using rule 120 (dwhileconds -> expresion AND dwhileconds .)


state 374

    (121) dwhileconds -> expresion OR dwhileconds .

    CPAREN          reduce using rule 121 (dwhileconds -> expresion OR dwhileconds .)


state 375

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (34) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 386

    funblock                       shift and go to state 385

state 376

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 377

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 378

    (29) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 29 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 379

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 387


state 380

    (95) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 95 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 381

    (96) plot2 -> empty .

    CPAREN          reduce using rule 96 (plot2 -> empty .)


state 382

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MONT            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    EULER           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 383

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 388


state 384

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MONT            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    EULER           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 385

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (152) empty -> .

    FUNC            reduce using rule 152 (empty -> .)
    OBRACKET        reduce using rule 152 (empty -> .)

    mn7                            shift and go to state 389
    empty                          shift and go to state 390

state 386

    (34) funblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (152) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (125) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (126) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (127) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (128) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (129) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (130) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (131) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (132) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (133) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (137) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (138) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 152 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    block2                         shift and go to state 391
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 387

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (84) cn2 -> . empty
    (152) empty -> .

    ID              reduce using rule 152 (empty -> .)
    IF              reduce using rule 152 (empty -> .)
    PRINT           reduce using rule 152 (empty -> .)
    PLOT            reduce using rule 152 (empty -> .)
    COUNT           reduce using rule 152 (empty -> .)
    COUNTIF         reduce using rule 152 (empty -> .)
    MEAN            reduce using rule 152 (empty -> .)
    MEDIAN          reduce using rule 152 (empty -> .)
    MODE            reduce using rule 152 (empty -> .)
    STDV            reduce using rule 152 (empty -> .)
    KMEANS          reduce using rule 152 (empty -> .)
    DERL            reduce using rule 152 (empty -> .)
    DBERN           reduce using rule 152 (empty -> .)
    DPOI            reduce using rule 152 (empty -> .)
    TRANSPOSE       reduce using rule 152 (empty -> .)
    INVERSE         reduce using rule 152 (empty -> .)
    ROTATE          reduce using rule 152 (empty -> .)
    REF             reduce using rule 152 (empty -> .)
    RREF            reduce using rule 152 (empty -> .)
    MONT            reduce using rule 152 (empty -> .)
    EULER           reduce using rule 152 (empty -> .)
    DO              reduce using rule 152 (empty -> .)
    READ            reduce using rule 152 (empty -> .)
    CBRACKET        reduce using rule 152 (empty -> .)
    CPAREN          reduce using rule 152 (empty -> .)

    cn2                            shift and go to state 392
    empty                          shift and go to state 363

state 388

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 393


state 389

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 390

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 391

    (34) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 394


state 392

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MONT            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    EULER           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 393

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MONT            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    EULER           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 394

    (34) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 36 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 38 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 142 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 150 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 160 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 168 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 172 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 188 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 189 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 192 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 194 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 252 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 265 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 265 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 266 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 313 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 48 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 148 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 148
WARNING: reduce/reduce conflict in state 155 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 155
WARNING: reduce/reduce conflict in state 196 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 196
WARNING: reduce/reduce conflict in state 246 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 246
WARNING: reduce/reduce conflict in state 265 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 265
WARNING: reduce/reduce conflict in state 337 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 337
WARNING: reduce/reduce conflict in state 357 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 357
