Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    MONT
    OR
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
Rule 26    fcn1 -> empty
Rule 27    fcn2 -> empty
Rule 28    fcn3 -> empty
Rule 29    funccall2 -> COMMA expresion fcn2 funccall2
Rule 30    funccall2 -> ID fcn2 funccall2
Rule 31    funccall2 -> empty
Rule 32    modules2 -> vars
Rule 33    modules2 -> empty
Rule 34    funblock -> OBRACKET block2 CBRACKET
Rule 35    block -> OBRACKET block2 CBRACKET
Rule 36    block2 -> estatuto
Rule 37    block2 -> estatuto block2
Rule 38    block2 -> empty
Rule 39    tipo -> INT
Rule 40    tipo -> BOOL
Rule 41    tipo -> DOUBLE
Rule 42    tipo -> STRING
Rule 43    tipo -> CHAR
Rule 44    tipo -> VOID
Rule 45    estatuto -> asign
Rule 46    estatuto -> cond
Rule 47    estatuto -> escrt
Rule 48    estatuto -> plot
Rule 49    estatuto -> count
Rule 50    estatuto -> countif
Rule 51    estatuto -> metodos
Rule 52    estatuto -> dwhile
Rule 53    estatuto -> readln
Rule 54    estatuto -> funccall
Rule 55    estatuto -> regreso
Rule 56    regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON
Rule 57    regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON
Rule 58    regnum1 -> <empty>
Rule 59    regnum2 -> <empty>
Rule 60    afcn1 -> empty
Rule 61    asign -> ID EQUALS expresion SCOLON
Rule 62    asign -> ID EQUALS ID SCOLON
Rule 63    asign -> ID EQUALS ID asign2 SCOLON
Rule 64    asign -> ID asign2 EQUALS ID SCOLON
Rule 65    asign -> ID asign2 EQUALS expresion SCOLON
Rule 66    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 67    asign -> ID EQUALS funccall afcn1
Rule 68    asign2 -> LCOR expresion RCOR LCOR varcte RCOR
Rule 69    asign2 -> LCOR expresion RCOR LCOR expresion RCOR
Rule 70    asign2 -> LCOR varcte RCOR LCOR expresion RCOR
Rule 71    asign2 -> LCOR varcte RCOR LCOR varcte RCOR
Rule 72    asign2 -> LCOR expresion RCOR
Rule 73    asign2 -> LCOR varcte RCOR
Rule 74    asign3 -> LCOR expresion RCOR
Rule 75    asign3 -> LCOR varcte RCOR
Rule 76    asign3 -> empty
Rule 77    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 78    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 79    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 80    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 81    escrt2 -> COMMA escrt3
Rule 82    escrt2 -> empty
Rule 83    escrt3 -> ID escrt2
Rule 84    escrt3 -> ID
Rule 85    escrt3 -> STRING escrt2 escrt2
Rule 86    en1 -> empty
Rule 87    en2 -> empty
Rule 88    en3 -> empty
Rule 89    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 90    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 91    cn1 -> empty
Rule 92    cn2 -> empty
Rule 93    cn3 -> empty
Rule 94    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 95    ifblock2 -> estatuto
Rule 96    ifblock2 -> estatuto ifblock2
Rule 97    ifblock2 -> empty
Rule 98    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 99    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 100   plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 101   plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 102   plot2 -> LCOR varcte COMMA varcte RCOR
Rule 103   plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 104   plot2 -> empty
Rule 105   xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 106   xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 107   xyfunc -> empty
Rule 108   expresion -> exp
Rule 109   expresion -> expresion RELOP exp
Rule 110   exp -> termino
Rule 111   exp -> termino PLUS exp
Rule 112   exp -> termino MINUS exp
Rule 113   termino -> factor
Rule 114   termino -> factor MULT termino
Rule 115   termino -> factor DIV termino
Rule 116   factor -> OPAREN expresion CPAREN
Rule 117   factor -> varcte
Rule 118   varcte -> ID
Rule 119   varcte -> ID asign2
Rule 120   varcte -> NUMERIC
Rule 121   varcte -> NUMBER
Rule 122   varcte -> LOGICAL
Rule 123   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 124   wn1 -> empty
Rule 125   wn2 -> empty
Rule 126   wblock -> OBRACKET block2 CBRACKET
Rule 127   dwhileconds -> expresion dwhileconds
Rule 128   dwhileconds -> empty
Rule 129   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 130   rn1 -> empty
Rule 131   metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON
Rule 132   metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
Rule 133   metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON
Rule 134   metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON
Rule 135   metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON
Rule 136   metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON
Rule 137   metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
Rule 138   metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
Rule 139   metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
Rule 140   metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
Rule 141   metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
Rule 142   metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON
Rule 143   metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON
Rule 144   metodos -> EULER tp6 OPAREN CPAREN SCOLON
Rule 145   fe1 -> empty
Rule 146   fe2 -> empty
Rule 147   fe3 -> empty
Rule 148   fe4 -> empty
Rule 149   fe5 -> empty
Rule 150   kval -> varcte COMMA arrfun2 COMMA arrfun3
Rule 151   arrfun -> LCOR datasetarr RCOR
Rule 152   arrfun2 -> LCOR datasetarr RCOR
Rule 153   arrfun3 -> LCOR datasetarr2 RCOR
Rule 154   datasetarr -> varcte
Rule 155   datasetarr -> varcte COMMA datasetarr
Rule 156   datasetarr2 -> varcte
Rule 157   datasetarr2 -> varcte COMMA datasetarr2
Rule 158   dmn1 -> empty
Rule 159   dbrn1 -> empty
Rule 160   dp1 -> empty
Rule 161   tp1 -> empty
Rule 162   tp2 -> empty
Rule 163   tp3 -> empty
Rule 164   tp4 -> empty
Rule 165   tp5 -> empty
Rule 166   tp6 -> empty
Rule 167   expfunc -> ID COMMA ID COMMA ID
Rule 168   expfunc -> varcte COMMA varcte COMMA varcte
Rule 169   expfunc2 -> ID COMMA ID
Rule 170   expfunc2 -> varcte COMMA varcte
Rule 171   mmmfunc -> LCOR RCOR
Rule 172   mmmfunc -> LCOR mmmarray RCOR
Rule 173   mmmfunc -> ID
Rule 174   mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray
Rule 175   mmmarray -> libero LCOR datasetarr4 RCOR
Rule 176   libero -> empty
Rule 177   datasetarr4 -> varcte
Rule 178   datasetarr4 -> varcte COMMA datasetarr4
Rule 179   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 40
CBRACKET             : 34 35 94 126
CHAR                 : 43
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 29 81 98 98 99 99 99 102 103 103 150 150 155 157 167 167 168 168 169 170 174 178
COMMENT              : 
COUNT                : 98
COUNTIF              : 99
CPAREN               : 19 24 25 56 57 77 78 79 80 89 90 98 99 100 101 116 123 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144
CTED                 : 
CTEI                 : 
DBERN                : 137
DERL                 : 136
DIFF                 : 
DIV                  : 115
DO                   : 123
DOUBLE               : 41
DPOI                 : 138
ELSE                 : 90
EQ                   : 
EQUALS               : 61 62 63 64 65 66 67 105 106
EULER                : 144
FUNC                 : 19
FX                   : 105
FY                   : 106
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 25 25 30 56 61 62 62 63 63 64 64 65 66 66 67 77 83 84 98 99 118 119 129 167 167 167 169 169 173
IF                   : 89 90
INT                  : 39
INTEGER              : 
INVERSE              : 140
KMEANS               : 135
LCOR                 : 12 13 14 14 15 15 68 68 69 69 70 70 71 71 72 73 74 75 102 103 151 152 153 171 172 174 175
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 122
LUGSTAT              : 1
MEAN                 : 131
MEDIAN               : 132
MINUS                : 112
MODE                 : 133
MONT                 : 
MULT                 : 114
NUMBER               : 12 13 14 14 15 15 121
NUMERIC              : 120
OBRACKET             : 34 35 94 126
OPAREN               : 19 24 25 56 57 77 78 79 80 89 90 98 99 100 101 116 123 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144
OR                   : 
PER                  : 
PLOT                 : 100 101
PLUS                 : 111
PRINT                : 77 78 79 80
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 68 68 69 69 70 70 71 71 72 73 74 75 102 103 151 152 153 171 172 174 175
READ                 : 129
REF                  : 142
RELOP                : 109
RETURN               : 56 57
ROTATE               : 141
RREF                 : 143
SCOLON               : 1 11 12 13 14 15 16 56 57 61 62 63 64 65 66 77 78 79 80 89 90 98 99 100 101 105 106 123 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144
STDV                 : 134
STRING               : 42 79 80 85
TIPO                 : 
TRANSPOSE            : 139
VAR                  : 9
VOID                 : 44
WHILE                : 123
error                : 

Nonterminals, with rules where they appear

addmain              : 1
afcn1                : 67
arrfun               : 131 132 133 134
arrfun2              : 150
arrfun3              : 150
asign                : 45
asign2               : 16 17 63 64 65 66 66 119
asign3               : 
block                : 1
block2               : 34 35 37 126
cn1                  : 89 90
cn2                  : 89 90
cn3                  : 90
cond                 : 46 99
count                : 49
countif              : 50
datasetarr           : 151 152 155
datasetarr2          : 153 157
datasetarr4          : 174 175 178
dbrn1                : 137
dmn1                 : 136
dp1                  : 138
dwhile               : 52
dwhileconds          : 123 127
empty                : 2 3 5 8 18 20 21 23 26 27 28 31 33 38 60 76 82 86 87 88 91 92 93 97 104 107 124 125 128 130 145 146 147 148 149 158 159 160 161 162 163 164 165 166 176
en1                  : 78
en2                  : 79 80
en3                  : 77
escrt                : 47
escrt2               : 77 80 83 85 85
escrt3               : 81
estatuto             : 36 37 95 96
exp                  : 105 106 108 109 111 112
expfunc              : 136
expfunc2             : 137 138
expresion            : 24 29 57 61 65 68 69 69 70 72 74 78 89 90 109 116 127
factor               : 113 114 115
fcn1                 : 24 25
fcn2                 : 24 25 29 30
fcn3                 : 24
fe1                  : 131
fe2                  : 132
fe3                  : 133
fe4                  : 134
fe5                  : 135
funblock             : 19
funccall             : 54 67
funccall2            : 24 25 29 30
ifblock              : 89 90 90
ifblock2             : 94 96
kval                 : 135
libero               : 174 175
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 51
mmmarray             : 172 174
mmmfunc              : 139 140 141 142 143
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 48
plot2                : 101 103
readln               : 53
regnum1              : 56
regnum2              : 57
regreso              : 55
rn1                  : 129
savename             : 
termino              : 110 111 112 114 115
tipo                 : 11 12 13 14 15 16 19
tp1                  : 139
tp2                  : 140
tp3                  : 141
tp4                  : 142
tp5                  : 143
tp6                  : 144
varcte               : 68 70 71 71 73 75 98 98 99 99 102 102 103 103 117 150 154 155 156 157 168 168 168 170 170 177 178
vars                 : 4 32
vars1                : 9 10 17
wblock               : 123
wn1                  : 123
wn2                  : 123
xyfunc               : 100 105 106

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (179) empty -> .

    VAR             reduce using rule 179 (empty -> .)
    FUNC            reduce using rule 179 (empty -> .)
    OBRACKET        reduce using rule 179 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (179) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 179 (empty -> .)
    OBRACKET        reduce using rule 179 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (179) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 179 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (179) empty -> .

    OBRACKET        reduce using rule 179 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (179) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 179 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (35) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (68) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (69) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (70) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (71) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (72) asign2 -> LCOR . expresion RCOR
    (73) asign2 -> LCOR . varcte RCOR
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte

    NUMBER          shift and go to state 37
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 38
    varcte                         shift and go to state 39
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 46
    COMMA           shift and go to state 47


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (35) block -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (179) empty -> .
    (61) asign -> . ID EQUALS expresion SCOLON
    (62) asign -> . ID EQUALS ID SCOLON
    (63) asign -> . ID EQUALS ID asign2 SCOLON
    (64) asign -> . ID asign2 EQUALS ID SCOLON
    (65) asign -> . ID asign2 EQUALS expresion SCOLON
    (66) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (67) asign -> . ID EQUALS funccall afcn1
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (100) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (101) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (98) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (99) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (131) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (136) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (137) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (123) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (129) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 179 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    block2                         shift and go to state 48
    estatuto                       shift and go to state 49
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 85

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 86


state 30

    (39) tipo -> INT .

    SCOLON          reduce using rule 39 (tipo -> INT .)
    OPAREN          reduce using rule 39 (tipo -> INT .)


state 31

    (40) tipo -> BOOL .

    SCOLON          reduce using rule 40 (tipo -> BOOL .)
    OPAREN          reduce using rule 40 (tipo -> BOOL .)


state 32

    (41) tipo -> DOUBLE .

    SCOLON          reduce using rule 41 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 41 (tipo -> DOUBLE .)


state 33

    (42) tipo -> STRING .

    SCOLON          reduce using rule 42 (tipo -> STRING .)
    OPAREN          reduce using rule 42 (tipo -> STRING .)


state 34

    (43) tipo -> CHAR .

    SCOLON          reduce using rule 43 (tipo -> CHAR .)
    OPAREN          reduce using rule 43 (tipo -> CHAR .)


state 35

    (44) tipo -> VOID .

    SCOLON          reduce using rule 44 (tipo -> VOID .)
    OPAREN          reduce using rule 44 (tipo -> VOID .)


state 36

    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

    RCOR            reduce using rule 118 (varcte -> ID .)
    MULT            reduce using rule 118 (varcte -> ID .)
    DIV             reduce using rule 118 (varcte -> ID .)
    PLUS            reduce using rule 118 (varcte -> ID .)
    MINUS           reduce using rule 118 (varcte -> ID .)
    RELOP           reduce using rule 118 (varcte -> ID .)
    CPAREN          reduce using rule 118 (varcte -> ID .)
    SCOLON          reduce using rule 118 (varcte -> ID .)
    COMMA           reduce using rule 118 (varcte -> ID .)
    ID              reduce using rule 118 (varcte -> ID .)
    OPAREN          reduce using rule 118 (varcte -> ID .)
    NUMERIC         reduce using rule 118 (varcte -> ID .)
    NUMBER          reduce using rule 118 (varcte -> ID .)
    LOGICAL         reduce using rule 118 (varcte -> ID .)
    LCOR            shift and go to state 88

    asign2                         shift and go to state 87

state 37

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (121) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 89
    MULT            reduce using rule 121 (varcte -> NUMBER .)
    DIV             reduce using rule 121 (varcte -> NUMBER .)
    PLUS            reduce using rule 121 (varcte -> NUMBER .)
    MINUS           reduce using rule 121 (varcte -> NUMBER .)
    RELOP           reduce using rule 121 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 121 (varcte -> NUMBER .) ]


state 38

    (68) asign2 -> LCOR expresion . RCOR LCOR varcte RCOR
    (69) asign2 -> LCOR expresion . RCOR LCOR expresion RCOR
    (72) asign2 -> LCOR expresion . RCOR
    (109) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 90
    RELOP           shift and go to state 91


state 39

    (70) asign2 -> LCOR varcte . RCOR LCOR expresion RCOR
    (71) asign2 -> LCOR varcte . RCOR LCOR varcte RCOR
    (73) asign2 -> LCOR varcte . RCOR
    (117) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 92
    MULT            reduce using rule 117 (factor -> varcte .)
    DIV             reduce using rule 117 (factor -> varcte .)
    PLUS            reduce using rule 117 (factor -> varcte .)
    MINUS           reduce using rule 117 (factor -> varcte .)
    RELOP           reduce using rule 117 (factor -> varcte .)

  ! RCOR            [ reduce using rule 117 (factor -> varcte .) ]


state 40

    (108) expresion -> exp .

    RCOR            reduce using rule 108 (expresion -> exp .)
    RELOP           reduce using rule 108 (expresion -> exp .)
    CPAREN          reduce using rule 108 (expresion -> exp .)
    SCOLON          reduce using rule 108 (expresion -> exp .)
    COMMA           reduce using rule 108 (expresion -> exp .)
    ID              reduce using rule 108 (expresion -> exp .)
    OPAREN          reduce using rule 108 (expresion -> exp .)
    NUMERIC         reduce using rule 108 (expresion -> exp .)
    NUMBER          reduce using rule 108 (expresion -> exp .)
    LOGICAL         reduce using rule 108 (expresion -> exp .)


state 41

    (120) varcte -> NUMERIC .

    RCOR            reduce using rule 120 (varcte -> NUMERIC .)
    MULT            reduce using rule 120 (varcte -> NUMERIC .)
    DIV             reduce using rule 120 (varcte -> NUMERIC .)
    PLUS            reduce using rule 120 (varcte -> NUMERIC .)
    MINUS           reduce using rule 120 (varcte -> NUMERIC .)
    RELOP           reduce using rule 120 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 120 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 120 (varcte -> NUMERIC .)
    COMMA           reduce using rule 120 (varcte -> NUMERIC .)
    ID              reduce using rule 120 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 120 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 120 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 120 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 120 (varcte -> NUMERIC .)


state 42

    (122) varcte -> LOGICAL .

    RCOR            reduce using rule 122 (varcte -> LOGICAL .)
    MULT            reduce using rule 122 (varcte -> LOGICAL .)
    DIV             reduce using rule 122 (varcte -> LOGICAL .)
    PLUS            reduce using rule 122 (varcte -> LOGICAL .)
    MINUS           reduce using rule 122 (varcte -> LOGICAL .)
    RELOP           reduce using rule 122 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 122 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 122 (varcte -> LOGICAL .)
    COMMA           reduce using rule 122 (varcte -> LOGICAL .)
    ID              reduce using rule 122 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 122 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 122 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 122 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 122 (varcte -> LOGICAL .)


state 43

    (110) exp -> termino .
    (111) exp -> termino . PLUS exp
    (112) exp -> termino . MINUS exp

    RCOR            reduce using rule 110 (exp -> termino .)
    RELOP           reduce using rule 110 (exp -> termino .)
    CPAREN          reduce using rule 110 (exp -> termino .)
    SCOLON          reduce using rule 110 (exp -> termino .)
    COMMA           reduce using rule 110 (exp -> termino .)
    ID              reduce using rule 110 (exp -> termino .)
    OPAREN          reduce using rule 110 (exp -> termino .)
    NUMERIC         reduce using rule 110 (exp -> termino .)
    NUMBER          reduce using rule 110 (exp -> termino .)
    LOGICAL         reduce using rule 110 (exp -> termino .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94


state 44

    (113) termino -> factor .
    (114) termino -> factor . MULT termino
    (115) termino -> factor . DIV termino

    PLUS            reduce using rule 113 (termino -> factor .)
    MINUS           reduce using rule 113 (termino -> factor .)
    RCOR            reduce using rule 113 (termino -> factor .)
    RELOP           reduce using rule 113 (termino -> factor .)
    CPAREN          reduce using rule 113 (termino -> factor .)
    SCOLON          reduce using rule 113 (termino -> factor .)
    COMMA           reduce using rule 113 (termino -> factor .)
    ID              reduce using rule 113 (termino -> factor .)
    OPAREN          reduce using rule 113 (termino -> factor .)
    NUMERIC         reduce using rule 113 (termino -> factor .)
    NUMBER          reduce using rule 113 (termino -> factor .)
    LOGICAL         reduce using rule 113 (termino -> factor .)
    MULT            shift and go to state 95
    DIV             shift and go to state 96


state 45

    (116) factor -> OPAREN . expresion CPAREN
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 97
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 46

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 100

state 47

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 101

state 48

    (35) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 102


state 49

    (36) block2 -> estatuto .
    (37) block2 -> estatuto . block2
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (179) empty -> .
    (61) asign -> . ID EQUALS expresion SCOLON
    (62) asign -> . ID EQUALS ID SCOLON
    (63) asign -> . ID EQUALS ID asign2 SCOLON
    (64) asign -> . ID asign2 EQUALS ID SCOLON
    (65) asign -> . ID asign2 EQUALS expresion SCOLON
    (66) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (67) asign -> . ID EQUALS funccall afcn1
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (100) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (101) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (98) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (99) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (131) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (136) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (137) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (123) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (129) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 36 (block2 -> estatuto .)
    CBRACKET        reduce using rule 36 (block2 -> estatuto .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

  ! CBRACKET        [ reduce using rule 179 (empty -> .) ]

    estatuto                       shift and go to state 49
    block2                         shift and go to state 103
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 50

    (38) block2 -> empty .

    CBRACKET        reduce using rule 38 (block2 -> empty .)


state 51

    (45) estatuto -> asign .

    ID              reduce using rule 45 (estatuto -> asign .)
    IF              reduce using rule 45 (estatuto -> asign .)
    PRINT           reduce using rule 45 (estatuto -> asign .)
    PLOT            reduce using rule 45 (estatuto -> asign .)
    COUNT           reduce using rule 45 (estatuto -> asign .)
    COUNTIF         reduce using rule 45 (estatuto -> asign .)
    MEAN            reduce using rule 45 (estatuto -> asign .)
    MEDIAN          reduce using rule 45 (estatuto -> asign .)
    MODE            reduce using rule 45 (estatuto -> asign .)
    STDV            reduce using rule 45 (estatuto -> asign .)
    KMEANS          reduce using rule 45 (estatuto -> asign .)
    DERL            reduce using rule 45 (estatuto -> asign .)
    DBERN           reduce using rule 45 (estatuto -> asign .)
    DPOI            reduce using rule 45 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 45 (estatuto -> asign .)
    INVERSE         reduce using rule 45 (estatuto -> asign .)
    ROTATE          reduce using rule 45 (estatuto -> asign .)
    REF             reduce using rule 45 (estatuto -> asign .)
    RREF            reduce using rule 45 (estatuto -> asign .)
    EULER           reduce using rule 45 (estatuto -> asign .)
    DO              reduce using rule 45 (estatuto -> asign .)
    READ            reduce using rule 45 (estatuto -> asign .)
    RETURN          reduce using rule 45 (estatuto -> asign .)
    CBRACKET        reduce using rule 45 (estatuto -> asign .)


state 52

    (46) estatuto -> cond .

    ID              reduce using rule 46 (estatuto -> cond .)
    IF              reduce using rule 46 (estatuto -> cond .)
    PRINT           reduce using rule 46 (estatuto -> cond .)
    PLOT            reduce using rule 46 (estatuto -> cond .)
    COUNT           reduce using rule 46 (estatuto -> cond .)
    COUNTIF         reduce using rule 46 (estatuto -> cond .)
    MEAN            reduce using rule 46 (estatuto -> cond .)
    MEDIAN          reduce using rule 46 (estatuto -> cond .)
    MODE            reduce using rule 46 (estatuto -> cond .)
    STDV            reduce using rule 46 (estatuto -> cond .)
    KMEANS          reduce using rule 46 (estatuto -> cond .)
    DERL            reduce using rule 46 (estatuto -> cond .)
    DBERN           reduce using rule 46 (estatuto -> cond .)
    DPOI            reduce using rule 46 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 46 (estatuto -> cond .)
    INVERSE         reduce using rule 46 (estatuto -> cond .)
    ROTATE          reduce using rule 46 (estatuto -> cond .)
    REF             reduce using rule 46 (estatuto -> cond .)
    RREF            reduce using rule 46 (estatuto -> cond .)
    EULER           reduce using rule 46 (estatuto -> cond .)
    DO              reduce using rule 46 (estatuto -> cond .)
    READ            reduce using rule 46 (estatuto -> cond .)
    RETURN          reduce using rule 46 (estatuto -> cond .)
    CBRACKET        reduce using rule 46 (estatuto -> cond .)


state 53

    (47) estatuto -> escrt .

    ID              reduce using rule 47 (estatuto -> escrt .)
    IF              reduce using rule 47 (estatuto -> escrt .)
    PRINT           reduce using rule 47 (estatuto -> escrt .)
    PLOT            reduce using rule 47 (estatuto -> escrt .)
    COUNT           reduce using rule 47 (estatuto -> escrt .)
    COUNTIF         reduce using rule 47 (estatuto -> escrt .)
    MEAN            reduce using rule 47 (estatuto -> escrt .)
    MEDIAN          reduce using rule 47 (estatuto -> escrt .)
    MODE            reduce using rule 47 (estatuto -> escrt .)
    STDV            reduce using rule 47 (estatuto -> escrt .)
    KMEANS          reduce using rule 47 (estatuto -> escrt .)
    DERL            reduce using rule 47 (estatuto -> escrt .)
    DBERN           reduce using rule 47 (estatuto -> escrt .)
    DPOI            reduce using rule 47 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 47 (estatuto -> escrt .)
    INVERSE         reduce using rule 47 (estatuto -> escrt .)
    ROTATE          reduce using rule 47 (estatuto -> escrt .)
    REF             reduce using rule 47 (estatuto -> escrt .)
    RREF            reduce using rule 47 (estatuto -> escrt .)
    EULER           reduce using rule 47 (estatuto -> escrt .)
    DO              reduce using rule 47 (estatuto -> escrt .)
    READ            reduce using rule 47 (estatuto -> escrt .)
    RETURN          reduce using rule 47 (estatuto -> escrt .)
    CBRACKET        reduce using rule 47 (estatuto -> escrt .)


state 54

    (48) estatuto -> plot .

    ID              reduce using rule 48 (estatuto -> plot .)
    IF              reduce using rule 48 (estatuto -> plot .)
    PRINT           reduce using rule 48 (estatuto -> plot .)
    PLOT            reduce using rule 48 (estatuto -> plot .)
    COUNT           reduce using rule 48 (estatuto -> plot .)
    COUNTIF         reduce using rule 48 (estatuto -> plot .)
    MEAN            reduce using rule 48 (estatuto -> plot .)
    MEDIAN          reduce using rule 48 (estatuto -> plot .)
    MODE            reduce using rule 48 (estatuto -> plot .)
    STDV            reduce using rule 48 (estatuto -> plot .)
    KMEANS          reduce using rule 48 (estatuto -> plot .)
    DERL            reduce using rule 48 (estatuto -> plot .)
    DBERN           reduce using rule 48 (estatuto -> plot .)
    DPOI            reduce using rule 48 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 48 (estatuto -> plot .)
    INVERSE         reduce using rule 48 (estatuto -> plot .)
    ROTATE          reduce using rule 48 (estatuto -> plot .)
    REF             reduce using rule 48 (estatuto -> plot .)
    RREF            reduce using rule 48 (estatuto -> plot .)
    EULER           reduce using rule 48 (estatuto -> plot .)
    DO              reduce using rule 48 (estatuto -> plot .)
    READ            reduce using rule 48 (estatuto -> plot .)
    RETURN          reduce using rule 48 (estatuto -> plot .)
    CBRACKET        reduce using rule 48 (estatuto -> plot .)


state 55

    (49) estatuto -> count .

    ID              reduce using rule 49 (estatuto -> count .)
    IF              reduce using rule 49 (estatuto -> count .)
    PRINT           reduce using rule 49 (estatuto -> count .)
    PLOT            reduce using rule 49 (estatuto -> count .)
    COUNT           reduce using rule 49 (estatuto -> count .)
    COUNTIF         reduce using rule 49 (estatuto -> count .)
    MEAN            reduce using rule 49 (estatuto -> count .)
    MEDIAN          reduce using rule 49 (estatuto -> count .)
    MODE            reduce using rule 49 (estatuto -> count .)
    STDV            reduce using rule 49 (estatuto -> count .)
    KMEANS          reduce using rule 49 (estatuto -> count .)
    DERL            reduce using rule 49 (estatuto -> count .)
    DBERN           reduce using rule 49 (estatuto -> count .)
    DPOI            reduce using rule 49 (estatuto -> count .)
    TRANSPOSE       reduce using rule 49 (estatuto -> count .)
    INVERSE         reduce using rule 49 (estatuto -> count .)
    ROTATE          reduce using rule 49 (estatuto -> count .)
    REF             reduce using rule 49 (estatuto -> count .)
    RREF            reduce using rule 49 (estatuto -> count .)
    EULER           reduce using rule 49 (estatuto -> count .)
    DO              reduce using rule 49 (estatuto -> count .)
    READ            reduce using rule 49 (estatuto -> count .)
    RETURN          reduce using rule 49 (estatuto -> count .)
    CBRACKET        reduce using rule 49 (estatuto -> count .)


state 56

    (50) estatuto -> countif .

    ID              reduce using rule 50 (estatuto -> countif .)
    IF              reduce using rule 50 (estatuto -> countif .)
    PRINT           reduce using rule 50 (estatuto -> countif .)
    PLOT            reduce using rule 50 (estatuto -> countif .)
    COUNT           reduce using rule 50 (estatuto -> countif .)
    COUNTIF         reduce using rule 50 (estatuto -> countif .)
    MEAN            reduce using rule 50 (estatuto -> countif .)
    MEDIAN          reduce using rule 50 (estatuto -> countif .)
    MODE            reduce using rule 50 (estatuto -> countif .)
    STDV            reduce using rule 50 (estatuto -> countif .)
    KMEANS          reduce using rule 50 (estatuto -> countif .)
    DERL            reduce using rule 50 (estatuto -> countif .)
    DBERN           reduce using rule 50 (estatuto -> countif .)
    DPOI            reduce using rule 50 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 50 (estatuto -> countif .)
    INVERSE         reduce using rule 50 (estatuto -> countif .)
    ROTATE          reduce using rule 50 (estatuto -> countif .)
    REF             reduce using rule 50 (estatuto -> countif .)
    RREF            reduce using rule 50 (estatuto -> countif .)
    EULER           reduce using rule 50 (estatuto -> countif .)
    DO              reduce using rule 50 (estatuto -> countif .)
    READ            reduce using rule 50 (estatuto -> countif .)
    RETURN          reduce using rule 50 (estatuto -> countif .)
    CBRACKET        reduce using rule 50 (estatuto -> countif .)


state 57

    (51) estatuto -> metodos .

    ID              reduce using rule 51 (estatuto -> metodos .)
    IF              reduce using rule 51 (estatuto -> metodos .)
    PRINT           reduce using rule 51 (estatuto -> metodos .)
    PLOT            reduce using rule 51 (estatuto -> metodos .)
    COUNT           reduce using rule 51 (estatuto -> metodos .)
    COUNTIF         reduce using rule 51 (estatuto -> metodos .)
    MEAN            reduce using rule 51 (estatuto -> metodos .)
    MEDIAN          reduce using rule 51 (estatuto -> metodos .)
    MODE            reduce using rule 51 (estatuto -> metodos .)
    STDV            reduce using rule 51 (estatuto -> metodos .)
    KMEANS          reduce using rule 51 (estatuto -> metodos .)
    DERL            reduce using rule 51 (estatuto -> metodos .)
    DBERN           reduce using rule 51 (estatuto -> metodos .)
    DPOI            reduce using rule 51 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 51 (estatuto -> metodos .)
    INVERSE         reduce using rule 51 (estatuto -> metodos .)
    ROTATE          reduce using rule 51 (estatuto -> metodos .)
    REF             reduce using rule 51 (estatuto -> metodos .)
    RREF            reduce using rule 51 (estatuto -> metodos .)
    EULER           reduce using rule 51 (estatuto -> metodos .)
    DO              reduce using rule 51 (estatuto -> metodos .)
    READ            reduce using rule 51 (estatuto -> metodos .)
    RETURN          reduce using rule 51 (estatuto -> metodos .)
    CBRACKET        reduce using rule 51 (estatuto -> metodos .)


state 58

    (52) estatuto -> dwhile .

    ID              reduce using rule 52 (estatuto -> dwhile .)
    IF              reduce using rule 52 (estatuto -> dwhile .)
    PRINT           reduce using rule 52 (estatuto -> dwhile .)
    PLOT            reduce using rule 52 (estatuto -> dwhile .)
    COUNT           reduce using rule 52 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 52 (estatuto -> dwhile .)
    MEAN            reduce using rule 52 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 52 (estatuto -> dwhile .)
    MODE            reduce using rule 52 (estatuto -> dwhile .)
    STDV            reduce using rule 52 (estatuto -> dwhile .)
    KMEANS          reduce using rule 52 (estatuto -> dwhile .)
    DERL            reduce using rule 52 (estatuto -> dwhile .)
    DBERN           reduce using rule 52 (estatuto -> dwhile .)
    DPOI            reduce using rule 52 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 52 (estatuto -> dwhile .)
    INVERSE         reduce using rule 52 (estatuto -> dwhile .)
    ROTATE          reduce using rule 52 (estatuto -> dwhile .)
    REF             reduce using rule 52 (estatuto -> dwhile .)
    RREF            reduce using rule 52 (estatuto -> dwhile .)
    EULER           reduce using rule 52 (estatuto -> dwhile .)
    DO              reduce using rule 52 (estatuto -> dwhile .)
    READ            reduce using rule 52 (estatuto -> dwhile .)
    RETURN          reduce using rule 52 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 52 (estatuto -> dwhile .)


state 59

    (53) estatuto -> readln .

    ID              reduce using rule 53 (estatuto -> readln .)
    IF              reduce using rule 53 (estatuto -> readln .)
    PRINT           reduce using rule 53 (estatuto -> readln .)
    PLOT            reduce using rule 53 (estatuto -> readln .)
    COUNT           reduce using rule 53 (estatuto -> readln .)
    COUNTIF         reduce using rule 53 (estatuto -> readln .)
    MEAN            reduce using rule 53 (estatuto -> readln .)
    MEDIAN          reduce using rule 53 (estatuto -> readln .)
    MODE            reduce using rule 53 (estatuto -> readln .)
    STDV            reduce using rule 53 (estatuto -> readln .)
    KMEANS          reduce using rule 53 (estatuto -> readln .)
    DERL            reduce using rule 53 (estatuto -> readln .)
    DBERN           reduce using rule 53 (estatuto -> readln .)
    DPOI            reduce using rule 53 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 53 (estatuto -> readln .)
    INVERSE         reduce using rule 53 (estatuto -> readln .)
    ROTATE          reduce using rule 53 (estatuto -> readln .)
    REF             reduce using rule 53 (estatuto -> readln .)
    RREF            reduce using rule 53 (estatuto -> readln .)
    EULER           reduce using rule 53 (estatuto -> readln .)
    DO              reduce using rule 53 (estatuto -> readln .)
    READ            reduce using rule 53 (estatuto -> readln .)
    RETURN          reduce using rule 53 (estatuto -> readln .)
    CBRACKET        reduce using rule 53 (estatuto -> readln .)


state 60

    (54) estatuto -> funccall .

    ID              reduce using rule 54 (estatuto -> funccall .)
    IF              reduce using rule 54 (estatuto -> funccall .)
    PRINT           reduce using rule 54 (estatuto -> funccall .)
    PLOT            reduce using rule 54 (estatuto -> funccall .)
    COUNT           reduce using rule 54 (estatuto -> funccall .)
    COUNTIF         reduce using rule 54 (estatuto -> funccall .)
    MEAN            reduce using rule 54 (estatuto -> funccall .)
    MEDIAN          reduce using rule 54 (estatuto -> funccall .)
    MODE            reduce using rule 54 (estatuto -> funccall .)
    STDV            reduce using rule 54 (estatuto -> funccall .)
    KMEANS          reduce using rule 54 (estatuto -> funccall .)
    DERL            reduce using rule 54 (estatuto -> funccall .)
    DBERN           reduce using rule 54 (estatuto -> funccall .)
    DPOI            reduce using rule 54 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 54 (estatuto -> funccall .)
    INVERSE         reduce using rule 54 (estatuto -> funccall .)
    ROTATE          reduce using rule 54 (estatuto -> funccall .)
    REF             reduce using rule 54 (estatuto -> funccall .)
    RREF            reduce using rule 54 (estatuto -> funccall .)
    EULER           reduce using rule 54 (estatuto -> funccall .)
    DO              reduce using rule 54 (estatuto -> funccall .)
    READ            reduce using rule 54 (estatuto -> funccall .)
    RETURN          reduce using rule 54 (estatuto -> funccall .)
    CBRACKET        reduce using rule 54 (estatuto -> funccall .)


state 61

    (55) estatuto -> regreso .

    ID              reduce using rule 55 (estatuto -> regreso .)
    IF              reduce using rule 55 (estatuto -> regreso .)
    PRINT           reduce using rule 55 (estatuto -> regreso .)
    PLOT            reduce using rule 55 (estatuto -> regreso .)
    COUNT           reduce using rule 55 (estatuto -> regreso .)
    COUNTIF         reduce using rule 55 (estatuto -> regreso .)
    MEAN            reduce using rule 55 (estatuto -> regreso .)
    MEDIAN          reduce using rule 55 (estatuto -> regreso .)
    MODE            reduce using rule 55 (estatuto -> regreso .)
    STDV            reduce using rule 55 (estatuto -> regreso .)
    KMEANS          reduce using rule 55 (estatuto -> regreso .)
    DERL            reduce using rule 55 (estatuto -> regreso .)
    DBERN           reduce using rule 55 (estatuto -> regreso .)
    DPOI            reduce using rule 55 (estatuto -> regreso .)
    TRANSPOSE       reduce using rule 55 (estatuto -> regreso .)
    INVERSE         reduce using rule 55 (estatuto -> regreso .)
    ROTATE          reduce using rule 55 (estatuto -> regreso .)
    REF             reduce using rule 55 (estatuto -> regreso .)
    RREF            reduce using rule 55 (estatuto -> regreso .)
    EULER           reduce using rule 55 (estatuto -> regreso .)
    DO              reduce using rule 55 (estatuto -> regreso .)
    READ            reduce using rule 55 (estatuto -> regreso .)
    RETURN          reduce using rule 55 (estatuto -> regreso .)
    CBRACKET        reduce using rule 55 (estatuto -> regreso .)


state 62

    (61) asign -> ID . EQUALS expresion SCOLON
    (62) asign -> ID . EQUALS ID SCOLON
    (63) asign -> ID . EQUALS ID asign2 SCOLON
    (64) asign -> ID . asign2 EQUALS ID SCOLON
    (65) asign -> ID . asign2 EQUALS expresion SCOLON
    (66) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (67) asign -> ID . EQUALS funccall afcn1
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

    EQUALS          shift and go to state 104
    OPAREN          shift and go to state 106
    LCOR            shift and go to state 88

    asign2                         shift and go to state 105

state 63

    (89) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 107


state 64

    (77) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 108


state 65

    (100) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (101) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 109


state 66

    (98) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 110


state 67

    (99) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 111


state 68

    (131) metodos -> MEAN . fe1 OPAREN arrfun CPAREN SCOLON
    (145) fe1 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    fe1                            shift and go to state 112
    empty                          shift and go to state 113

state 69

    (132) metodos -> MEDIAN . fe2 OPAREN arrfun CPAREN SCOLON
    (146) fe2 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    fe2                            shift and go to state 114
    empty                          shift and go to state 115

state 70

    (133) metodos -> MODE . fe3 OPAREN arrfun CPAREN SCOLON
    (147) fe3 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    fe3                            shift and go to state 116
    empty                          shift and go to state 117

state 71

    (134) metodos -> STDV . fe4 OPAREN arrfun CPAREN SCOLON
    (148) fe4 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    fe4                            shift and go to state 118
    empty                          shift and go to state 119

state 72

    (135) metodos -> KMEANS . fe5 OPAREN kval CPAREN SCOLON
    (149) fe5 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    fe5                            shift and go to state 120
    empty                          shift and go to state 121

state 73

    (136) metodos -> DERL . dmn1 OPAREN expfunc CPAREN SCOLON
    (158) dmn1 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    dmn1                           shift and go to state 122
    empty                          shift and go to state 123

state 74

    (137) metodos -> DBERN . dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (159) dbrn1 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    dbrn1                          shift and go to state 124
    empty                          shift and go to state 125

state 75

    (138) metodos -> DPOI . dp1 OPAREN expfunc2 CPAREN SCOLON
    (160) dp1 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    dp1                            shift and go to state 126
    empty                          shift and go to state 127

state 76

    (139) metodos -> TRANSPOSE . tp1 OPAREN mmmfunc CPAREN SCOLON
    (161) tp1 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    tp1                            shift and go to state 128
    empty                          shift and go to state 129

state 77

    (140) metodos -> INVERSE . tp2 OPAREN mmmfunc CPAREN SCOLON
    (162) tp2 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    tp2                            shift and go to state 130
    empty                          shift and go to state 131

state 78

    (141) metodos -> ROTATE . tp3 OPAREN mmmfunc CPAREN SCOLON
    (163) tp3 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    tp3                            shift and go to state 132
    empty                          shift and go to state 133

state 79

    (142) metodos -> REF . tp4 OPAREN mmmfunc CPAREN SCOLON
    (164) tp4 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    tp4                            shift and go to state 134
    empty                          shift and go to state 135

state 80

    (143) metodos -> RREF . tp5 OPAREN mmmfunc CPAREN SCOLON
    (165) tp5 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    tp5                            shift and go to state 136
    empty                          shift and go to state 137

state 81

    (144) metodos -> EULER . tp6 OPAREN CPAREN SCOLON
    (166) tp6 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    tp6                            shift and go to state 138
    empty                          shift and go to state 139

state 82

    (123) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (124) wn1 -> . empty
    (179) empty -> .

    OBRACKET        reduce using rule 179 (empty -> .)

    wn1                            shift and go to state 140
    empty                          shift and go to state 141

state 83

    (129) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 142


state 84

    (56) regreso -> RETURN . OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> RETURN . OPAREN expresion regnum2 CPAREN SCOLON

    OPAREN          shift and go to state 143


state 85

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (179) empty -> .

    OPAREN          reduce using rule 179 (empty -> .)

    mn1                            shift and go to state 144
    empty                          shift and go to state 145

state 86

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (179) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 179 (empty -> .)
    OBRACKET        reduce using rule 179 (empty -> .)
    CPAREN          reduce using rule 179 (empty -> .)

    lugstat2                       shift and go to state 146
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 87

    (119) varcte -> ID asign2 .

    RCOR            reduce using rule 119 (varcte -> ID asign2 .)
    MULT            reduce using rule 119 (varcte -> ID asign2 .)
    DIV             reduce using rule 119 (varcte -> ID asign2 .)
    PLUS            reduce using rule 119 (varcte -> ID asign2 .)
    MINUS           reduce using rule 119 (varcte -> ID asign2 .)
    RELOP           reduce using rule 119 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 119 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 119 (varcte -> ID asign2 .)
    COMMA           reduce using rule 119 (varcte -> ID asign2 .)
    ID              reduce using rule 119 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 119 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 119 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 119 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 119 (varcte -> ID asign2 .)


state 88

    (68) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (69) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (70) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (71) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (72) asign2 -> LCOR . expresion RCOR
    (73) asign2 -> LCOR . varcte RCOR
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 38
    varcte                         shift and go to state 39
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 89

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 148
    LCOR            shift and go to state 147


state 90

    (68) asign2 -> LCOR expresion RCOR . LCOR varcte RCOR
    (69) asign2 -> LCOR expresion RCOR . LCOR expresion RCOR
    (72) asign2 -> LCOR expresion RCOR .

    LCOR            shift and go to state 149
    COLON           reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    MULT            reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    DIV             reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    ID              reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 72 (asign2 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 72 (asign2 -> LCOR expresion RCOR .)


state 91

    (109) expresion -> expresion RELOP . exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    exp                            shift and go to state 150
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 92

    (70) asign2 -> LCOR varcte RCOR . LCOR expresion RCOR
    (71) asign2 -> LCOR varcte RCOR . LCOR varcte RCOR
    (73) asign2 -> LCOR varcte RCOR .

    LCOR            shift and go to state 151
    COLON           reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    MULT            reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    DIV             reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    ID              reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 73 (asign2 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 73 (asign2 -> LCOR varcte RCOR .)


state 93

    (111) exp -> termino PLUS . exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    termino                        shift and go to state 43
    exp                            shift and go to state 152
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 94

    (112) exp -> termino MINUS . exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    termino                        shift and go to state 43
    exp                            shift and go to state 153
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 95

    (114) termino -> factor MULT . termino
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    factor                         shift and go to state 44
    termino                        shift and go to state 154
    varcte                         shift and go to state 98

state 96

    (115) termino -> factor DIV . termino
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    factor                         shift and go to state 44
    termino                        shift and go to state 155
    varcte                         shift and go to state 98

state 97

    (116) factor -> OPAREN expresion . CPAREN
    (109) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 156
    RELOP           shift and go to state 91


state 98

    (117) factor -> varcte .

    MULT            reduce using rule 117 (factor -> varcte .)
    DIV             reduce using rule 117 (factor -> varcte .)
    PLUS            reduce using rule 117 (factor -> varcte .)
    MINUS           reduce using rule 117 (factor -> varcte .)
    CPAREN          reduce using rule 117 (factor -> varcte .)
    RELOP           reduce using rule 117 (factor -> varcte .)
    RCOR            reduce using rule 117 (factor -> varcte .)
    SCOLON          reduce using rule 117 (factor -> varcte .)
    COMMA           reduce using rule 117 (factor -> varcte .)
    ID              reduce using rule 117 (factor -> varcte .)
    OPAREN          reduce using rule 117 (factor -> varcte .)
    NUMERIC         reduce using rule 117 (factor -> varcte .)
    NUMBER          reduce using rule 117 (factor -> varcte .)
    LOGICAL         reduce using rule 117 (factor -> varcte .)


state 99

    (121) varcte -> NUMBER .

    MULT            reduce using rule 121 (varcte -> NUMBER .)
    DIV             reduce using rule 121 (varcte -> NUMBER .)
    PLUS            reduce using rule 121 (varcte -> NUMBER .)
    MINUS           reduce using rule 121 (varcte -> NUMBER .)
    CPAREN          reduce using rule 121 (varcte -> NUMBER .)
    RELOP           reduce using rule 121 (varcte -> NUMBER .)
    RCOR            reduce using rule 121 (varcte -> NUMBER .)
    SCOLON          reduce using rule 121 (varcte -> NUMBER .)
    COMMA           reduce using rule 121 (varcte -> NUMBER .)
    ID              reduce using rule 121 (varcte -> NUMBER .)
    OPAREN          reduce using rule 121 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 121 (varcte -> NUMBER .)
    NUMBER          reduce using rule 121 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 121 (varcte -> NUMBER .)


state 100

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 157


state 101

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 102

    (35) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 35 (block -> OBRACKET block2 CBRACKET .)


state 103

    (37) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 37 (block2 -> estatuto block2 .)


state 104

    (61) asign -> ID EQUALS . expresion SCOLON
    (62) asign -> ID EQUALS . ID SCOLON
    (63) asign -> ID EQUALS . ID asign2 SCOLON
    (67) asign -> ID EQUALS . funccall afcn1
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 158
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 159
    funccall                       shift and go to state 160
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 105

    (64) asign -> ID asign2 . EQUALS ID SCOLON
    (65) asign -> ID asign2 . EQUALS expresion SCOLON
    (66) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 161


state 106

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN . fcn1 ID fcn2 funccall2 CPAREN
    (26) fcn1 -> . empty
    (179) empty -> .

    ID              reduce using rule 179 (empty -> .)
    OPAREN          reduce using rule 179 (empty -> .)
    NUMERIC         reduce using rule 179 (empty -> .)
    NUMBER          reduce using rule 179 (empty -> .)
    LOGICAL         reduce using rule 179 (empty -> .)

    fcn1                           shift and go to state 162
    empty                          shift and go to state 163

state 107

    (89) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 164
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 108

    (77) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (79) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (80) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 165
    STRING          shift and go to state 167
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 166
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 109

    (100) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (101) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (105) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (106) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (107) xyfunc -> . empty
    (102) plot2 -> . LCOR varcte COMMA varcte RCOR
    (103) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (104) plot2 -> . empty
    (179) empty -> .

    FX              shift and go to state 170
    FY              shift and go to state 171
    LCOR            shift and go to state 173
    CPAREN          reduce using rule 179 (empty -> .)

    xyfunc                         shift and go to state 168
    plot2                          shift and go to state 169
    empty                          shift and go to state 172

state 110

    (98) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 174


state 111

    (99) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 175


state 112

    (131) metodos -> MEAN fe1 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 176


state 113

    (145) fe1 -> empty .

    OPAREN          reduce using rule 145 (fe1 -> empty .)


state 114

    (132) metodos -> MEDIAN fe2 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 177


state 115

    (146) fe2 -> empty .

    OPAREN          reduce using rule 146 (fe2 -> empty .)


state 116

    (133) metodos -> MODE fe3 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 178


state 117

    (147) fe3 -> empty .

    OPAREN          reduce using rule 147 (fe3 -> empty .)


state 118

    (134) metodos -> STDV fe4 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 179


state 119

    (148) fe4 -> empty .

    OPAREN          reduce using rule 148 (fe4 -> empty .)


state 120

    (135) metodos -> KMEANS fe5 . OPAREN kval CPAREN SCOLON

    OPAREN          shift and go to state 180


state 121

    (149) fe5 -> empty .

    OPAREN          reduce using rule 149 (fe5 -> empty .)


state 122

    (136) metodos -> DERL dmn1 . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 181


state 123

    (158) dmn1 -> empty .

    OPAREN          reduce using rule 158 (dmn1 -> empty .)


state 124

    (137) metodos -> DBERN dbrn1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 182


state 125

    (159) dbrn1 -> empty .

    OPAREN          reduce using rule 159 (dbrn1 -> empty .)


state 126

    (138) metodos -> DPOI dp1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 183


state 127

    (160) dp1 -> empty .

    OPAREN          reduce using rule 160 (dp1 -> empty .)


state 128

    (139) metodos -> TRANSPOSE tp1 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 184


state 129

    (161) tp1 -> empty .

    OPAREN          reduce using rule 161 (tp1 -> empty .)


state 130

    (140) metodos -> INVERSE tp2 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 185


state 131

    (162) tp2 -> empty .

    OPAREN          reduce using rule 162 (tp2 -> empty .)


state 132

    (141) metodos -> ROTATE tp3 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 186


state 133

    (163) tp3 -> empty .

    OPAREN          reduce using rule 163 (tp3 -> empty .)


state 134

    (142) metodos -> REF tp4 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 187


state 135

    (164) tp4 -> empty .

    OPAREN          reduce using rule 164 (tp4 -> empty .)


state 136

    (143) metodos -> RREF tp5 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 188


state 137

    (165) tp5 -> empty .

    OPAREN          reduce using rule 165 (tp5 -> empty .)


state 138

    (144) metodos -> EULER tp6 . OPAREN CPAREN SCOLON

    OPAREN          shift and go to state 189


state 139

    (166) tp6 -> empty .

    OPAREN          reduce using rule 166 (tp6 -> empty .)


state 140

    (123) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (126) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 191

    wblock                         shift and go to state 190

state 141

    (124) wn1 -> empty .

    OBRACKET        reduce using rule 124 (wn1 -> empty .)


state 142

    (129) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 192


state 143

    (56) regreso -> RETURN OPAREN . ID regnum1 CPAREN SCOLON
    (57) regreso -> RETURN OPAREN . expresion regnum2 CPAREN SCOLON
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 193
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 194
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 144

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 195


state 145

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 146

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 147

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 196


state 148

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 197

state 149

    (68) asign2 -> LCOR expresion RCOR LCOR . varcte RCOR
    (69) asign2 -> LCOR expresion RCOR LCOR . expresion RCOR
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    expresion                      shift and go to state 198
    varcte                         shift and go to state 199
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 150

    (109) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 109 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 109 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 109 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 109 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 109 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 109 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 109 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 109 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 109 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 109 (expresion -> expresion RELOP exp .)


state 151

    (70) asign2 -> LCOR varcte RCOR LCOR . expresion RCOR
    (71) asign2 -> LCOR varcte RCOR LCOR . varcte RCOR
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42
    OPAREN          shift and go to state 45

    varcte                         shift and go to state 200
    expresion                      shift and go to state 201
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44

state 152

    (111) exp -> termino PLUS exp .

    RCOR            reduce using rule 111 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 111 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 111 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 111 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 111 (exp -> termino PLUS exp .)
    ID              reduce using rule 111 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 111 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 111 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 111 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 111 (exp -> termino PLUS exp .)


state 153

    (112) exp -> termino MINUS exp .

    RCOR            reduce using rule 112 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 112 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 112 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 112 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 112 (exp -> termino MINUS exp .)
    ID              reduce using rule 112 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 112 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 112 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 112 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 112 (exp -> termino MINUS exp .)


state 154

    (114) termino -> factor MULT termino .

    PLUS            reduce using rule 114 (termino -> factor MULT termino .)
    MINUS           reduce using rule 114 (termino -> factor MULT termino .)
    RCOR            reduce using rule 114 (termino -> factor MULT termino .)
    RELOP           reduce using rule 114 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 114 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 114 (termino -> factor MULT termino .)
    COMMA           reduce using rule 114 (termino -> factor MULT termino .)
    ID              reduce using rule 114 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 114 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 114 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 114 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 114 (termino -> factor MULT termino .)


state 155

    (115) termino -> factor DIV termino .

    PLUS            reduce using rule 115 (termino -> factor DIV termino .)
    MINUS           reduce using rule 115 (termino -> factor DIV termino .)
    RCOR            reduce using rule 115 (termino -> factor DIV termino .)
    RELOP           reduce using rule 115 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 115 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 115 (termino -> factor DIV termino .)
    COMMA           reduce using rule 115 (termino -> factor DIV termino .)
    ID              reduce using rule 115 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 115 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 115 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 115 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 115 (termino -> factor DIV termino .)


state 156

    (116) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 116 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 116 (factor -> OPAREN expresion CPAREN .)


state 157

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 158

    (62) asign -> ID EQUALS ID . SCOLON
    (63) asign -> ID EQUALS ID . asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 202
    OPAREN          shift and go to state 106
    MULT            reduce using rule 118 (varcte -> ID .)
    DIV             reduce using rule 118 (varcte -> ID .)
    PLUS            reduce using rule 118 (varcte -> ID .)
    MINUS           reduce using rule 118 (varcte -> ID .)
    RELOP           reduce using rule 118 (varcte -> ID .)
    LCOR            shift and go to state 88

  ! SCOLON          [ reduce using rule 118 (varcte -> ID .) ]

    asign2                         shift and go to state 203

state 159

    (61) asign -> ID EQUALS expresion . SCOLON
    (109) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 204
    RELOP           shift and go to state 91


state 160

    (67) asign -> ID EQUALS funccall . afcn1
    (60) afcn1 -> . empty
    (179) empty -> .

    ID              reduce using rule 179 (empty -> .)
    IF              reduce using rule 179 (empty -> .)
    PRINT           reduce using rule 179 (empty -> .)
    PLOT            reduce using rule 179 (empty -> .)
    COUNT           reduce using rule 179 (empty -> .)
    COUNTIF         reduce using rule 179 (empty -> .)
    MEAN            reduce using rule 179 (empty -> .)
    MEDIAN          reduce using rule 179 (empty -> .)
    MODE            reduce using rule 179 (empty -> .)
    STDV            reduce using rule 179 (empty -> .)
    KMEANS          reduce using rule 179 (empty -> .)
    DERL            reduce using rule 179 (empty -> .)
    DBERN           reduce using rule 179 (empty -> .)
    DPOI            reduce using rule 179 (empty -> .)
    TRANSPOSE       reduce using rule 179 (empty -> .)
    INVERSE         reduce using rule 179 (empty -> .)
    ROTATE          reduce using rule 179 (empty -> .)
    REF             reduce using rule 179 (empty -> .)
    RREF            reduce using rule 179 (empty -> .)
    EULER           reduce using rule 179 (empty -> .)
    DO              reduce using rule 179 (empty -> .)
    READ            reduce using rule 179 (empty -> .)
    RETURN          reduce using rule 179 (empty -> .)
    CBRACKET        reduce using rule 179 (empty -> .)

    afcn1                          shift and go to state 205
    empty                          shift and go to state 206

state 161

    (64) asign -> ID asign2 EQUALS . ID SCOLON
    (65) asign -> ID asign2 EQUALS . expresion SCOLON
    (66) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 207
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 208
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 162

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN fcn1 . ID fcn2 funccall2 CPAREN
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 209
    OPAREN          shift and go to state 45
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 210
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 163

    (26) fcn1 -> empty .

    ID              reduce using rule 26 (fcn1 -> empty .)
    OPAREN          reduce using rule 26 (fcn1 -> empty .)
    NUMERIC         reduce using rule 26 (fcn1 -> empty .)
    NUMBER          reduce using rule 26 (fcn1 -> empty .)
    LOGICAL         reduce using rule 26 (fcn1 -> empty .)


state 164

    (89) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (109) expresion -> expresion . RELOP exp
    (91) cn1 -> . empty
    (179) empty -> .

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 179 (empty -> .)

    cn1                            shift and go to state 211
    empty                          shift and go to state 212

state 165

    (77) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (88) en3 -> . empty
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR
    (179) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 118 (varcte -> ID .)
    MULT            reduce using rule 118 (varcte -> ID .)
    DIV             reduce using rule 118 (varcte -> ID .)
    PLUS            reduce using rule 118 (varcte -> ID .)
    MINUS           reduce using rule 118 (varcte -> ID .)
    RELOP           reduce using rule 118 (varcte -> ID .)
    CPAREN          reduce using rule 118 (varcte -> ID .)
    LCOR            shift and go to state 88
    COMMA           reduce using rule 179 (empty -> .)

  ! CPAREN          [ reduce using rule 179 (empty -> .) ]

    en3                            shift and go to state 213
    asign2                         shift and go to state 87
    empty                          shift and go to state 214

state 166

    (78) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (109) expresion -> expresion . RELOP exp
    (86) en1 -> . empty
    (179) empty -> .

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 179 (empty -> .)

    en1                            shift and go to state 215
    empty                          shift and go to state 216

state 167

    (79) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (80) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (81) escrt2 -> . COMMA escrt3
    (82) escrt2 -> . empty
    (179) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 217
    COMMA           shift and go to state 219

  ! CPAREN          [ reduce using rule 179 (empty -> .) ]

    escrt2                         shift and go to state 218
    empty                          shift and go to state 220

state 168

    (100) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 221


state 169

    (101) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 222


state 170

    (105) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 223


state 171

    (106) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 224


state 172

    (107) xyfunc -> empty .
    (104) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 104 (plot2 -> empty .)
    CPAREN          reduce using rule 104 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 107 (xyfunc -> empty .) ]


state 173

    (102) plot2 -> LCOR . varcte COMMA varcte RCOR
    (103) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 225

state 174

    (98) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 226


state 175

    (99) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 227


state 176

    (131) metodos -> MEAN fe1 OPAREN . arrfun CPAREN SCOLON
    (151) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 229

    arrfun                         shift and go to state 228

state 177

    (132) metodos -> MEDIAN fe2 OPAREN . arrfun CPAREN SCOLON
    (151) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 229

    arrfun                         shift and go to state 230

state 178

    (133) metodos -> MODE fe3 OPAREN . arrfun CPAREN SCOLON
    (151) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 229

    arrfun                         shift and go to state 231

state 179

    (134) metodos -> STDV fe4 OPAREN . arrfun CPAREN SCOLON
    (151) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 229

    arrfun                         shift and go to state 232

state 180

    (135) metodos -> KMEANS fe5 OPAREN . kval CPAREN SCOLON
    (150) kval -> . varcte COMMA arrfun2 COMMA arrfun3
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    kval                           shift and go to state 233
    varcte                         shift and go to state 234

state 181

    (136) metodos -> DERL dmn1 OPAREN . expfunc CPAREN SCOLON
    (167) expfunc -> . ID COMMA ID COMMA ID
    (168) expfunc -> . varcte COMMA varcte COMMA varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 236
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expfunc                        shift and go to state 235
    varcte                         shift and go to state 237

state 182

    (137) metodos -> DBERN dbrn1 OPAREN . expfunc2 CPAREN SCOLON
    (169) expfunc2 -> . ID COMMA ID
    (170) expfunc2 -> . varcte COMMA varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 239
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expfunc2                       shift and go to state 238
    varcte                         shift and go to state 240

state 183

    (138) metodos -> DPOI dp1 OPAREN . expfunc2 CPAREN SCOLON
    (169) expfunc2 -> . ID COMMA ID
    (170) expfunc2 -> . varcte COMMA varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 239
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expfunc2                       shift and go to state 241
    varcte                         shift and go to state 240

state 184

    (139) metodos -> TRANSPOSE tp1 OPAREN . mmmfunc CPAREN SCOLON
    (171) mmmfunc -> . LCOR RCOR
    (172) mmmfunc -> . LCOR mmmarray RCOR
    (173) mmmfunc -> . ID

    LCOR            shift and go to state 243
    ID              shift and go to state 244

    mmmfunc                        shift and go to state 242

state 185

    (140) metodos -> INVERSE tp2 OPAREN . mmmfunc CPAREN SCOLON
    (171) mmmfunc -> . LCOR RCOR
    (172) mmmfunc -> . LCOR mmmarray RCOR
    (173) mmmfunc -> . ID

    LCOR            shift and go to state 243
    ID              shift and go to state 244

    mmmfunc                        shift and go to state 245

state 186

    (141) metodos -> ROTATE tp3 OPAREN . mmmfunc CPAREN SCOLON
    (171) mmmfunc -> . LCOR RCOR
    (172) mmmfunc -> . LCOR mmmarray RCOR
    (173) mmmfunc -> . ID

    LCOR            shift and go to state 243
    ID              shift and go to state 244

    mmmfunc                        shift and go to state 246

state 187

    (142) metodos -> REF tp4 OPAREN . mmmfunc CPAREN SCOLON
    (171) mmmfunc -> . LCOR RCOR
    (172) mmmfunc -> . LCOR mmmarray RCOR
    (173) mmmfunc -> . ID

    LCOR            shift and go to state 243
    ID              shift and go to state 244

    mmmfunc                        shift and go to state 247

state 188

    (143) metodos -> RREF tp5 OPAREN . mmmfunc CPAREN SCOLON
    (171) mmmfunc -> . LCOR RCOR
    (172) mmmfunc -> . LCOR mmmarray RCOR
    (173) mmmfunc -> . ID

    LCOR            shift and go to state 243
    ID              shift and go to state 244

    mmmfunc                        shift and go to state 248

state 189

    (144) metodos -> EULER tp6 OPAREN . CPAREN SCOLON

    CPAREN          shift and go to state 249


state 190

    (123) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 250


state 191

    (126) wblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (179) empty -> .
    (61) asign -> . ID EQUALS expresion SCOLON
    (62) asign -> . ID EQUALS ID SCOLON
    (63) asign -> . ID EQUALS ID asign2 SCOLON
    (64) asign -> . ID asign2 EQUALS ID SCOLON
    (65) asign -> . ID asign2 EQUALS expresion SCOLON
    (66) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (67) asign -> . ID EQUALS funccall afcn1
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (100) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (101) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (98) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (99) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (131) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (136) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (137) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (123) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (129) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 179 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    block2                         shift and go to state 251
    estatuto                       shift and go to state 49
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 192

    (129) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (130) rn1 -> . empty
    (179) empty -> .

    CPAREN          reduce using rule 179 (empty -> .)

    rn1                            shift and go to state 252
    empty                          shift and go to state 253

state 193

    (56) regreso -> RETURN OPAREN ID . regnum1 CPAREN SCOLON
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (58) regnum1 -> .
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

  ! reduce/reduce conflict for CPAREN resolved using rule 58 (regnum1 -> .)
    MULT            reduce using rule 118 (varcte -> ID .)
    DIV             reduce using rule 118 (varcte -> ID .)
    PLUS            reduce using rule 118 (varcte -> ID .)
    MINUS           reduce using rule 118 (varcte -> ID .)
    RELOP           reduce using rule 118 (varcte -> ID .)
    CPAREN          reduce using rule 58 (regnum1 -> .)
    LCOR            shift and go to state 88

  ! CPAREN          [ reduce using rule 118 (varcte -> ID .) ]

    regnum1                        shift and go to state 254
    asign2                         shift and go to state 87

state 194

    (57) regreso -> RETURN OPAREN expresion . regnum2 CPAREN SCOLON
    (109) expresion -> expresion . RELOP exp
    (59) regnum2 -> .

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 59 (regnum2 -> .)

    regnum2                        shift and go to state 255

state 195

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (179) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 179 (empty -> .)

    modules2                       shift and go to state 256
    vars                           shift and go to state 257
    empty                          shift and go to state 258

state 196

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 259


state 197

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 260


state 198

    (69) asign2 -> LCOR expresion RCOR LCOR expresion . RCOR
    (109) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 261
    RELOP           shift and go to state 91


state 199

    (68) asign2 -> LCOR expresion RCOR LCOR varcte . RCOR
    (117) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 262
    MULT            reduce using rule 117 (factor -> varcte .)
    DIV             reduce using rule 117 (factor -> varcte .)
    PLUS            reduce using rule 117 (factor -> varcte .)
    MINUS           reduce using rule 117 (factor -> varcte .)
    RELOP           reduce using rule 117 (factor -> varcte .)

  ! RCOR            [ reduce using rule 117 (factor -> varcte .) ]


state 200

    (71) asign2 -> LCOR varcte RCOR LCOR varcte . RCOR
    (117) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 263
    MULT            reduce using rule 117 (factor -> varcte .)
    DIV             reduce using rule 117 (factor -> varcte .)
    PLUS            reduce using rule 117 (factor -> varcte .)
    MINUS           reduce using rule 117 (factor -> varcte .)
    RELOP           reduce using rule 117 (factor -> varcte .)

  ! RCOR            [ reduce using rule 117 (factor -> varcte .) ]


state 201

    (70) asign2 -> LCOR varcte RCOR LCOR expresion . RCOR
    (109) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 264
    RELOP           shift and go to state 91


state 202

    (62) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    EULER           reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    RETURN          reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 62 (asign -> ID EQUALS ID SCOLON .)


state 203

    (63) asign -> ID EQUALS ID asign2 . SCOLON
    (119) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 265
    MULT            reduce using rule 119 (varcte -> ID asign2 .)
    DIV             reduce using rule 119 (varcte -> ID asign2 .)
    PLUS            reduce using rule 119 (varcte -> ID asign2 .)
    MINUS           reduce using rule 119 (varcte -> ID asign2 .)
    RELOP           reduce using rule 119 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 119 (varcte -> ID asign2 .) ]


state 204

    (61) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    EULER           reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    RETURN          reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 61 (asign -> ID EQUALS expresion SCOLON .)


state 205

    (67) asign -> ID EQUALS funccall afcn1 .

    ID              reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    IF              reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    PRINT           reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    PLOT            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    COUNT           reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    COUNTIF         reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    MEAN            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    MEDIAN          reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    MODE            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    STDV            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    KMEANS          reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    DERL            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    DBERN           reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    DPOI            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    TRANSPOSE       reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    INVERSE         reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    ROTATE          reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    REF             reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    RREF            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    EULER           reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    DO              reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    READ            reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    RETURN          reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)
    CBRACKET        reduce using rule 67 (asign -> ID EQUALS funccall afcn1 .)


state 206

    (60) afcn1 -> empty .

    ID              reduce using rule 60 (afcn1 -> empty .)
    IF              reduce using rule 60 (afcn1 -> empty .)
    PRINT           reduce using rule 60 (afcn1 -> empty .)
    PLOT            reduce using rule 60 (afcn1 -> empty .)
    COUNT           reduce using rule 60 (afcn1 -> empty .)
    COUNTIF         reduce using rule 60 (afcn1 -> empty .)
    MEAN            reduce using rule 60 (afcn1 -> empty .)
    MEDIAN          reduce using rule 60 (afcn1 -> empty .)
    MODE            reduce using rule 60 (afcn1 -> empty .)
    STDV            reduce using rule 60 (afcn1 -> empty .)
    KMEANS          reduce using rule 60 (afcn1 -> empty .)
    DERL            reduce using rule 60 (afcn1 -> empty .)
    DBERN           reduce using rule 60 (afcn1 -> empty .)
    DPOI            reduce using rule 60 (afcn1 -> empty .)
    TRANSPOSE       reduce using rule 60 (afcn1 -> empty .)
    INVERSE         reduce using rule 60 (afcn1 -> empty .)
    ROTATE          reduce using rule 60 (afcn1 -> empty .)
    REF             reduce using rule 60 (afcn1 -> empty .)
    RREF            reduce using rule 60 (afcn1 -> empty .)
    EULER           reduce using rule 60 (afcn1 -> empty .)
    DO              reduce using rule 60 (afcn1 -> empty .)
    READ            reduce using rule 60 (afcn1 -> empty .)
    RETURN          reduce using rule 60 (afcn1 -> empty .)
    CBRACKET        reduce using rule 60 (afcn1 -> empty .)


state 207

    (64) asign -> ID asign2 EQUALS ID . SCOLON
    (66) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 267
    MULT            reduce using rule 118 (varcte -> ID .)
    DIV             reduce using rule 118 (varcte -> ID .)
    PLUS            reduce using rule 118 (varcte -> ID .)
    MINUS           reduce using rule 118 (varcte -> ID .)
    RELOP           reduce using rule 118 (varcte -> ID .)
    LCOR            shift and go to state 88

  ! SCOLON          [ reduce using rule 118 (varcte -> ID .) ]

    asign2                         shift and go to state 266

state 208

    (65) asign -> ID asign2 EQUALS expresion . SCOLON
    (109) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 268
    RELOP           shift and go to state 91


state 209

    (25) funccall -> ID OPAREN fcn1 ID . fcn2 funccall2 CPAREN
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (27) fcn2 -> . empty
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR
    (179) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 118 (varcte -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 118 (varcte -> ID .)
  ! reduce/reduce conflict for CPAREN resolved using rule 118 (varcte -> ID .)
    MULT            reduce using rule 118 (varcte -> ID .)
    DIV             reduce using rule 118 (varcte -> ID .)
    PLUS            reduce using rule 118 (varcte -> ID .)
    MINUS           reduce using rule 118 (varcte -> ID .)
    RELOP           reduce using rule 118 (varcte -> ID .)
    COMMA           reduce using rule 118 (varcte -> ID .)
    ID              reduce using rule 118 (varcte -> ID .)
    CPAREN          reduce using rule 118 (varcte -> ID .)
    LCOR            shift and go to state 88

  ! COMMA           [ reduce using rule 179 (empty -> .) ]
  ! ID              [ reduce using rule 179 (empty -> .) ]
  ! CPAREN          [ reduce using rule 179 (empty -> .) ]

    fcn2                           shift and go to state 269
    asign2                         shift and go to state 87
    empty                          shift and go to state 270

state 210

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (109) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (179) empty -> .

    RELOP           shift and go to state 91
    COMMA           reduce using rule 179 (empty -> .)
    ID              reduce using rule 179 (empty -> .)
    CPAREN          reduce using rule 179 (empty -> .)

    fcn2                           shift and go to state 271
    empty                          shift and go to state 270

state 211

    (89) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (90) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 272


state 212

    (91) cn1 -> empty .

    CPAREN          reduce using rule 91 (cn1 -> empty .)


state 213

    (77) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (81) escrt2 -> . COMMA escrt3
    (82) escrt2 -> . empty
    (179) empty -> .

    COMMA           shift and go to state 219
    CPAREN          reduce using rule 179 (empty -> .)

    escrt2                         shift and go to state 273
    empty                          shift and go to state 220

state 214

    (88) en3 -> empty .

    COMMA           reduce using rule 88 (en3 -> empty .)
    CPAREN          reduce using rule 88 (en3 -> empty .)


state 215

    (78) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 274


state 216

    (86) en1 -> empty .

    CPAREN          reduce using rule 86 (en1 -> empty .)


state 217

    (79) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (87) en2 -> . empty
    (179) empty -> .

    SCOLON          reduce using rule 179 (empty -> .)

    en2                            shift and go to state 275
    empty                          shift and go to state 276

state 218

    (80) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 277


state 219

    (81) escrt2 -> COMMA . escrt3
    (83) escrt3 -> . ID escrt2
    (84) escrt3 -> . ID
    (85) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 279
    STRING          shift and go to state 280

    escrt3                         shift and go to state 278

state 220

    (82) escrt2 -> empty .

    CPAREN          reduce using rule 82 (escrt2 -> empty .)
    COMMA           reduce using rule 82 (escrt2 -> empty .)


state 221

    (100) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 281


state 222

    (101) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 282


state 223

    (105) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    exp                            shift and go to state 283
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 224

    (106) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    exp                            shift and go to state 284
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 225

    (102) plot2 -> LCOR varcte . COMMA varcte RCOR
    (103) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 285


state 226

    (98) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 286

state 227

    (99) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 287

state 228

    (131) metodos -> MEAN fe1 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 288


state 229

    (151) arrfun -> LCOR . datasetarr RCOR
    (154) datasetarr -> . varcte
    (155) datasetarr -> . varcte COMMA datasetarr
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr                     shift and go to state 289
    varcte                         shift and go to state 290

state 230

    (132) metodos -> MEDIAN fe2 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 291


state 231

    (133) metodos -> MODE fe3 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 292


state 232

    (134) metodos -> STDV fe4 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 293


state 233

    (135) metodos -> KMEANS fe5 OPAREN kval . CPAREN SCOLON

    CPAREN          shift and go to state 294


state 234

    (150) kval -> varcte . COMMA arrfun2 COMMA arrfun3

    COMMA           shift and go to state 295


state 235

    (136) metodos -> DERL dmn1 OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 296


state 236

    (167) expfunc -> ID . COMMA ID COMMA ID
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 297
    LCOR            shift and go to state 88

  ! COMMA           [ reduce using rule 118 (varcte -> ID .) ]

    asign2                         shift and go to state 87

state 237

    (168) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 298


state 238

    (137) metodos -> DBERN dbrn1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 299


state 239

    (169) expfunc2 -> ID . COMMA ID
    (118) varcte -> ID .
    (119) varcte -> ID . asign2
    (68) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (69) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (71) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (72) asign2 -> . LCOR expresion RCOR
    (73) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 300
    LCOR            shift and go to state 88

  ! COMMA           [ reduce using rule 118 (varcte -> ID .) ]

    asign2                         shift and go to state 87

state 240

    (170) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 301


state 241

    (138) metodos -> DPOI dp1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 302


state 242

    (139) metodos -> TRANSPOSE tp1 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 303


state 243

    (171) mmmfunc -> LCOR . RCOR
    (172) mmmfunc -> LCOR . mmmarray RCOR
    (174) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (175) mmmarray -> . libero LCOR datasetarr4 RCOR
    (176) libero -> . empty
    (179) empty -> .

    RCOR            shift and go to state 304
    LCOR            reduce using rule 179 (empty -> .)

    mmmarray                       shift and go to state 305
    libero                         shift and go to state 306
    empty                          shift and go to state 307

state 244

    (173) mmmfunc -> ID .

    CPAREN          reduce using rule 173 (mmmfunc -> ID .)


state 245

    (140) metodos -> INVERSE tp2 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 308


state 246

    (141) metodos -> ROTATE tp3 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 309


state 247

    (142) metodos -> REF tp4 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 310


state 248

    (143) metodos -> RREF tp5 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 311


state 249

    (144) metodos -> EULER tp6 OPAREN CPAREN . SCOLON

    SCOLON          shift and go to state 312


state 250

    (123) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 313


state 251

    (126) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 314


state 252

    (129) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 315


state 253

    (130) rn1 -> empty .

    CPAREN          reduce using rule 130 (rn1 -> empty .)


state 254

    (56) regreso -> RETURN OPAREN ID regnum1 . CPAREN SCOLON

    CPAREN          shift and go to state 316


state 255

    (57) regreso -> RETURN OPAREN expresion regnum2 . CPAREN SCOLON

    CPAREN          shift and go to state 317


state 256

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 318

state 257

    (32) modules2 -> vars .

    CPAREN          reduce using rule 32 (modules2 -> vars .)
    OBRACKET        reduce using rule 32 (modules2 -> vars .)


state 258

    (33) modules2 -> empty .

    CPAREN          reduce using rule 33 (modules2 -> empty .)
    OBRACKET        reduce using rule 33 (modules2 -> empty .)


state 259

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 319


state 260

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (179) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 179 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 179 (empty -> .) ]
  ! CPAREN          [ reduce using rule 179 (empty -> .) ]

    lugstat2                       shift and go to state 320
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 261

    (69) asign2 -> LCOR expresion RCOR LCOR expresion RCOR .

    COLON           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    ID              reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 69 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)


state 262

    (68) asign2 -> LCOR expresion RCOR LCOR varcte RCOR .

    COLON           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    ID              reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)


state 263

    (71) asign2 -> LCOR varcte RCOR LCOR varcte RCOR .

    COLON           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    ID              reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 71 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)


state 264

    (70) asign2 -> LCOR varcte RCOR LCOR expresion RCOR .

    COLON           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    ID              reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)


state 265

    (63) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    RETURN          reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 63 (asign -> ID EQUALS ID asign2 SCOLON .)


state 266

    (66) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (119) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 321
    MULT            reduce using rule 119 (varcte -> ID asign2 .)
    DIV             reduce using rule 119 (varcte -> ID asign2 .)
    PLUS            reduce using rule 119 (varcte -> ID asign2 .)
    MINUS           reduce using rule 119 (varcte -> ID asign2 .)
    RELOP           reduce using rule 119 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 119 (varcte -> ID asign2 .) ]


state 267

    (64) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    EULER           reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    RETURN          reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 64 (asign -> ID asign2 EQUALS ID SCOLON .)


state 268

    (65) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    EULER           reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RETURN          reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 65 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 269

    (25) funccall -> ID OPAREN fcn1 ID fcn2 . funccall2 CPAREN
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (179) empty -> .

    COMMA           shift and go to state 324
    ID              shift and go to state 322
    CPAREN          reduce using rule 179 (empty -> .)

    funccall2                      shift and go to state 323
    empty                          shift and go to state 325

state 270

    (27) fcn2 -> empty .

    COMMA           reduce using rule 27 (fcn2 -> empty .)
    ID              reduce using rule 27 (fcn2 -> empty .)
    CPAREN          reduce using rule 27 (fcn2 -> empty .)


state 271

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (179) empty -> .

    COMMA           shift and go to state 324
    ID              shift and go to state 322
    CPAREN          reduce using rule 179 (empty -> .)

    funccall2                      shift and go to state 326
    empty                          shift and go to state 325

state 272

    (89) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (90) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (94) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 328

    ifblock                        shift and go to state 327

state 273

    (77) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 329


state 274

    (78) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 330


state 275

    (79) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 331


state 276

    (87) en2 -> empty .

    SCOLON          reduce using rule 87 (en2 -> empty .)


state 277

    (80) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (87) en2 -> . empty
    (179) empty -> .

    SCOLON          reduce using rule 179 (empty -> .)

    en2                            shift and go to state 332
    empty                          shift and go to state 276

state 278

    (81) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 81 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 81 (escrt2 -> COMMA escrt3 .)


state 279

    (83) escrt3 -> ID . escrt2
    (84) escrt3 -> ID .
    (81) escrt2 -> . COMMA escrt3
    (82) escrt2 -> . empty
    (179) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 84 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 84 (escrt3 -> ID .)
    COMMA           shift and go to state 219

  ! COMMA           [ reduce using rule 84 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 179 (empty -> .) ]
  ! COMMA           [ reduce using rule 179 (empty -> .) ]

    escrt2                         shift and go to state 333
    empty                          shift and go to state 220

state 280

    (85) escrt3 -> STRING . escrt2 escrt2
    (81) escrt2 -> . COMMA escrt3
    (82) escrt2 -> . empty
    (179) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 219
    CPAREN          reduce using rule 179 (empty -> .)

  ! COMMA           [ reduce using rule 179 (empty -> .) ]

    escrt2                         shift and go to state 334
    empty                          shift and go to state 220

state 281

    (100) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    EULER           reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RETURN          reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 100 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 282

    (101) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    EULER           reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RETURN          reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 101 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 283

    (105) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 335


state 284

    (106) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 336


state 285

    (102) plot2 -> LCOR varcte COMMA . varcte RCOR
    (103) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 337

state 286

    (98) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 338


state 287

    (99) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 339


state 288

    (131) metodos -> MEAN fe1 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 340


state 289

    (151) arrfun -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 341


state 290

    (154) datasetarr -> varcte .
    (155) datasetarr -> varcte . COMMA datasetarr

    RCOR            reduce using rule 154 (datasetarr -> varcte .)
    COMMA           shift and go to state 342


state 291

    (132) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 343


state 292

    (133) metodos -> MODE fe3 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 344


state 293

    (134) metodos -> STDV fe4 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 345


state 294

    (135) metodos -> KMEANS fe5 OPAREN kval CPAREN . SCOLON

    SCOLON          shift and go to state 346


state 295

    (150) kval -> varcte COMMA . arrfun2 COMMA arrfun3
    (152) arrfun2 -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 348

    arrfun2                        shift and go to state 347

state 296

    (136) metodos -> DERL dmn1 OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 349


state 297

    (167) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 350


state 298

    (168) expfunc -> varcte COMMA . varcte COMMA varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 351

state 299

    (137) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 352


state 300

    (169) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 353


state 301

    (170) expfunc2 -> varcte COMMA . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 354

state 302

    (138) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 355


state 303

    (139) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 356


state 304

    (171) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 171 (mmmfunc -> LCOR RCOR .)


state 305

    (172) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 357


state 306

    (174) mmmarray -> libero . LCOR datasetarr4 RCOR COMMA mmmarray
    (175) mmmarray -> libero . LCOR datasetarr4 RCOR

    LCOR            shift and go to state 358


state 307

    (176) libero -> empty .

    LCOR            reduce using rule 176 (libero -> empty .)


state 308

    (140) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 359


state 309

    (141) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 360


state 310

    (142) metodos -> REF tp4 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 361


state 311

    (143) metodos -> RREF tp5 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 362


state 312

    (144) metodos -> EULER tp6 OPAREN CPAREN SCOLON .

    ID              reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    IF              reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    PRINT           reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    PLOT            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    COUNT           reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    COUNTIF         reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MEAN            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MEDIAN          reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MODE            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    STDV            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    KMEANS          reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DERL            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DBERN           reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DPOI            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    INVERSE         reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    ROTATE          reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    REF             reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    RREF            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    EULER           reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DO              reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    READ            reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    RETURN          reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    CBRACKET        reduce using rule 144 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)


state 313

    (123) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (127) dwhileconds -> . expresion dwhileconds
    (128) dwhileconds -> . empty
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (179) empty -> .
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    CPAREN          reduce using rule 179 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    dwhileconds                    shift and go to state 363
    expresion                      shift and go to state 364
    empty                          shift and go to state 365
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 314

    (126) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 126 (wblock -> OBRACKET block2 CBRACKET .)


state 315

    (129) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 366


state 316

    (56) regreso -> RETURN OPAREN ID regnum1 CPAREN . SCOLON

    SCOLON          shift and go to state 367


state 317

    (57) regreso -> RETURN OPAREN expresion regnum2 CPAREN . SCOLON

    SCOLON          shift and go to state 368


state 318

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 369


state 319

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR
    (44) tipo -> . VOID

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    tipo                           shift and go to state 370

state 320

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 321

    (66) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RETURN          reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 66 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 322

    (30) funccall2 -> ID . fcn2 funccall2
    (27) fcn2 -> . empty
    (179) empty -> .

    COMMA           reduce using rule 179 (empty -> .)
    ID              reduce using rule 179 (empty -> .)
    CPAREN          reduce using rule 179 (empty -> .)

    fcn2                           shift and go to state 371
    empty                          shift and go to state 270

state 323

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 . CPAREN

    CPAREN          shift and go to state 372


state 324

    (29) funccall2 -> COMMA . expresion fcn2 funccall2
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 373
    exp                            shift and go to state 40
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 325

    (31) funccall2 -> empty .

    CPAREN          reduce using rule 31 (funccall2 -> empty .)


state 326

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 374


state 327

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 375
    ELSE            shift and go to state 376


state 328

    (94) ifblock -> OBRACKET . ifblock2 CBRACKET
    (95) ifblock2 -> . estatuto
    (96) ifblock2 -> . estatuto ifblock2
    (97) ifblock2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (179) empty -> .
    (61) asign -> . ID EQUALS expresion SCOLON
    (62) asign -> . ID EQUALS ID SCOLON
    (63) asign -> . ID EQUALS ID asign2 SCOLON
    (64) asign -> . ID asign2 EQUALS ID SCOLON
    (65) asign -> . ID asign2 EQUALS expresion SCOLON
    (66) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (67) asign -> . ID EQUALS funccall afcn1
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (100) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (101) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (98) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (99) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (131) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (136) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (137) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (123) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (129) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 179 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    ifblock2                       shift and go to state 377
    estatuto                       shift and go to state 378
    empty                          shift and go to state 379
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 329

    (77) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 380


state 330

    (78) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    EULER           reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RETURN          reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 78 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 331

    (79) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    EULER           reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RETURN          reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 79 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 332

    (80) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 381


state 333

    (83) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 83 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 83 (escrt3 -> ID escrt2 .)


state 334

    (85) escrt3 -> STRING escrt2 . escrt2
    (81) escrt2 -> . COMMA escrt3
    (82) escrt2 -> . empty
    (179) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 219
    CPAREN          reduce using rule 179 (empty -> .)

  ! COMMA           [ reduce using rule 179 (empty -> .) ]

    escrt2                         shift and go to state 382
    empty                          shift and go to state 220

state 335

    (105) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (105) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (106) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (107) xyfunc -> . empty
    (179) empty -> .

    FX              shift and go to state 170
    FY              shift and go to state 171
    CPAREN          reduce using rule 179 (empty -> .)

    xyfunc                         shift and go to state 383
    empty                          shift and go to state 384

state 336

    (106) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (105) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (106) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (107) xyfunc -> . empty
    (179) empty -> .

    FX              shift and go to state 170
    FY              shift and go to state 171
    CPAREN          reduce using rule 179 (empty -> .)

    xyfunc                         shift and go to state 385
    empty                          shift and go to state 384

state 337

    (102) plot2 -> LCOR varcte COMMA varcte . RCOR
    (103) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 386


state 338

    (98) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 387

state 339

    (99) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 388

state 340

    (131) metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 131 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)


state 341

    (151) arrfun -> LCOR datasetarr RCOR .

    CPAREN          reduce using rule 151 (arrfun -> LCOR datasetarr RCOR .)


state 342

    (155) datasetarr -> varcte COMMA . datasetarr
    (154) datasetarr -> . varcte
    (155) datasetarr -> . varcte COMMA datasetarr
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 290
    datasetarr                     shift and go to state 389

state 343

    (132) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)


state 344

    (133) metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 133 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)


state 345

    (134) metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 134 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)


state 346

    (135) metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .

    ID              reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    IF              reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PRINT           reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PLOT            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNT           reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNTIF         reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEAN            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEDIAN          reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MODE            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    STDV            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    KMEANS          reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DERL            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DBERN           reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DPOI            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    INVERSE         reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    ROTATE          reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    REF             reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RREF            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    EULER           reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DO              reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    READ            reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RETURN          reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    CBRACKET        reduce using rule 135 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)


state 347

    (150) kval -> varcte COMMA arrfun2 . COMMA arrfun3

    COMMA           shift and go to state 390


state 348

    (152) arrfun2 -> LCOR . datasetarr RCOR
    (154) datasetarr -> . varcte
    (155) datasetarr -> . varcte COMMA datasetarr
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr                     shift and go to state 391
    varcte                         shift and go to state 290

state 349

    (136) metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RETURN          reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 136 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)


state 350

    (167) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 392


state 351

    (168) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 393


state 352

    (137) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RETURN          reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 137 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)


state 353

    (169) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 169 (expfunc2 -> ID COMMA ID .)


state 354

    (170) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 170 (expfunc2 -> varcte COMMA varcte .)


state 355

    (138) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RETURN          reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 138 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)


state 356

    (139) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 139 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)


state 357

    (172) mmmfunc -> LCOR mmmarray RCOR .

    CPAREN          reduce using rule 172 (mmmfunc -> LCOR mmmarray RCOR .)


state 358

    (174) mmmarray -> libero LCOR . datasetarr4 RCOR COMMA mmmarray
    (175) mmmarray -> libero LCOR . datasetarr4 RCOR
    (177) datasetarr4 -> . varcte
    (178) datasetarr4 -> . varcte COMMA datasetarr4
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr4                    shift and go to state 394
    varcte                         shift and go to state 395

state 359

    (140) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 140 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)


state 360

    (141) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 141 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)


state 361

    (142) metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 142 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)


state 362

    (143) metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 143 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)


state 363

    (123) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 396


state 364

    (127) dwhileconds -> expresion . dwhileconds
    (109) expresion -> expresion . RELOP exp
    (127) dwhileconds -> . expresion dwhileconds
    (128) dwhileconds -> . empty
    (108) expresion -> . exp
    (109) expresion -> . expresion RELOP exp
    (179) empty -> .
    (110) exp -> . termino
    (111) exp -> . termino PLUS exp
    (112) exp -> . termino MINUS exp
    (113) termino -> . factor
    (114) termino -> . factor MULT termino
    (115) termino -> . factor DIV termino
    (116) factor -> . OPAREN expresion CPAREN
    (117) factor -> . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    RELOP           shift and go to state 91
    CPAREN          reduce using rule 179 (empty -> .)
    OPAREN          shift and go to state 45
    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    expresion                      shift and go to state 364
    dwhileconds                    shift and go to state 397
    exp                            shift and go to state 40
    empty                          shift and go to state 365
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    varcte                         shift and go to state 98

state 365

    (128) dwhileconds -> empty .

    CPAREN          reduce using rule 128 (dwhileconds -> empty .)


state 366

    (129) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    EULER           reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RETURN          reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 129 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 367

    (56) regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .

    ID              reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    IF              reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    PRINT           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    PLOT            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    COUNT           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MEAN            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MODE            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    STDV            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    KMEANS          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DERL            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DBERN           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DPOI            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    INVERSE         reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    ROTATE          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    REF             reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    RREF            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    EULER           reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DO              reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    READ            reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    RETURN          reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 56 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)


state 368

    (57) regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .

    ID              reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    IF              reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    PRINT           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    PLOT            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    COUNT           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MEAN            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MODE            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    STDV            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    KMEANS          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DERL            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DBERN           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DPOI            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    INVERSE         reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    ROTATE          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    REF             reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    RREF            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    EULER           reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DO              reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    READ            reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    RETURN          reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 57 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)


state 369

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (179) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 179 (empty -> .)

    modules2                       shift and go to state 398
    vars                           shift and go to state 257
    empty                          shift and go to state 258

state 370

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 399


state 371

    (30) funccall2 -> ID fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (179) empty -> .

    COMMA           shift and go to state 324
    ID              shift and go to state 322
    CPAREN          reduce using rule 179 (empty -> .)

    funccall2                      shift and go to state 400
    empty                          shift and go to state 325

state 372

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .

    ID              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    IF              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PRINT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PLOT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNTIF         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEAN            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEDIAN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MODE            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    STDV            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    KMEANS          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DERL            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DBERN           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DPOI            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    INVERSE         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    ROTATE          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    REF             reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RREF            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    EULER           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DO              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    READ            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RETURN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CBRACKET        reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)


state 373

    (29) funccall2 -> COMMA expresion . fcn2 funccall2
    (109) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (179) empty -> .

    RELOP           shift and go to state 91
    COMMA           reduce using rule 179 (empty -> .)
    ID              reduce using rule 179 (empty -> .)
    CPAREN          reduce using rule 179 (empty -> .)

    fcn2                           shift and go to state 401
    empty                          shift and go to state 270

state 374

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (28) fcn3 -> . empty
    (179) empty -> .

    ID              reduce using rule 179 (empty -> .)
    IF              reduce using rule 179 (empty -> .)
    PRINT           reduce using rule 179 (empty -> .)
    PLOT            reduce using rule 179 (empty -> .)
    COUNT           reduce using rule 179 (empty -> .)
    COUNTIF         reduce using rule 179 (empty -> .)
    MEAN            reduce using rule 179 (empty -> .)
    MEDIAN          reduce using rule 179 (empty -> .)
    MODE            reduce using rule 179 (empty -> .)
    STDV            reduce using rule 179 (empty -> .)
    KMEANS          reduce using rule 179 (empty -> .)
    DERL            reduce using rule 179 (empty -> .)
    DBERN           reduce using rule 179 (empty -> .)
    DPOI            reduce using rule 179 (empty -> .)
    TRANSPOSE       reduce using rule 179 (empty -> .)
    INVERSE         reduce using rule 179 (empty -> .)
    ROTATE          reduce using rule 179 (empty -> .)
    REF             reduce using rule 179 (empty -> .)
    RREF            reduce using rule 179 (empty -> .)
    EULER           reduce using rule 179 (empty -> .)
    DO              reduce using rule 179 (empty -> .)
    READ            reduce using rule 179 (empty -> .)
    RETURN          reduce using rule 179 (empty -> .)
    CBRACKET        reduce using rule 179 (empty -> .)

    fcn3                           shift and go to state 402
    empty                          shift and go to state 403

state 375

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (92) cn2 -> . empty
    (179) empty -> .

    ID              reduce using rule 179 (empty -> .)
    IF              reduce using rule 179 (empty -> .)
    PRINT           reduce using rule 179 (empty -> .)
    PLOT            reduce using rule 179 (empty -> .)
    COUNT           reduce using rule 179 (empty -> .)
    COUNTIF         reduce using rule 179 (empty -> .)
    MEAN            reduce using rule 179 (empty -> .)
    MEDIAN          reduce using rule 179 (empty -> .)
    MODE            reduce using rule 179 (empty -> .)
    STDV            reduce using rule 179 (empty -> .)
    KMEANS          reduce using rule 179 (empty -> .)
    DERL            reduce using rule 179 (empty -> .)
    DBERN           reduce using rule 179 (empty -> .)
    DPOI            reduce using rule 179 (empty -> .)
    TRANSPOSE       reduce using rule 179 (empty -> .)
    INVERSE         reduce using rule 179 (empty -> .)
    ROTATE          reduce using rule 179 (empty -> .)
    REF             reduce using rule 179 (empty -> .)
    RREF            reduce using rule 179 (empty -> .)
    EULER           reduce using rule 179 (empty -> .)
    DO              reduce using rule 179 (empty -> .)
    READ            reduce using rule 179 (empty -> .)
    RETURN          reduce using rule 179 (empty -> .)
    CBRACKET        reduce using rule 179 (empty -> .)
    CPAREN          reduce using rule 179 (empty -> .)

    cn2                            shift and go to state 404
    empty                          shift and go to state 405

state 376

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (93) cn3 -> . empty
    (179) empty -> .

    OBRACKET        reduce using rule 179 (empty -> .)

    cn3                            shift and go to state 406
    empty                          shift and go to state 407

state 377

    (94) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 408


state 378

    (95) ifblock2 -> estatuto .
    (96) ifblock2 -> estatuto . ifblock2
    (95) ifblock2 -> . estatuto
    (96) ifblock2 -> . estatuto ifblock2
    (97) ifblock2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (179) empty -> .
    (61) asign -> . ID EQUALS expresion SCOLON
    (62) asign -> . ID EQUALS ID SCOLON
    (63) asign -> . ID EQUALS ID asign2 SCOLON
    (64) asign -> . ID asign2 EQUALS ID SCOLON
    (65) asign -> . ID asign2 EQUALS expresion SCOLON
    (66) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (67) asign -> . ID EQUALS funccall afcn1
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (100) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (101) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (98) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (99) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (131) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (136) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (137) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (123) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (129) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 95 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 95 (ifblock2 -> estatuto .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

  ! CBRACKET        [ reduce using rule 179 (empty -> .) ]

    estatuto                       shift and go to state 378
    ifblock2                       shift and go to state 409
    empty                          shift and go to state 379
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 379

    (97) ifblock2 -> empty .

    CBRACKET        reduce using rule 97 (ifblock2 -> empty .)


state 380

    (77) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    EULER           reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RETURN          reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 77 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 381

    (80) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    EULER           reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RETURN          reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 80 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 382

    (85) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 85 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 85 (escrt3 -> STRING escrt2 escrt2 .)


state 383

    (105) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 105 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 384

    (107) xyfunc -> empty .

    CPAREN          reduce using rule 107 (xyfunc -> empty .)


state 385

    (106) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 106 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 386

    (102) plot2 -> LCOR varcte COMMA varcte RCOR .
    (103) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 102 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 410


state 387

    (98) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 411


state 388

    (99) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 412


state 389

    (155) datasetarr -> varcte COMMA datasetarr .

    RCOR            reduce using rule 155 (datasetarr -> varcte COMMA datasetarr .)


state 390

    (150) kval -> varcte COMMA arrfun2 COMMA . arrfun3
    (153) arrfun3 -> . LCOR datasetarr2 RCOR

    LCOR            shift and go to state 414

    arrfun3                        shift and go to state 413

state 391

    (152) arrfun2 -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 415


state 392

    (167) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 416


state 393

    (168) expfunc -> varcte COMMA varcte COMMA . varcte
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 417

state 394

    (174) mmmarray -> libero LCOR datasetarr4 . RCOR COMMA mmmarray
    (175) mmmarray -> libero LCOR datasetarr4 . RCOR

    RCOR            shift and go to state 418


state 395

    (177) datasetarr4 -> varcte .
    (178) datasetarr4 -> varcte . COMMA datasetarr4

    RCOR            reduce using rule 177 (datasetarr4 -> varcte .)
    COMMA           shift and go to state 419


state 396

    (123) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (125) wn2 -> . empty
    (179) empty -> .

    SCOLON          reduce using rule 179 (empty -> .)

    wn2                            shift and go to state 420
    empty                          shift and go to state 421

state 397

    (127) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 127 (dwhileconds -> expresion dwhileconds .)


state 398

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (179) empty -> .

    OBRACKET        reduce using rule 179 (empty -> .)

    mn3                            shift and go to state 422
    empty                          shift and go to state 423

state 399

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (179) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 179 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 179 (empty -> .) ]
  ! CPAREN          [ reduce using rule 179 (empty -> .) ]

    lugstat2                       shift and go to state 424
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 400

    (30) funccall2 -> ID fcn2 funccall2 .

    CPAREN          reduce using rule 30 (funccall2 -> ID fcn2 funccall2 .)


state 401

    (29) funccall2 -> COMMA expresion fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (179) empty -> .

    COMMA           shift and go to state 324
    ID              shift and go to state 322
    CPAREN          reduce using rule 179 (empty -> .)

    funccall2                      shift and go to state 425
    empty                          shift and go to state 325

state 402

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    EULER           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RETURN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 403

    (28) fcn3 -> empty .

    ID              reduce using rule 28 (fcn3 -> empty .)
    IF              reduce using rule 28 (fcn3 -> empty .)
    PRINT           reduce using rule 28 (fcn3 -> empty .)
    PLOT            reduce using rule 28 (fcn3 -> empty .)
    COUNT           reduce using rule 28 (fcn3 -> empty .)
    COUNTIF         reduce using rule 28 (fcn3 -> empty .)
    MEAN            reduce using rule 28 (fcn3 -> empty .)
    MEDIAN          reduce using rule 28 (fcn3 -> empty .)
    MODE            reduce using rule 28 (fcn3 -> empty .)
    STDV            reduce using rule 28 (fcn3 -> empty .)
    KMEANS          reduce using rule 28 (fcn3 -> empty .)
    DERL            reduce using rule 28 (fcn3 -> empty .)
    DBERN           reduce using rule 28 (fcn3 -> empty .)
    DPOI            reduce using rule 28 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 28 (fcn3 -> empty .)
    INVERSE         reduce using rule 28 (fcn3 -> empty .)
    ROTATE          reduce using rule 28 (fcn3 -> empty .)
    REF             reduce using rule 28 (fcn3 -> empty .)
    RREF            reduce using rule 28 (fcn3 -> empty .)
    EULER           reduce using rule 28 (fcn3 -> empty .)
    DO              reduce using rule 28 (fcn3 -> empty .)
    READ            reduce using rule 28 (fcn3 -> empty .)
    RETURN          reduce using rule 28 (fcn3 -> empty .)
    CBRACKET        reduce using rule 28 (fcn3 -> empty .)


state 404

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    EULER           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RETURN          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 405

    (92) cn2 -> empty .

    ID              reduce using rule 92 (cn2 -> empty .)
    IF              reduce using rule 92 (cn2 -> empty .)
    PRINT           reduce using rule 92 (cn2 -> empty .)
    PLOT            reduce using rule 92 (cn2 -> empty .)
    COUNT           reduce using rule 92 (cn2 -> empty .)
    COUNTIF         reduce using rule 92 (cn2 -> empty .)
    MEAN            reduce using rule 92 (cn2 -> empty .)
    MEDIAN          reduce using rule 92 (cn2 -> empty .)
    MODE            reduce using rule 92 (cn2 -> empty .)
    STDV            reduce using rule 92 (cn2 -> empty .)
    KMEANS          reduce using rule 92 (cn2 -> empty .)
    DERL            reduce using rule 92 (cn2 -> empty .)
    DBERN           reduce using rule 92 (cn2 -> empty .)
    DPOI            reduce using rule 92 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 92 (cn2 -> empty .)
    INVERSE         reduce using rule 92 (cn2 -> empty .)
    ROTATE          reduce using rule 92 (cn2 -> empty .)
    REF             reduce using rule 92 (cn2 -> empty .)
    RREF            reduce using rule 92 (cn2 -> empty .)
    EULER           reduce using rule 92 (cn2 -> empty .)
    DO              reduce using rule 92 (cn2 -> empty .)
    READ            reduce using rule 92 (cn2 -> empty .)
    RETURN          reduce using rule 92 (cn2 -> empty .)
    CBRACKET        reduce using rule 92 (cn2 -> empty .)
    CPAREN          reduce using rule 92 (cn2 -> empty .)


state 406

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (94) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 328

    ifblock                        shift and go to state 426

state 407

    (93) cn3 -> empty .

    OBRACKET        reduce using rule 93 (cn3 -> empty .)


state 408

    (94) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 94 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 94 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 409

    (96) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 96 (ifblock2 -> estatuto ifblock2 .)


state 410

    (103) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (102) plot2 -> . LCOR varcte COMMA varcte RCOR
    (103) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (104) plot2 -> . empty
    (179) empty -> .

    LCOR            shift and go to state 173
    CPAREN          reduce using rule 179 (empty -> .)

    plot2                          shift and go to state 427
    empty                          shift and go to state 428

state 411

    (98) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 429


state 412

    (99) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 63

    cond                           shift and go to state 430

state 413

    (150) kval -> varcte COMMA arrfun2 COMMA arrfun3 .

    CPAREN          reduce using rule 150 (kval -> varcte COMMA arrfun2 COMMA arrfun3 .)


state 414

    (153) arrfun3 -> LCOR . datasetarr2 RCOR
    (156) datasetarr2 -> . varcte
    (157) datasetarr2 -> . varcte COMMA datasetarr2
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    datasetarr2                    shift and go to state 431
    varcte                         shift and go to state 432

state 415

    (152) arrfun2 -> LCOR datasetarr RCOR .

    COMMA           reduce using rule 152 (arrfun2 -> LCOR datasetarr RCOR .)


state 416

    (167) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 167 (expfunc -> ID COMMA ID COMMA ID .)


state 417

    (168) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 168 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 418

    (174) mmmarray -> libero LCOR datasetarr4 RCOR . COMMA mmmarray
    (175) mmmarray -> libero LCOR datasetarr4 RCOR .

    COMMA           shift and go to state 433
    RCOR            reduce using rule 175 (mmmarray -> libero LCOR datasetarr4 RCOR .)


state 419

    (178) datasetarr4 -> varcte COMMA . datasetarr4
    (177) datasetarr4 -> . varcte
    (178) datasetarr4 -> . varcte COMMA datasetarr4
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 395
    datasetarr4                    shift and go to state 434

state 420

    (123) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 435


state 421

    (125) wn2 -> empty .

    SCOLON          reduce using rule 125 (wn2 -> empty .)


state 422

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (34) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 437

    funblock                       shift and go to state 436

state 423

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 424

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 425

    (29) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 29 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 426

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 438


state 427

    (103) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 103 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 428

    (104) plot2 -> empty .

    CPAREN          reduce using rule 104 (plot2 -> empty .)


state 429

    (98) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    EULER           reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RETURN          reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 98 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 430

    (99) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 439


state 431

    (153) arrfun3 -> LCOR datasetarr2 . RCOR

    RCOR            shift and go to state 440


state 432

    (156) datasetarr2 -> varcte .
    (157) datasetarr2 -> varcte . COMMA datasetarr2

    RCOR            reduce using rule 156 (datasetarr2 -> varcte .)
    COMMA           shift and go to state 441


state 433

    (174) mmmarray -> libero LCOR datasetarr4 RCOR COMMA . mmmarray
    (174) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (175) mmmarray -> . libero LCOR datasetarr4 RCOR
    (176) libero -> . empty
    (179) empty -> .

    LCOR            reduce using rule 179 (empty -> .)

    libero                         shift and go to state 306
    mmmarray                       shift and go to state 442
    empty                          shift and go to state 307

state 434

    (178) datasetarr4 -> varcte COMMA datasetarr4 .

    RCOR            reduce using rule 178 (datasetarr4 -> varcte COMMA datasetarr4 .)


state 435

    (123) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    EULER           reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RETURN          reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 123 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 436

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (179) empty -> .

    FUNC            reduce using rule 179 (empty -> .)
    OBRACKET        reduce using rule 179 (empty -> .)

    mn7                            shift and go to state 443
    empty                          shift and go to state 444

state 437

    (34) funblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (45) estatuto -> . asign
    (46) estatuto -> . cond
    (47) estatuto -> . escrt
    (48) estatuto -> . plot
    (49) estatuto -> . count
    (50) estatuto -> . countif
    (51) estatuto -> . metodos
    (52) estatuto -> . dwhile
    (53) estatuto -> . readln
    (54) estatuto -> . funccall
    (55) estatuto -> . regreso
    (179) empty -> .
    (61) asign -> . ID EQUALS expresion SCOLON
    (62) asign -> . ID EQUALS ID SCOLON
    (63) asign -> . ID EQUALS ID asign2 SCOLON
    (64) asign -> . ID asign2 EQUALS ID SCOLON
    (65) asign -> . ID asign2 EQUALS expresion SCOLON
    (66) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (67) asign -> . ID EQUALS funccall afcn1
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (90) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (77) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (79) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (80) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (100) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (101) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (98) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (99) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (131) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (135) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (136) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (137) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (139) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (144) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (123) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (129) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (56) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (57) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 179 (empty -> .)
    ID              shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    PLOT            shift and go to state 65
    COUNT           shift and go to state 66
    COUNTIF         shift and go to state 67
    MEAN            shift and go to state 68
    MEDIAN          shift and go to state 69
    MODE            shift and go to state 70
    STDV            shift and go to state 71
    KMEANS          shift and go to state 72
    DERL            shift and go to state 73
    DBERN           shift and go to state 74
    DPOI            shift and go to state 75
    TRANSPOSE       shift and go to state 76
    INVERSE         shift and go to state 77
    ROTATE          shift and go to state 78
    REF             shift and go to state 79
    RREF            shift and go to state 80
    EULER           shift and go to state 81
    DO              shift and go to state 82
    READ            shift and go to state 83
    RETURN          shift and go to state 84

    block2                         shift and go to state 445
    estatuto                       shift and go to state 49
    empty                          shift and go to state 50
    asign                          shift and go to state 51
    cond                           shift and go to state 52
    escrt                          shift and go to state 53
    plot                           shift and go to state 54
    count                          shift and go to state 55
    countif                        shift and go to state 56
    metodos                        shift and go to state 57
    dwhile                         shift and go to state 58
    readln                         shift and go to state 59
    funccall                       shift and go to state 60
    regreso                        shift and go to state 61

state 438

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (92) cn2 -> . empty
    (179) empty -> .

    ID              reduce using rule 179 (empty -> .)
    IF              reduce using rule 179 (empty -> .)
    PRINT           reduce using rule 179 (empty -> .)
    PLOT            reduce using rule 179 (empty -> .)
    COUNT           reduce using rule 179 (empty -> .)
    COUNTIF         reduce using rule 179 (empty -> .)
    MEAN            reduce using rule 179 (empty -> .)
    MEDIAN          reduce using rule 179 (empty -> .)
    MODE            reduce using rule 179 (empty -> .)
    STDV            reduce using rule 179 (empty -> .)
    KMEANS          reduce using rule 179 (empty -> .)
    DERL            reduce using rule 179 (empty -> .)
    DBERN           reduce using rule 179 (empty -> .)
    DPOI            reduce using rule 179 (empty -> .)
    TRANSPOSE       reduce using rule 179 (empty -> .)
    INVERSE         reduce using rule 179 (empty -> .)
    ROTATE          reduce using rule 179 (empty -> .)
    REF             reduce using rule 179 (empty -> .)
    RREF            reduce using rule 179 (empty -> .)
    EULER           reduce using rule 179 (empty -> .)
    DO              reduce using rule 179 (empty -> .)
    READ            reduce using rule 179 (empty -> .)
    RETURN          reduce using rule 179 (empty -> .)
    CBRACKET        reduce using rule 179 (empty -> .)
    CPAREN          reduce using rule 179 (empty -> .)

    cn2                            shift and go to state 446
    empty                          shift and go to state 405

state 439

    (99) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 447


state 440

    (153) arrfun3 -> LCOR datasetarr2 RCOR .

    CPAREN          reduce using rule 153 (arrfun3 -> LCOR datasetarr2 RCOR .)


state 441

    (157) datasetarr2 -> varcte COMMA . datasetarr2
    (156) datasetarr2 -> . varcte
    (157) datasetarr2 -> . varcte COMMA datasetarr2
    (118) varcte -> . ID
    (119) varcte -> . ID asign2
    (120) varcte -> . NUMERIC
    (121) varcte -> . NUMBER
    (122) varcte -> . LOGICAL

    ID              shift and go to state 36
    NUMERIC         shift and go to state 41
    NUMBER          shift and go to state 99
    LOGICAL         shift and go to state 42

    varcte                         shift and go to state 432
    datasetarr2                    shift and go to state 448

state 442

    (174) mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .

    RCOR            reduce using rule 174 (mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .)


state 443

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 444

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 445

    (34) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 449


state 446

    (90) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    EULER           reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RETURN          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 90 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 447

    (99) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    EULER           reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RETURN          reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 99 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 448

    (157) datasetarr2 -> varcte COMMA datasetarr2 .

    RCOR            reduce using rule 157 (datasetarr2 -> varcte COMMA datasetarr2 .)


state 449

    (34) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 37 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 39 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 158 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 199 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 200 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 203 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 207 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 236 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 239 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 266 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 279 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 279 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 280 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 334 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 49 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 49
WARNING: reduce/reduce conflict in state 165 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 165
WARNING: reduce/reduce conflict in state 172 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 172
WARNING: reduce/reduce conflict in state 193 resolved using rule (regnum1 -> <empty>)
WARNING: rejected rule (varcte -> ID) in state 193
WARNING: reduce/reduce conflict in state 209 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 209
WARNING: reduce/reduce conflict in state 260 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 260
WARNING: reduce/reduce conflict in state 279 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 279
WARNING: reduce/reduce conflict in state 378 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 378
WARNING: reduce/reduce conflict in state 399 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 399
