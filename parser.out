Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    MONT
    OR
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
Rule 26    fcn1 -> empty
Rule 27    fcn2 -> empty
Rule 28    fcn3 -> empty
Rule 29    funccall2 -> COMMA expresion fcn2 funccall2
Rule 30    funccall2 -> ID fcn2 funccall2
Rule 31    funccall2 -> empty
Rule 32    modules2 -> vars
Rule 33    modules2 -> empty
Rule 34    funblock -> OBRACKET block2 CBRACKET
Rule 35    block -> OBRACKET block2 CBRACKET
Rule 36    block2 -> estatuto
Rule 37    block2 -> estatuto block2
Rule 38    block2 -> empty
Rule 39    tipo -> INT
Rule 40    tipo -> BOOL
Rule 41    tipo -> DOUBLE
Rule 42    tipo -> STRING
Rule 43    tipo -> CHAR
Rule 44    estatuto -> asign
Rule 45    estatuto -> cond
Rule 46    estatuto -> escrt
Rule 47    estatuto -> plot
Rule 48    estatuto -> count
Rule 49    estatuto -> countif
Rule 50    estatuto -> metodos
Rule 51    estatuto -> dwhile
Rule 52    estatuto -> readln
Rule 53    estatuto -> funccall
Rule 54    asign -> ID EQUALS expresion SCOLON
Rule 55    asign -> ID EQUALS ID SCOLON
Rule 56    asign -> ID EQUALS ID asign2 SCOLON
Rule 57    asign -> ID asign2 EQUALS ID SCOLON
Rule 58    asign -> ID asign2 EQUALS expresion SCOLON
Rule 59    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 60    asign2 -> LCOR expresion RCOR LCOR varcte RCOR
Rule 61    asign2 -> LCOR expresion RCOR LCOR expresion RCOR
Rule 62    asign2 -> LCOR varcte RCOR LCOR expresion RCOR
Rule 63    asign2 -> LCOR varcte RCOR LCOR varcte RCOR
Rule 64    asign2 -> LCOR expresion RCOR
Rule 65    asign2 -> LCOR varcte RCOR
Rule 66    asign3 -> LCOR expresion RCOR
Rule 67    asign3 -> LCOR varcte RCOR
Rule 68    asign3 -> empty
Rule 69    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 70    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 71    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 72    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 73    escrt2 -> COMMA escrt3
Rule 74    escrt2 -> empty
Rule 75    escrt3 -> ID escrt2
Rule 76    escrt3 -> ID
Rule 77    escrt3 -> STRING escrt2 escrt2
Rule 78    en1 -> empty
Rule 79    en2 -> empty
Rule 80    en3 -> empty
Rule 81    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 82    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 83    cn1 -> empty
Rule 84    cn2 -> empty
Rule 85    cn3 -> empty
Rule 86    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 87    ifblock2 -> estatuto
Rule 88    ifblock2 -> estatuto ifblock2
Rule 89    ifblock2 -> empty
Rule 90    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 91    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 92    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 93    plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 94    plot2 -> LCOR varcte COMMA varcte RCOR
Rule 95    plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 96    plot2 -> empty
Rule 97    xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 98    xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 99    xyfunc -> empty
Rule 100   expresion -> exp
Rule 101   expresion -> expresion RELOP exp
Rule 102   exp -> termino
Rule 103   exp -> termino PLUS exp
Rule 104   exp -> termino MINUS exp
Rule 105   termino -> factor
Rule 106   termino -> factor MULT termino
Rule 107   termino -> factor DIV termino
Rule 108   factor -> OPAREN expresion CPAREN
Rule 109   factor -> varcte
Rule 110   varcte -> ID
Rule 111   varcte -> ID asign2
Rule 112   varcte -> NUMERIC
Rule 113   varcte -> NUMBER
Rule 114   varcte -> LOGICAL
Rule 115   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 116   wn1 -> empty
Rule 117   wn2 -> empty
Rule 118   wblock -> OBRACKET block2 CBRACKET
Rule 119   dwhileconds -> expresion dwhileconds
Rule 120   dwhileconds -> empty
Rule 121   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 122   rn1 -> empty
Rule 123   metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON
Rule 124   metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
Rule 125   metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON
Rule 126   metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON
Rule 127   metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON
Rule 128   metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON
Rule 129   metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
Rule 130   metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
Rule 131   metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
Rule 132   metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
Rule 133   metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
Rule 134   metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON
Rule 135   metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON
Rule 136   metodos -> EULER OPAREN CPAREN SCOLON
Rule 137   fe1 -> empty
Rule 138   fe2 -> empty
Rule 139   fe3 -> empty
Rule 140   fe4 -> empty
Rule 141   fe5 -> empty
Rule 142   kval -> varcte COMMA arrfun2 COMMA arrfun3
Rule 143   arrfun -> LCOR datasetarr RCOR
Rule 144   arrfun2 -> LCOR datasetarr RCOR
Rule 145   arrfun3 -> LCOR datasetarr2 RCOR
Rule 146   datasetarr -> varcte
Rule 147   datasetarr -> varcte COMMA datasetarr
Rule 148   datasetarr2 -> varcte
Rule 149   datasetarr2 -> varcte COMMA datasetarr2
Rule 150   dmn1 -> empty
Rule 151   dbrn1 -> empty
Rule 152   dp1 -> empty
Rule 153   tp1 -> empty
Rule 154   tp2 -> empty
Rule 155   tp3 -> empty
Rule 156   tp4 -> empty
Rule 157   tp5 -> empty
Rule 158   expfunc -> ID COMMA ID COMMA ID
Rule 159   expfunc -> varcte COMMA varcte COMMA varcte
Rule 160   expfunc2 -> ID COMMA ID
Rule 161   expfunc2 -> varcte COMMA varcte
Rule 162   mmmfunc -> LCOR RCOR
Rule 163   mmmfunc -> LCOR mmmarray RCOR
Rule 164   mmmfunc -> ID
Rule 165   mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray
Rule 166   mmmarray -> libero LCOR datasetarr4 RCOR
Rule 167   libero -> empty
Rule 168   datasetarr4 -> varcte
Rule 169   datasetarr4 -> varcte COMMA datasetarr4
Rule 170   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 40
CBRACKET             : 34 35 86 118
CHAR                 : 43
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 29 73 90 90 91 91 91 94 95 95 142 142 147 149 158 158 159 159 160 161 165 169
COMMENT              : 
COUNT                : 90
COUNTIF              : 91
CPAREN               : 19 24 25 69 70 71 72 81 82 90 91 92 93 108 115 121 123 124 125 126 127 128 129 130 131 132 133 134 135 136
CTED                 : 
CTEI                 : 
DBERN                : 129
DERL                 : 128
DIFF                 : 
DIV                  : 107
DO                   : 115
DOUBLE               : 41
DPOI                 : 130
ELSE                 : 82
EQ                   : 
EQUALS               : 54 55 56 57 58 59 97 98
EULER                : 136
FUNC                 : 19
FX                   : 97
FY                   : 98
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 25 25 30 54 55 55 56 56 57 57 58 59 59 69 75 76 90 91 110 111 121 158 158 158 160 160 164
IF                   : 81 82
INT                  : 39
INTEGER              : 
INVERSE              : 132
KMEANS               : 127
LCOR                 : 12 13 14 14 15 15 60 60 61 61 62 62 63 63 64 65 66 67 94 95 143 144 145 162 163 165 166
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 114
LUGSTAT              : 1
MEAN                 : 123
MEDIAN               : 124
MINUS                : 104
MODE                 : 125
MONT                 : 
MULT                 : 106
NUMBER               : 12 13 14 14 15 15 113
NUMERIC              : 112
OBRACKET             : 34 35 86 118
OPAREN               : 19 24 25 69 70 71 72 81 82 90 91 92 93 108 115 121 123 124 125 126 127 128 129 130 131 132 133 134 135 136
OR                   : 
PER                  : 
PLOT                 : 92 93
PLUS                 : 103
PRINT                : 69 70 71 72
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 60 60 61 61 62 62 63 63 64 65 66 67 94 95 143 144 145 162 163 165 166
READ                 : 121
REF                  : 134
RELOP                : 101
ROTATE               : 133
RREF                 : 135
SCOLON               : 1 11 12 13 14 15 16 54 55 56 57 58 59 69 70 71 72 81 82 90 91 92 93 97 98 115 121 123 124 125 126 127 128 129 130 131 132 133 134 135 136
STDV                 : 126
STRING               : 42 71 72 77
TIPO                 : 
TRANSPOSE            : 131
VAR                  : 9
WHILE                : 115
error                : 

Nonterminals, with rules where they appear

addmain              : 1
arrfun               : 123 124 125 126
arrfun2              : 142
arrfun3              : 142
asign                : 44
asign2               : 16 17 56 57 58 59 59 111
asign3               : 
block                : 1
block2               : 34 35 37 118
cn1                  : 81 82
cn2                  : 81 82
cn3                  : 82
cond                 : 45 91
count                : 48
countif              : 49
datasetarr           : 143 144 147
datasetarr2          : 145 149
datasetarr4          : 165 166 169
dbrn1                : 129
dmn1                 : 128
dp1                  : 130
dwhile               : 51
dwhileconds          : 115 119
empty                : 2 3 5 8 18 20 21 23 26 27 28 31 33 38 68 74 78 79 80 83 84 85 89 96 99 116 117 120 122 137 138 139 140 141 150 151 152 153 154 155 156 157 167
en1                  : 70
en2                  : 71 72
en3                  : 69
escrt                : 46
escrt2               : 69 72 75 77 77
escrt3               : 73
estatuto             : 36 37 87 88
exp                  : 97 98 100 101 103 104
expfunc              : 128
expfunc2             : 129 130
expresion            : 24 29 54 58 60 61 61 62 64 66 70 81 82 101 108 119
factor               : 105 106 107
fcn1                 : 24 25
fcn2                 : 24 25 29 30
fcn3                 : 24
fe1                  : 123
fe2                  : 124
fe3                  : 125
fe4                  : 126
fe5                  : 127
funblock             : 19
funccall             : 53
funccall2            : 24 25 29 30
ifblock              : 81 82 82
ifblock2             : 86 88
kval                 : 127
libero               : 165 166
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 50
mmmarray             : 163 165
mmmfunc              : 131 132 133 134 135
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 47
plot2                : 93 95
readln               : 52
rn1                  : 121
savename             : 
termino              : 102 103 104 106 107
tipo                 : 11 12 13 14 15 16 19
tp1                  : 131
tp2                  : 132
tp3                  : 133
tp4                  : 134
tp5                  : 135
varcte               : 60 62 63 63 65 67 90 90 91 91 94 94 95 95 109 142 146 147 148 149 159 159 159 161 161 168 169
vars                 : 4 32
vars1                : 9 10 17
wblock               : 115
wn1                  : 115
wn2                  : 115
xyfunc               : 92 97 98

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (170) empty -> .

    VAR             reduce using rule 170 (empty -> .)
    FUNC            reduce using rule 170 (empty -> .)
    OBRACKET        reduce using rule 170 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (170) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 170 (empty -> .)
    OBRACKET        reduce using rule 170 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (170) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 170 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (170) empty -> .

    OBRACKET        reduce using rule 170 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (170) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 170 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (35) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (60) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (61) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (62) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (63) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (64) asign2 -> LCOR . expresion RCOR
    (65) asign2 -> LCOR . varcte RCOR
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    NUMBER          shift and go to state 36
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (35) block -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (170) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (123) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (124) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (125) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (126) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (127) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (128) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (129) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (130) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (131) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (121) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 170 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    EULER           shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    block2                         shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 82

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 83


state 30

    (39) tipo -> INT .

    SCOLON          reduce using rule 39 (tipo -> INT .)
    OPAREN          reduce using rule 39 (tipo -> INT .)


state 31

    (40) tipo -> BOOL .

    SCOLON          reduce using rule 40 (tipo -> BOOL .)
    OPAREN          reduce using rule 40 (tipo -> BOOL .)


state 32

    (41) tipo -> DOUBLE .

    SCOLON          reduce using rule 41 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 41 (tipo -> DOUBLE .)


state 33

    (42) tipo -> STRING .

    SCOLON          reduce using rule 42 (tipo -> STRING .)
    OPAREN          reduce using rule 42 (tipo -> STRING .)


state 34

    (43) tipo -> CHAR .

    SCOLON          reduce using rule 43 (tipo -> CHAR .)
    OPAREN          reduce using rule 43 (tipo -> CHAR .)


state 35

    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

    RCOR            reduce using rule 110 (varcte -> ID .)
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    CPAREN          reduce using rule 110 (varcte -> ID .)
    SCOLON          reduce using rule 110 (varcte -> ID .)
    COMMA           reduce using rule 110 (varcte -> ID .)
    ID              reduce using rule 110 (varcte -> ID .)
    OPAREN          reduce using rule 110 (varcte -> ID .)
    NUMERIC         reduce using rule 110 (varcte -> ID .)
    NUMBER          reduce using rule 110 (varcte -> ID .)
    LOGICAL         reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 85

    asign2                         shift and go to state 84

state 36

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (113) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 86
    MULT            reduce using rule 113 (varcte -> NUMBER .)
    DIV             reduce using rule 113 (varcte -> NUMBER .)
    PLUS            reduce using rule 113 (varcte -> NUMBER .)
    MINUS           reduce using rule 113 (varcte -> NUMBER .)
    RELOP           reduce using rule 113 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 113 (varcte -> NUMBER .) ]


state 37

    (60) asign2 -> LCOR expresion . RCOR LCOR varcte RCOR
    (61) asign2 -> LCOR expresion . RCOR LCOR expresion RCOR
    (64) asign2 -> LCOR expresion . RCOR
    (101) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 87
    RELOP           shift and go to state 88


state 38

    (62) asign2 -> LCOR varcte . RCOR LCOR expresion RCOR
    (63) asign2 -> LCOR varcte . RCOR LCOR varcte RCOR
    (65) asign2 -> LCOR varcte . RCOR
    (109) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 89
    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)

  ! RCOR            [ reduce using rule 109 (factor -> varcte .) ]


state 39

    (100) expresion -> exp .

    RCOR            reduce using rule 100 (expresion -> exp .)
    RELOP           reduce using rule 100 (expresion -> exp .)
    CPAREN          reduce using rule 100 (expresion -> exp .)
    SCOLON          reduce using rule 100 (expresion -> exp .)
    COMMA           reduce using rule 100 (expresion -> exp .)
    ID              reduce using rule 100 (expresion -> exp .)
    OPAREN          reduce using rule 100 (expresion -> exp .)
    NUMERIC         reduce using rule 100 (expresion -> exp .)
    NUMBER          reduce using rule 100 (expresion -> exp .)
    LOGICAL         reduce using rule 100 (expresion -> exp .)


state 40

    (112) varcte -> NUMERIC .

    RCOR            reduce using rule 112 (varcte -> NUMERIC .)
    MULT            reduce using rule 112 (varcte -> NUMERIC .)
    DIV             reduce using rule 112 (varcte -> NUMERIC .)
    PLUS            reduce using rule 112 (varcte -> NUMERIC .)
    MINUS           reduce using rule 112 (varcte -> NUMERIC .)
    RELOP           reduce using rule 112 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 112 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 112 (varcte -> NUMERIC .)
    COMMA           reduce using rule 112 (varcte -> NUMERIC .)
    ID              reduce using rule 112 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 112 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 112 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 112 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 112 (varcte -> NUMERIC .)


state 41

    (114) varcte -> LOGICAL .

    RCOR            reduce using rule 114 (varcte -> LOGICAL .)
    MULT            reduce using rule 114 (varcte -> LOGICAL .)
    DIV             reduce using rule 114 (varcte -> LOGICAL .)
    PLUS            reduce using rule 114 (varcte -> LOGICAL .)
    MINUS           reduce using rule 114 (varcte -> LOGICAL .)
    RELOP           reduce using rule 114 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 114 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 114 (varcte -> LOGICAL .)
    COMMA           reduce using rule 114 (varcte -> LOGICAL .)
    ID              reduce using rule 114 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 114 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 114 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 114 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 114 (varcte -> LOGICAL .)


state 42

    (102) exp -> termino .
    (103) exp -> termino . PLUS exp
    (104) exp -> termino . MINUS exp

    RCOR            reduce using rule 102 (exp -> termino .)
    RELOP           reduce using rule 102 (exp -> termino .)
    CPAREN          reduce using rule 102 (exp -> termino .)
    SCOLON          reduce using rule 102 (exp -> termino .)
    COMMA           reduce using rule 102 (exp -> termino .)
    ID              reduce using rule 102 (exp -> termino .)
    OPAREN          reduce using rule 102 (exp -> termino .)
    NUMERIC         reduce using rule 102 (exp -> termino .)
    NUMBER          reduce using rule 102 (exp -> termino .)
    LOGICAL         reduce using rule 102 (exp -> termino .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91


state 43

    (105) termino -> factor .
    (106) termino -> factor . MULT termino
    (107) termino -> factor . DIV termino

    PLUS            reduce using rule 105 (termino -> factor .)
    MINUS           reduce using rule 105 (termino -> factor .)
    RCOR            reduce using rule 105 (termino -> factor .)
    RELOP           reduce using rule 105 (termino -> factor .)
    CPAREN          reduce using rule 105 (termino -> factor .)
    SCOLON          reduce using rule 105 (termino -> factor .)
    COMMA           reduce using rule 105 (termino -> factor .)
    ID              reduce using rule 105 (termino -> factor .)
    OPAREN          reduce using rule 105 (termino -> factor .)
    NUMERIC         reduce using rule 105 (termino -> factor .)
    NUMBER          reduce using rule 105 (termino -> factor .)
    LOGICAL         reduce using rule 105 (termino -> factor .)
    MULT            shift and go to state 92
    DIV             shift and go to state 93


state 44

    (108) factor -> OPAREN . expresion CPAREN
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 94
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 45

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 97

state 46

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 98

state 47

    (35) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 99


state 48

    (36) block2 -> estatuto .
    (37) block2 -> estatuto . block2
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (170) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (123) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (124) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (125) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (126) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (127) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (128) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (129) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (130) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (131) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (121) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 36 (block2 -> estatuto .)
    CBRACKET        reduce using rule 36 (block2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    EULER           shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

  ! CBRACKET        [ reduce using rule 170 (empty -> .) ]

    estatuto                       shift and go to state 48
    block2                         shift and go to state 100
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 49

    (38) block2 -> empty .

    CBRACKET        reduce using rule 38 (block2 -> empty .)


state 50

    (44) estatuto -> asign .

    ID              reduce using rule 44 (estatuto -> asign .)
    IF              reduce using rule 44 (estatuto -> asign .)
    PRINT           reduce using rule 44 (estatuto -> asign .)
    PLOT            reduce using rule 44 (estatuto -> asign .)
    COUNT           reduce using rule 44 (estatuto -> asign .)
    COUNTIF         reduce using rule 44 (estatuto -> asign .)
    MEAN            reduce using rule 44 (estatuto -> asign .)
    MEDIAN          reduce using rule 44 (estatuto -> asign .)
    MODE            reduce using rule 44 (estatuto -> asign .)
    STDV            reduce using rule 44 (estatuto -> asign .)
    KMEANS          reduce using rule 44 (estatuto -> asign .)
    DERL            reduce using rule 44 (estatuto -> asign .)
    DBERN           reduce using rule 44 (estatuto -> asign .)
    DPOI            reduce using rule 44 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 44 (estatuto -> asign .)
    INVERSE         reduce using rule 44 (estatuto -> asign .)
    ROTATE          reduce using rule 44 (estatuto -> asign .)
    REF             reduce using rule 44 (estatuto -> asign .)
    RREF            reduce using rule 44 (estatuto -> asign .)
    EULER           reduce using rule 44 (estatuto -> asign .)
    DO              reduce using rule 44 (estatuto -> asign .)
    READ            reduce using rule 44 (estatuto -> asign .)
    CBRACKET        reduce using rule 44 (estatuto -> asign .)


state 51

    (45) estatuto -> cond .

    ID              reduce using rule 45 (estatuto -> cond .)
    IF              reduce using rule 45 (estatuto -> cond .)
    PRINT           reduce using rule 45 (estatuto -> cond .)
    PLOT            reduce using rule 45 (estatuto -> cond .)
    COUNT           reduce using rule 45 (estatuto -> cond .)
    COUNTIF         reduce using rule 45 (estatuto -> cond .)
    MEAN            reduce using rule 45 (estatuto -> cond .)
    MEDIAN          reduce using rule 45 (estatuto -> cond .)
    MODE            reduce using rule 45 (estatuto -> cond .)
    STDV            reduce using rule 45 (estatuto -> cond .)
    KMEANS          reduce using rule 45 (estatuto -> cond .)
    DERL            reduce using rule 45 (estatuto -> cond .)
    DBERN           reduce using rule 45 (estatuto -> cond .)
    DPOI            reduce using rule 45 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 45 (estatuto -> cond .)
    INVERSE         reduce using rule 45 (estatuto -> cond .)
    ROTATE          reduce using rule 45 (estatuto -> cond .)
    REF             reduce using rule 45 (estatuto -> cond .)
    RREF            reduce using rule 45 (estatuto -> cond .)
    EULER           reduce using rule 45 (estatuto -> cond .)
    DO              reduce using rule 45 (estatuto -> cond .)
    READ            reduce using rule 45 (estatuto -> cond .)
    CBRACKET        reduce using rule 45 (estatuto -> cond .)


state 52

    (46) estatuto -> escrt .

    ID              reduce using rule 46 (estatuto -> escrt .)
    IF              reduce using rule 46 (estatuto -> escrt .)
    PRINT           reduce using rule 46 (estatuto -> escrt .)
    PLOT            reduce using rule 46 (estatuto -> escrt .)
    COUNT           reduce using rule 46 (estatuto -> escrt .)
    COUNTIF         reduce using rule 46 (estatuto -> escrt .)
    MEAN            reduce using rule 46 (estatuto -> escrt .)
    MEDIAN          reduce using rule 46 (estatuto -> escrt .)
    MODE            reduce using rule 46 (estatuto -> escrt .)
    STDV            reduce using rule 46 (estatuto -> escrt .)
    KMEANS          reduce using rule 46 (estatuto -> escrt .)
    DERL            reduce using rule 46 (estatuto -> escrt .)
    DBERN           reduce using rule 46 (estatuto -> escrt .)
    DPOI            reduce using rule 46 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 46 (estatuto -> escrt .)
    INVERSE         reduce using rule 46 (estatuto -> escrt .)
    ROTATE          reduce using rule 46 (estatuto -> escrt .)
    REF             reduce using rule 46 (estatuto -> escrt .)
    RREF            reduce using rule 46 (estatuto -> escrt .)
    EULER           reduce using rule 46 (estatuto -> escrt .)
    DO              reduce using rule 46 (estatuto -> escrt .)
    READ            reduce using rule 46 (estatuto -> escrt .)
    CBRACKET        reduce using rule 46 (estatuto -> escrt .)


state 53

    (47) estatuto -> plot .

    ID              reduce using rule 47 (estatuto -> plot .)
    IF              reduce using rule 47 (estatuto -> plot .)
    PRINT           reduce using rule 47 (estatuto -> plot .)
    PLOT            reduce using rule 47 (estatuto -> plot .)
    COUNT           reduce using rule 47 (estatuto -> plot .)
    COUNTIF         reduce using rule 47 (estatuto -> plot .)
    MEAN            reduce using rule 47 (estatuto -> plot .)
    MEDIAN          reduce using rule 47 (estatuto -> plot .)
    MODE            reduce using rule 47 (estatuto -> plot .)
    STDV            reduce using rule 47 (estatuto -> plot .)
    KMEANS          reduce using rule 47 (estatuto -> plot .)
    DERL            reduce using rule 47 (estatuto -> plot .)
    DBERN           reduce using rule 47 (estatuto -> plot .)
    DPOI            reduce using rule 47 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 47 (estatuto -> plot .)
    INVERSE         reduce using rule 47 (estatuto -> plot .)
    ROTATE          reduce using rule 47 (estatuto -> plot .)
    REF             reduce using rule 47 (estatuto -> plot .)
    RREF            reduce using rule 47 (estatuto -> plot .)
    EULER           reduce using rule 47 (estatuto -> plot .)
    DO              reduce using rule 47 (estatuto -> plot .)
    READ            reduce using rule 47 (estatuto -> plot .)
    CBRACKET        reduce using rule 47 (estatuto -> plot .)


state 54

    (48) estatuto -> count .

    ID              reduce using rule 48 (estatuto -> count .)
    IF              reduce using rule 48 (estatuto -> count .)
    PRINT           reduce using rule 48 (estatuto -> count .)
    PLOT            reduce using rule 48 (estatuto -> count .)
    COUNT           reduce using rule 48 (estatuto -> count .)
    COUNTIF         reduce using rule 48 (estatuto -> count .)
    MEAN            reduce using rule 48 (estatuto -> count .)
    MEDIAN          reduce using rule 48 (estatuto -> count .)
    MODE            reduce using rule 48 (estatuto -> count .)
    STDV            reduce using rule 48 (estatuto -> count .)
    KMEANS          reduce using rule 48 (estatuto -> count .)
    DERL            reduce using rule 48 (estatuto -> count .)
    DBERN           reduce using rule 48 (estatuto -> count .)
    DPOI            reduce using rule 48 (estatuto -> count .)
    TRANSPOSE       reduce using rule 48 (estatuto -> count .)
    INVERSE         reduce using rule 48 (estatuto -> count .)
    ROTATE          reduce using rule 48 (estatuto -> count .)
    REF             reduce using rule 48 (estatuto -> count .)
    RREF            reduce using rule 48 (estatuto -> count .)
    EULER           reduce using rule 48 (estatuto -> count .)
    DO              reduce using rule 48 (estatuto -> count .)
    READ            reduce using rule 48 (estatuto -> count .)
    CBRACKET        reduce using rule 48 (estatuto -> count .)


state 55

    (49) estatuto -> countif .

    ID              reduce using rule 49 (estatuto -> countif .)
    IF              reduce using rule 49 (estatuto -> countif .)
    PRINT           reduce using rule 49 (estatuto -> countif .)
    PLOT            reduce using rule 49 (estatuto -> countif .)
    COUNT           reduce using rule 49 (estatuto -> countif .)
    COUNTIF         reduce using rule 49 (estatuto -> countif .)
    MEAN            reduce using rule 49 (estatuto -> countif .)
    MEDIAN          reduce using rule 49 (estatuto -> countif .)
    MODE            reduce using rule 49 (estatuto -> countif .)
    STDV            reduce using rule 49 (estatuto -> countif .)
    KMEANS          reduce using rule 49 (estatuto -> countif .)
    DERL            reduce using rule 49 (estatuto -> countif .)
    DBERN           reduce using rule 49 (estatuto -> countif .)
    DPOI            reduce using rule 49 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 49 (estatuto -> countif .)
    INVERSE         reduce using rule 49 (estatuto -> countif .)
    ROTATE          reduce using rule 49 (estatuto -> countif .)
    REF             reduce using rule 49 (estatuto -> countif .)
    RREF            reduce using rule 49 (estatuto -> countif .)
    EULER           reduce using rule 49 (estatuto -> countif .)
    DO              reduce using rule 49 (estatuto -> countif .)
    READ            reduce using rule 49 (estatuto -> countif .)
    CBRACKET        reduce using rule 49 (estatuto -> countif .)


state 56

    (50) estatuto -> metodos .

    ID              reduce using rule 50 (estatuto -> metodos .)
    IF              reduce using rule 50 (estatuto -> metodos .)
    PRINT           reduce using rule 50 (estatuto -> metodos .)
    PLOT            reduce using rule 50 (estatuto -> metodos .)
    COUNT           reduce using rule 50 (estatuto -> metodos .)
    COUNTIF         reduce using rule 50 (estatuto -> metodos .)
    MEAN            reduce using rule 50 (estatuto -> metodos .)
    MEDIAN          reduce using rule 50 (estatuto -> metodos .)
    MODE            reduce using rule 50 (estatuto -> metodos .)
    STDV            reduce using rule 50 (estatuto -> metodos .)
    KMEANS          reduce using rule 50 (estatuto -> metodos .)
    DERL            reduce using rule 50 (estatuto -> metodos .)
    DBERN           reduce using rule 50 (estatuto -> metodos .)
    DPOI            reduce using rule 50 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 50 (estatuto -> metodos .)
    INVERSE         reduce using rule 50 (estatuto -> metodos .)
    ROTATE          reduce using rule 50 (estatuto -> metodos .)
    REF             reduce using rule 50 (estatuto -> metodos .)
    RREF            reduce using rule 50 (estatuto -> metodos .)
    EULER           reduce using rule 50 (estatuto -> metodos .)
    DO              reduce using rule 50 (estatuto -> metodos .)
    READ            reduce using rule 50 (estatuto -> metodos .)
    CBRACKET        reduce using rule 50 (estatuto -> metodos .)


state 57

    (51) estatuto -> dwhile .

    ID              reduce using rule 51 (estatuto -> dwhile .)
    IF              reduce using rule 51 (estatuto -> dwhile .)
    PRINT           reduce using rule 51 (estatuto -> dwhile .)
    PLOT            reduce using rule 51 (estatuto -> dwhile .)
    COUNT           reduce using rule 51 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 51 (estatuto -> dwhile .)
    MEAN            reduce using rule 51 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 51 (estatuto -> dwhile .)
    MODE            reduce using rule 51 (estatuto -> dwhile .)
    STDV            reduce using rule 51 (estatuto -> dwhile .)
    KMEANS          reduce using rule 51 (estatuto -> dwhile .)
    DERL            reduce using rule 51 (estatuto -> dwhile .)
    DBERN           reduce using rule 51 (estatuto -> dwhile .)
    DPOI            reduce using rule 51 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 51 (estatuto -> dwhile .)
    INVERSE         reduce using rule 51 (estatuto -> dwhile .)
    ROTATE          reduce using rule 51 (estatuto -> dwhile .)
    REF             reduce using rule 51 (estatuto -> dwhile .)
    RREF            reduce using rule 51 (estatuto -> dwhile .)
    EULER           reduce using rule 51 (estatuto -> dwhile .)
    DO              reduce using rule 51 (estatuto -> dwhile .)
    READ            reduce using rule 51 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 51 (estatuto -> dwhile .)


state 58

    (52) estatuto -> readln .

    ID              reduce using rule 52 (estatuto -> readln .)
    IF              reduce using rule 52 (estatuto -> readln .)
    PRINT           reduce using rule 52 (estatuto -> readln .)
    PLOT            reduce using rule 52 (estatuto -> readln .)
    COUNT           reduce using rule 52 (estatuto -> readln .)
    COUNTIF         reduce using rule 52 (estatuto -> readln .)
    MEAN            reduce using rule 52 (estatuto -> readln .)
    MEDIAN          reduce using rule 52 (estatuto -> readln .)
    MODE            reduce using rule 52 (estatuto -> readln .)
    STDV            reduce using rule 52 (estatuto -> readln .)
    KMEANS          reduce using rule 52 (estatuto -> readln .)
    DERL            reduce using rule 52 (estatuto -> readln .)
    DBERN           reduce using rule 52 (estatuto -> readln .)
    DPOI            reduce using rule 52 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 52 (estatuto -> readln .)
    INVERSE         reduce using rule 52 (estatuto -> readln .)
    ROTATE          reduce using rule 52 (estatuto -> readln .)
    REF             reduce using rule 52 (estatuto -> readln .)
    RREF            reduce using rule 52 (estatuto -> readln .)
    EULER           reduce using rule 52 (estatuto -> readln .)
    DO              reduce using rule 52 (estatuto -> readln .)
    READ            reduce using rule 52 (estatuto -> readln .)
    CBRACKET        reduce using rule 52 (estatuto -> readln .)


state 59

    (53) estatuto -> funccall .

    ID              reduce using rule 53 (estatuto -> funccall .)
    IF              reduce using rule 53 (estatuto -> funccall .)
    PRINT           reduce using rule 53 (estatuto -> funccall .)
    PLOT            reduce using rule 53 (estatuto -> funccall .)
    COUNT           reduce using rule 53 (estatuto -> funccall .)
    COUNTIF         reduce using rule 53 (estatuto -> funccall .)
    MEAN            reduce using rule 53 (estatuto -> funccall .)
    MEDIAN          reduce using rule 53 (estatuto -> funccall .)
    MODE            reduce using rule 53 (estatuto -> funccall .)
    STDV            reduce using rule 53 (estatuto -> funccall .)
    KMEANS          reduce using rule 53 (estatuto -> funccall .)
    DERL            reduce using rule 53 (estatuto -> funccall .)
    DBERN           reduce using rule 53 (estatuto -> funccall .)
    DPOI            reduce using rule 53 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 53 (estatuto -> funccall .)
    INVERSE         reduce using rule 53 (estatuto -> funccall .)
    ROTATE          reduce using rule 53 (estatuto -> funccall .)
    REF             reduce using rule 53 (estatuto -> funccall .)
    RREF            reduce using rule 53 (estatuto -> funccall .)
    EULER           reduce using rule 53 (estatuto -> funccall .)
    DO              reduce using rule 53 (estatuto -> funccall .)
    READ            reduce using rule 53 (estatuto -> funccall .)
    CBRACKET        reduce using rule 53 (estatuto -> funccall .)


state 60

    (54) asign -> ID . EQUALS expresion SCOLON
    (55) asign -> ID . EQUALS ID SCOLON
    (56) asign -> ID . EQUALS ID asign2 SCOLON
    (57) asign -> ID . asign2 EQUALS ID SCOLON
    (58) asign -> ID . asign2 EQUALS expresion SCOLON
    (59) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

    EQUALS          shift and go to state 101
    OPAREN          shift and go to state 103
    LCOR            shift and go to state 85

    asign2                         shift and go to state 102

state 61

    (81) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 104


state 62

    (69) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 105


state 63

    (92) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (93) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 106


state 64

    (90) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 107


state 65

    (91) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 108


state 66

    (123) metodos -> MEAN . fe1 OPAREN arrfun CPAREN SCOLON
    (137) fe1 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    fe1                            shift and go to state 109
    empty                          shift and go to state 110

state 67

    (124) metodos -> MEDIAN . fe2 OPAREN arrfun CPAREN SCOLON
    (138) fe2 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    fe2                            shift and go to state 111
    empty                          shift and go to state 112

state 68

    (125) metodos -> MODE . fe3 OPAREN arrfun CPAREN SCOLON
    (139) fe3 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    fe3                            shift and go to state 113
    empty                          shift and go to state 114

state 69

    (126) metodos -> STDV . fe4 OPAREN arrfun CPAREN SCOLON
    (140) fe4 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    fe4                            shift and go to state 115
    empty                          shift and go to state 116

state 70

    (127) metodos -> KMEANS . fe5 OPAREN kval CPAREN SCOLON
    (141) fe5 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    fe5                            shift and go to state 117
    empty                          shift and go to state 118

state 71

    (128) metodos -> DERL . dmn1 OPAREN expfunc CPAREN SCOLON
    (150) dmn1 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    dmn1                           shift and go to state 119
    empty                          shift and go to state 120

state 72

    (129) metodos -> DBERN . dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (151) dbrn1 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    dbrn1                          shift and go to state 121
    empty                          shift and go to state 122

state 73

    (130) metodos -> DPOI . dp1 OPAREN expfunc2 CPAREN SCOLON
    (152) dp1 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    dp1                            shift and go to state 123
    empty                          shift and go to state 124

state 74

    (131) metodos -> TRANSPOSE . tp1 OPAREN mmmfunc CPAREN SCOLON
    (153) tp1 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    tp1                            shift and go to state 125
    empty                          shift and go to state 126

state 75

    (132) metodos -> INVERSE . tp2 OPAREN mmmfunc CPAREN SCOLON
    (154) tp2 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    tp2                            shift and go to state 127
    empty                          shift and go to state 128

state 76

    (133) metodos -> ROTATE . tp3 OPAREN mmmfunc CPAREN SCOLON
    (155) tp3 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    tp3                            shift and go to state 129
    empty                          shift and go to state 130

state 77

    (134) metodos -> REF . tp4 OPAREN mmmfunc CPAREN SCOLON
    (156) tp4 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    tp4                            shift and go to state 131
    empty                          shift and go to state 132

state 78

    (135) metodos -> RREF . tp5 OPAREN mmmfunc CPAREN SCOLON
    (157) tp5 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    tp5                            shift and go to state 133
    empty                          shift and go to state 134

state 79

    (136) metodos -> EULER . OPAREN CPAREN SCOLON

    OPAREN          shift and go to state 135


state 80

    (115) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (116) wn1 -> . empty
    (170) empty -> .

    OBRACKET        reduce using rule 170 (empty -> .)

    wn1                            shift and go to state 136
    empty                          shift and go to state 137

state 81

    (121) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 138


state 82

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (170) empty -> .

    OPAREN          reduce using rule 170 (empty -> .)

    mn1                            shift and go to state 139
    empty                          shift and go to state 140

state 83

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (170) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 170 (empty -> .)
    OBRACKET        reduce using rule 170 (empty -> .)
    CPAREN          reduce using rule 170 (empty -> .)

    lugstat2                       shift and go to state 141
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 84

    (111) varcte -> ID asign2 .

    RCOR            reduce using rule 111 (varcte -> ID asign2 .)
    MULT            reduce using rule 111 (varcte -> ID asign2 .)
    DIV             reduce using rule 111 (varcte -> ID asign2 .)
    PLUS            reduce using rule 111 (varcte -> ID asign2 .)
    MINUS           reduce using rule 111 (varcte -> ID asign2 .)
    RELOP           reduce using rule 111 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 111 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 111 (varcte -> ID asign2 .)
    COMMA           reduce using rule 111 (varcte -> ID asign2 .)
    ID              reduce using rule 111 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 111 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 111 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 111 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 111 (varcte -> ID asign2 .)


state 85

    (60) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (61) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (62) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (63) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (64) asign2 -> LCOR . expresion RCOR
    (65) asign2 -> LCOR . varcte RCOR
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 86

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 143
    LCOR            shift and go to state 142


state 87

    (60) asign2 -> LCOR expresion RCOR . LCOR varcte RCOR
    (61) asign2 -> LCOR expresion RCOR . LCOR expresion RCOR
    (64) asign2 -> LCOR expresion RCOR .

    LCOR            shift and go to state 144
    COLON           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    MULT            reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    DIV             reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    ID              reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 64 (asign2 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 64 (asign2 -> LCOR expresion RCOR .)


state 88

    (101) expresion -> expresion RELOP . exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 145
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 89

    (62) asign2 -> LCOR varcte RCOR . LCOR expresion RCOR
    (63) asign2 -> LCOR varcte RCOR . LCOR varcte RCOR
    (65) asign2 -> LCOR varcte RCOR .

    LCOR            shift and go to state 146
    COLON           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    MULT            reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    DIV             reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    ID              reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 65 (asign2 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 65 (asign2 -> LCOR varcte RCOR .)


state 90

    (103) exp -> termino PLUS . exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 147
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 91

    (104) exp -> termino MINUS . exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 148
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 92

    (106) termino -> factor MULT . termino
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 149
    varcte                         shift and go to state 95

state 93

    (107) termino -> factor DIV . termino
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 150
    varcte                         shift and go to state 95

state 94

    (108) factor -> OPAREN expresion . CPAREN
    (101) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 151
    RELOP           shift and go to state 88


state 95

    (109) factor -> varcte .

    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    CPAREN          reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)
    RCOR            reduce using rule 109 (factor -> varcte .)
    SCOLON          reduce using rule 109 (factor -> varcte .)
    COMMA           reduce using rule 109 (factor -> varcte .)
    ID              reduce using rule 109 (factor -> varcte .)
    OPAREN          reduce using rule 109 (factor -> varcte .)
    NUMERIC         reduce using rule 109 (factor -> varcte .)
    NUMBER          reduce using rule 109 (factor -> varcte .)
    LOGICAL         reduce using rule 109 (factor -> varcte .)


state 96

    (113) varcte -> NUMBER .

    MULT            reduce using rule 113 (varcte -> NUMBER .)
    DIV             reduce using rule 113 (varcte -> NUMBER .)
    PLUS            reduce using rule 113 (varcte -> NUMBER .)
    MINUS           reduce using rule 113 (varcte -> NUMBER .)
    CPAREN          reduce using rule 113 (varcte -> NUMBER .)
    RELOP           reduce using rule 113 (varcte -> NUMBER .)
    RCOR            reduce using rule 113 (varcte -> NUMBER .)
    SCOLON          reduce using rule 113 (varcte -> NUMBER .)
    COMMA           reduce using rule 113 (varcte -> NUMBER .)
    ID              reduce using rule 113 (varcte -> NUMBER .)
    OPAREN          reduce using rule 113 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 113 (varcte -> NUMBER .)
    NUMBER          reduce using rule 113 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 113 (varcte -> NUMBER .)


state 97

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 152


state 98

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 99

    (35) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 35 (block -> OBRACKET block2 CBRACKET .)


state 100

    (37) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 37 (block2 -> estatuto block2 .)


state 101

    (54) asign -> ID EQUALS . expresion SCOLON
    (55) asign -> ID EQUALS . ID SCOLON
    (56) asign -> ID EQUALS . ID asign2 SCOLON
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 153
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 154
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 102

    (57) asign -> ID asign2 . EQUALS ID SCOLON
    (58) asign -> ID asign2 . EQUALS expresion SCOLON
    (59) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 155


state 103

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN . fcn1 ID fcn2 funccall2 CPAREN
    (26) fcn1 -> . empty
    (170) empty -> .

    ID              reduce using rule 170 (empty -> .)
    OPAREN          reduce using rule 170 (empty -> .)
    NUMERIC         reduce using rule 170 (empty -> .)
    NUMBER          reduce using rule 170 (empty -> .)
    LOGICAL         reduce using rule 170 (empty -> .)

    fcn1                           shift and go to state 156
    empty                          shift and go to state 157

state 104

    (81) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 158
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 105

    (69) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (71) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (72) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 159
    STRING          shift and go to state 161
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 160
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 106

    (92) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (93) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (97) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (98) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (99) xyfunc -> . empty
    (94) plot2 -> . LCOR varcte COMMA varcte RCOR
    (95) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (96) plot2 -> . empty
    (170) empty -> .

    FX              shift and go to state 164
    FY              shift and go to state 165
    LCOR            shift and go to state 167
    CPAREN          reduce using rule 170 (empty -> .)

    xyfunc                         shift and go to state 162
    plot2                          shift and go to state 163
    empty                          shift and go to state 166

state 107

    (90) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 168


state 108

    (91) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 169


state 109

    (123) metodos -> MEAN fe1 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 170


state 110

    (137) fe1 -> empty .

    OPAREN          reduce using rule 137 (fe1 -> empty .)


state 111

    (124) metodos -> MEDIAN fe2 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 171


state 112

    (138) fe2 -> empty .

    OPAREN          reduce using rule 138 (fe2 -> empty .)


state 113

    (125) metodos -> MODE fe3 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 172


state 114

    (139) fe3 -> empty .

    OPAREN          reduce using rule 139 (fe3 -> empty .)


state 115

    (126) metodos -> STDV fe4 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 173


state 116

    (140) fe4 -> empty .

    OPAREN          reduce using rule 140 (fe4 -> empty .)


state 117

    (127) metodos -> KMEANS fe5 . OPAREN kval CPAREN SCOLON

    OPAREN          shift and go to state 174


state 118

    (141) fe5 -> empty .

    OPAREN          reduce using rule 141 (fe5 -> empty .)


state 119

    (128) metodos -> DERL dmn1 . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 175


state 120

    (150) dmn1 -> empty .

    OPAREN          reduce using rule 150 (dmn1 -> empty .)


state 121

    (129) metodos -> DBERN dbrn1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 176


state 122

    (151) dbrn1 -> empty .

    OPAREN          reduce using rule 151 (dbrn1 -> empty .)


state 123

    (130) metodos -> DPOI dp1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 177


state 124

    (152) dp1 -> empty .

    OPAREN          reduce using rule 152 (dp1 -> empty .)


state 125

    (131) metodos -> TRANSPOSE tp1 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 178


state 126

    (153) tp1 -> empty .

    OPAREN          reduce using rule 153 (tp1 -> empty .)


state 127

    (132) metodos -> INVERSE tp2 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 179


state 128

    (154) tp2 -> empty .

    OPAREN          reduce using rule 154 (tp2 -> empty .)


state 129

    (133) metodos -> ROTATE tp3 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 180


state 130

    (155) tp3 -> empty .

    OPAREN          reduce using rule 155 (tp3 -> empty .)


state 131

    (134) metodos -> REF tp4 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 181


state 132

    (156) tp4 -> empty .

    OPAREN          reduce using rule 156 (tp4 -> empty .)


state 133

    (135) metodos -> RREF tp5 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 182


state 134

    (157) tp5 -> empty .

    OPAREN          reduce using rule 157 (tp5 -> empty .)


state 135

    (136) metodos -> EULER OPAREN . CPAREN SCOLON

    CPAREN          shift and go to state 183


state 136

    (115) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (118) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 185

    wblock                         shift and go to state 184

state 137

    (116) wn1 -> empty .

    OBRACKET        reduce using rule 116 (wn1 -> empty .)


state 138

    (121) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 186


state 139

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 187


state 140

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 141

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 142

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 188


state 143

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 189

state 144

    (60) asign2 -> LCOR expresion RCOR LCOR . varcte RCOR
    (61) asign2 -> LCOR expresion RCOR LCOR . expresion RCOR
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 190
    varcte                         shift and go to state 191
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 145

    (101) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 101 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 101 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 101 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 101 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 101 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 101 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 101 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 101 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 101 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 101 (expresion -> expresion RELOP exp .)


state 146

    (62) asign2 -> LCOR varcte RCOR LCOR . expresion RCOR
    (63) asign2 -> LCOR varcte RCOR LCOR . varcte RCOR
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    varcte                         shift and go to state 192
    expresion                      shift and go to state 193
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 147

    (103) exp -> termino PLUS exp .

    RCOR            reduce using rule 103 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 103 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 103 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 103 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 103 (exp -> termino PLUS exp .)
    ID              reduce using rule 103 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 103 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 103 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 103 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 103 (exp -> termino PLUS exp .)


state 148

    (104) exp -> termino MINUS exp .

    RCOR            reduce using rule 104 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 104 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 104 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 104 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 104 (exp -> termino MINUS exp .)
    ID              reduce using rule 104 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 104 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 104 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 104 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 104 (exp -> termino MINUS exp .)


state 149

    (106) termino -> factor MULT termino .

    PLUS            reduce using rule 106 (termino -> factor MULT termino .)
    MINUS           reduce using rule 106 (termino -> factor MULT termino .)
    RCOR            reduce using rule 106 (termino -> factor MULT termino .)
    RELOP           reduce using rule 106 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 106 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 106 (termino -> factor MULT termino .)
    COMMA           reduce using rule 106 (termino -> factor MULT termino .)
    ID              reduce using rule 106 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 106 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 106 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 106 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 106 (termino -> factor MULT termino .)


state 150

    (107) termino -> factor DIV termino .

    PLUS            reduce using rule 107 (termino -> factor DIV termino .)
    MINUS           reduce using rule 107 (termino -> factor DIV termino .)
    RCOR            reduce using rule 107 (termino -> factor DIV termino .)
    RELOP           reduce using rule 107 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 107 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 107 (termino -> factor DIV termino .)
    COMMA           reduce using rule 107 (termino -> factor DIV termino .)
    ID              reduce using rule 107 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 107 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 107 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 107 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 107 (termino -> factor DIV termino .)


state 151

    (108) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 108 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 108 (factor -> OPAREN expresion CPAREN .)


state 152

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 153

    (55) asign -> ID EQUALS ID . SCOLON
    (56) asign -> ID EQUALS ID . asign2 SCOLON
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 194
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 85

  ! SCOLON          [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 195

state 154

    (54) asign -> ID EQUALS expresion . SCOLON
    (101) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 196
    RELOP           shift and go to state 88


state 155

    (57) asign -> ID asign2 EQUALS . ID SCOLON
    (58) asign -> ID asign2 EQUALS . expresion SCOLON
    (59) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 197
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 198
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 156

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN fcn1 . ID fcn2 funccall2 CPAREN
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 199
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 200
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 157

    (26) fcn1 -> empty .

    ID              reduce using rule 26 (fcn1 -> empty .)
    OPAREN          reduce using rule 26 (fcn1 -> empty .)
    NUMERIC         reduce using rule 26 (fcn1 -> empty .)
    NUMBER          reduce using rule 26 (fcn1 -> empty .)
    LOGICAL         reduce using rule 26 (fcn1 -> empty .)


state 158

    (81) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (101) expresion -> expresion . RELOP exp
    (83) cn1 -> . empty
    (170) empty -> .

    RELOP           shift and go to state 88
    CPAREN          reduce using rule 170 (empty -> .)

    cn1                            shift and go to state 201
    empty                          shift and go to state 202

state 159

    (69) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (80) en3 -> . empty
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR
    (170) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 110 (varcte -> ID .)
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    CPAREN          reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 85
    COMMA           reduce using rule 170 (empty -> .)

  ! CPAREN          [ reduce using rule 170 (empty -> .) ]

    en3                            shift and go to state 203
    asign2                         shift and go to state 84
    empty                          shift and go to state 204

state 160

    (70) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (101) expresion -> expresion . RELOP exp
    (78) en1 -> . empty
    (170) empty -> .

    RELOP           shift and go to state 88
    CPAREN          reduce using rule 170 (empty -> .)

    en1                            shift and go to state 205
    empty                          shift and go to state 206

state 161

    (71) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (72) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (170) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 207
    COMMA           shift and go to state 209

  ! CPAREN          [ reduce using rule 170 (empty -> .) ]

    escrt2                         shift and go to state 208
    empty                          shift and go to state 210

state 162

    (92) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 211


state 163

    (93) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 212


state 164

    (97) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 213


state 165

    (98) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 214


state 166

    (99) xyfunc -> empty .
    (96) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 96 (plot2 -> empty .)
    CPAREN          reduce using rule 96 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 99 (xyfunc -> empty .) ]


state 167

    (94) plot2 -> LCOR . varcte COMMA varcte RCOR
    (95) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 215

state 168

    (90) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 216


state 169

    (91) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 217


state 170

    (123) metodos -> MEAN fe1 OPAREN . arrfun CPAREN SCOLON
    (143) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 219

    arrfun                         shift and go to state 218

state 171

    (124) metodos -> MEDIAN fe2 OPAREN . arrfun CPAREN SCOLON
    (143) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 219

    arrfun                         shift and go to state 220

state 172

    (125) metodos -> MODE fe3 OPAREN . arrfun CPAREN SCOLON
    (143) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 219

    arrfun                         shift and go to state 221

state 173

    (126) metodos -> STDV fe4 OPAREN . arrfun CPAREN SCOLON
    (143) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 219

    arrfun                         shift and go to state 222

state 174

    (127) metodos -> KMEANS fe5 OPAREN . kval CPAREN SCOLON
    (142) kval -> . varcte COMMA arrfun2 COMMA arrfun3
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    kval                           shift and go to state 223
    varcte                         shift and go to state 224

state 175

    (128) metodos -> DERL dmn1 OPAREN . expfunc CPAREN SCOLON
    (158) expfunc -> . ID COMMA ID COMMA ID
    (159) expfunc -> . varcte COMMA varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 226
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 225
    varcte                         shift and go to state 227

state 176

    (129) metodos -> DBERN dbrn1 OPAREN . expfunc2 CPAREN SCOLON
    (160) expfunc2 -> . ID COMMA ID
    (161) expfunc2 -> . varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 229
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 228
    varcte                         shift and go to state 230

state 177

    (130) metodos -> DPOI dp1 OPAREN . expfunc2 CPAREN SCOLON
    (160) expfunc2 -> . ID COMMA ID
    (161) expfunc2 -> . varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 229
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 231
    varcte                         shift and go to state 230

state 178

    (131) metodos -> TRANSPOSE tp1 OPAREN . mmmfunc CPAREN SCOLON
    (162) mmmfunc -> . LCOR RCOR
    (163) mmmfunc -> . LCOR mmmarray RCOR
    (164) mmmfunc -> . ID

    LCOR            shift and go to state 233
    ID              shift and go to state 234

    mmmfunc                        shift and go to state 232

state 179

    (132) metodos -> INVERSE tp2 OPAREN . mmmfunc CPAREN SCOLON
    (162) mmmfunc -> . LCOR RCOR
    (163) mmmfunc -> . LCOR mmmarray RCOR
    (164) mmmfunc -> . ID

    LCOR            shift and go to state 233
    ID              shift and go to state 234

    mmmfunc                        shift and go to state 235

state 180

    (133) metodos -> ROTATE tp3 OPAREN . mmmfunc CPAREN SCOLON
    (162) mmmfunc -> . LCOR RCOR
    (163) mmmfunc -> . LCOR mmmarray RCOR
    (164) mmmfunc -> . ID

    LCOR            shift and go to state 233
    ID              shift and go to state 234

    mmmfunc                        shift and go to state 236

state 181

    (134) metodos -> REF tp4 OPAREN . mmmfunc CPAREN SCOLON
    (162) mmmfunc -> . LCOR RCOR
    (163) mmmfunc -> . LCOR mmmarray RCOR
    (164) mmmfunc -> . ID

    LCOR            shift and go to state 233
    ID              shift and go to state 234

    mmmfunc                        shift and go to state 237

state 182

    (135) metodos -> RREF tp5 OPAREN . mmmfunc CPAREN SCOLON
    (162) mmmfunc -> . LCOR RCOR
    (163) mmmfunc -> . LCOR mmmarray RCOR
    (164) mmmfunc -> . ID

    LCOR            shift and go to state 233
    ID              shift and go to state 234

    mmmfunc                        shift and go to state 238

state 183

    (136) metodos -> EULER OPAREN CPAREN . SCOLON

    SCOLON          shift and go to state 239


state 184

    (115) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 240


state 185

    (118) wblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (170) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (123) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (124) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (125) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (126) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (127) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (128) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (129) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (130) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (131) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (121) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 170 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    EULER           shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    block2                         shift and go to state 241
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 186

    (121) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (122) rn1 -> . empty
    (170) empty -> .

    CPAREN          reduce using rule 170 (empty -> .)

    rn1                            shift and go to state 242
    empty                          shift and go to state 243

state 187

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (170) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 170 (empty -> .)

    modules2                       shift and go to state 244
    vars                           shift and go to state 245
    empty                          shift and go to state 246

state 188

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 247


state 189

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 248


state 190

    (61) asign2 -> LCOR expresion RCOR LCOR expresion . RCOR
    (101) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 249
    RELOP           shift and go to state 88


state 191

    (60) asign2 -> LCOR expresion RCOR LCOR varcte . RCOR
    (109) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 250
    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)

  ! RCOR            [ reduce using rule 109 (factor -> varcte .) ]


state 192

    (63) asign2 -> LCOR varcte RCOR LCOR varcte . RCOR
    (109) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 251
    MULT            reduce using rule 109 (factor -> varcte .)
    DIV             reduce using rule 109 (factor -> varcte .)
    PLUS            reduce using rule 109 (factor -> varcte .)
    MINUS           reduce using rule 109 (factor -> varcte .)
    RELOP           reduce using rule 109 (factor -> varcte .)

  ! RCOR            [ reduce using rule 109 (factor -> varcte .) ]


state 193

    (62) asign2 -> LCOR varcte RCOR LCOR expresion . RCOR
    (101) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 252
    RELOP           shift and go to state 88


state 194

    (55) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    EULER           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)


state 195

    (56) asign -> ID EQUALS ID asign2 . SCOLON
    (111) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 253
    MULT            reduce using rule 111 (varcte -> ID asign2 .)
    DIV             reduce using rule 111 (varcte -> ID asign2 .)
    PLUS            reduce using rule 111 (varcte -> ID asign2 .)
    MINUS           reduce using rule 111 (varcte -> ID asign2 .)
    RELOP           reduce using rule 111 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 111 (varcte -> ID asign2 .) ]


state 196

    (54) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    EULER           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)


state 197

    (57) asign -> ID asign2 EQUALS ID . SCOLON
    (59) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 255
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 85

  ! SCOLON          [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 254

state 198

    (58) asign -> ID asign2 EQUALS expresion . SCOLON
    (101) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 256
    RELOP           shift and go to state 88


state 199

    (25) funccall -> ID OPAREN fcn1 ID . fcn2 funccall2 CPAREN
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (27) fcn2 -> . empty
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR
    (170) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 110 (varcte -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 110 (varcte -> ID .)
  ! reduce/reduce conflict for CPAREN resolved using rule 110 (varcte -> ID .)
    MULT            reduce using rule 110 (varcte -> ID .)
    DIV             reduce using rule 110 (varcte -> ID .)
    PLUS            reduce using rule 110 (varcte -> ID .)
    MINUS           reduce using rule 110 (varcte -> ID .)
    RELOP           reduce using rule 110 (varcte -> ID .)
    COMMA           reduce using rule 110 (varcte -> ID .)
    ID              reduce using rule 110 (varcte -> ID .)
    CPAREN          reduce using rule 110 (varcte -> ID .)
    LCOR            shift and go to state 85

  ! COMMA           [ reduce using rule 170 (empty -> .) ]
  ! ID              [ reduce using rule 170 (empty -> .) ]
  ! CPAREN          [ reduce using rule 170 (empty -> .) ]

    fcn2                           shift and go to state 257
    asign2                         shift and go to state 84
    empty                          shift and go to state 258

state 200

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (101) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (170) empty -> .

    RELOP           shift and go to state 88
    COMMA           reduce using rule 170 (empty -> .)
    ID              reduce using rule 170 (empty -> .)
    CPAREN          reduce using rule 170 (empty -> .)

    fcn2                           shift and go to state 259
    empty                          shift and go to state 258

state 201

    (81) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (82) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 260


state 202

    (83) cn1 -> empty .

    CPAREN          reduce using rule 83 (cn1 -> empty .)


state 203

    (69) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (170) empty -> .

    COMMA           shift and go to state 209
    CPAREN          reduce using rule 170 (empty -> .)

    escrt2                         shift and go to state 261
    empty                          shift and go to state 210

state 204

    (80) en3 -> empty .

    COMMA           reduce using rule 80 (en3 -> empty .)
    CPAREN          reduce using rule 80 (en3 -> empty .)


state 205

    (70) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 262


state 206

    (78) en1 -> empty .

    CPAREN          reduce using rule 78 (en1 -> empty .)


state 207

    (71) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (79) en2 -> . empty
    (170) empty -> .

    SCOLON          reduce using rule 170 (empty -> .)

    en2                            shift and go to state 263
    empty                          shift and go to state 264

state 208

    (72) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 265


state 209

    (73) escrt2 -> COMMA . escrt3
    (75) escrt3 -> . ID escrt2
    (76) escrt3 -> . ID
    (77) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 267
    STRING          shift and go to state 268

    escrt3                         shift and go to state 266

state 210

    (74) escrt2 -> empty .

    CPAREN          reduce using rule 74 (escrt2 -> empty .)
    COMMA           reduce using rule 74 (escrt2 -> empty .)


state 211

    (92) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 269


state 212

    (93) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 270


state 213

    (97) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 271
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 214

    (98) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 272
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 215

    (94) plot2 -> LCOR varcte . COMMA varcte RCOR
    (95) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 273


state 216

    (90) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 274

state 217

    (91) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 275

state 218

    (123) metodos -> MEAN fe1 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 276


state 219

    (143) arrfun -> LCOR . datasetarr RCOR
    (146) datasetarr -> . varcte
    (147) datasetarr -> . varcte COMMA datasetarr
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    datasetarr                     shift and go to state 277
    varcte                         shift and go to state 278

state 220

    (124) metodos -> MEDIAN fe2 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 279


state 221

    (125) metodos -> MODE fe3 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 280


state 222

    (126) metodos -> STDV fe4 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 281


state 223

    (127) metodos -> KMEANS fe5 OPAREN kval . CPAREN SCOLON

    CPAREN          shift and go to state 282


state 224

    (142) kval -> varcte . COMMA arrfun2 COMMA arrfun3

    COMMA           shift and go to state 283


state 225

    (128) metodos -> DERL dmn1 OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 284


state 226

    (158) expfunc -> ID . COMMA ID COMMA ID
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 285
    LCOR            shift and go to state 85

  ! COMMA           [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 84

state 227

    (159) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 286


state 228

    (129) metodos -> DBERN dbrn1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 287


state 229

    (160) expfunc2 -> ID . COMMA ID
    (110) varcte -> ID .
    (111) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (61) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (62) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (63) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (64) asign2 -> . LCOR expresion RCOR
    (65) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 288
    LCOR            shift and go to state 85

  ! COMMA           [ reduce using rule 110 (varcte -> ID .) ]

    asign2                         shift and go to state 84

state 230

    (161) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 289


state 231

    (130) metodos -> DPOI dp1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 290


state 232

    (131) metodos -> TRANSPOSE tp1 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 291


state 233

    (162) mmmfunc -> LCOR . RCOR
    (163) mmmfunc -> LCOR . mmmarray RCOR
    (165) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (166) mmmarray -> . libero LCOR datasetarr4 RCOR
    (167) libero -> . empty
    (170) empty -> .

    RCOR            shift and go to state 292
    LCOR            reduce using rule 170 (empty -> .)

    mmmarray                       shift and go to state 293
    libero                         shift and go to state 294
    empty                          shift and go to state 295

state 234

    (164) mmmfunc -> ID .

    CPAREN          reduce using rule 164 (mmmfunc -> ID .)


state 235

    (132) metodos -> INVERSE tp2 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 296


state 236

    (133) metodos -> ROTATE tp3 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 297


state 237

    (134) metodos -> REF tp4 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 298


state 238

    (135) metodos -> RREF tp5 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 299


state 239

    (136) metodos -> EULER OPAREN CPAREN SCOLON .

    ID              reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    IF              reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    PRINT           reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    PLOT            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    COUNT           reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    COUNTIF         reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MEAN            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MEDIAN          reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MODE            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    STDV            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    KMEANS          reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DERL            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DBERN           reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DPOI            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    INVERSE         reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    ROTATE          reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    REF             reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    RREF            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    EULER           reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DO              reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    READ            reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)
    CBRACKET        reduce using rule 136 (metodos -> EULER OPAREN CPAREN SCOLON .)


state 240

    (115) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 300


state 241

    (118) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 301


state 242

    (121) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 302


state 243

    (122) rn1 -> empty .

    CPAREN          reduce using rule 122 (rn1 -> empty .)


state 244

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 303

state 245

    (32) modules2 -> vars .

    CPAREN          reduce using rule 32 (modules2 -> vars .)
    OBRACKET        reduce using rule 32 (modules2 -> vars .)


state 246

    (33) modules2 -> empty .

    CPAREN          reduce using rule 33 (modules2 -> empty .)
    OBRACKET        reduce using rule 33 (modules2 -> empty .)


state 247

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 304


state 248

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (170) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 170 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 170 (empty -> .) ]
  ! CPAREN          [ reduce using rule 170 (empty -> .) ]

    lugstat2                       shift and go to state 305
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 249

    (61) asign2 -> LCOR expresion RCOR LCOR expresion RCOR .

    COLON           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    ID              reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 61 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)


state 250

    (60) asign2 -> LCOR expresion RCOR LCOR varcte RCOR .

    COLON           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    ID              reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 60 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)


state 251

    (63) asign2 -> LCOR varcte RCOR LCOR varcte RCOR .

    COLON           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    ID              reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 63 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)


state 252

    (62) asign2 -> LCOR varcte RCOR LCOR expresion RCOR .

    COLON           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    ID              reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 62 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)


state 253

    (56) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)


state 254

    (59) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (111) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 306
    MULT            reduce using rule 111 (varcte -> ID asign2 .)
    DIV             reduce using rule 111 (varcte -> ID asign2 .)
    PLUS            reduce using rule 111 (varcte -> ID asign2 .)
    MINUS           reduce using rule 111 (varcte -> ID asign2 .)
    RELOP           reduce using rule 111 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 111 (varcte -> ID asign2 .) ]


state 255

    (57) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    EULER           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)


state 256

    (58) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    EULER           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 257

    (25) funccall -> ID OPAREN fcn1 ID fcn2 . funccall2 CPAREN
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (170) empty -> .

    COMMA           shift and go to state 309
    ID              shift and go to state 307
    CPAREN          reduce using rule 170 (empty -> .)

    funccall2                      shift and go to state 308
    empty                          shift and go to state 310

state 258

    (27) fcn2 -> empty .

    COMMA           reduce using rule 27 (fcn2 -> empty .)
    ID              reduce using rule 27 (fcn2 -> empty .)
    CPAREN          reduce using rule 27 (fcn2 -> empty .)


state 259

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (170) empty -> .

    COMMA           shift and go to state 309
    ID              shift and go to state 307
    CPAREN          reduce using rule 170 (empty -> .)

    funccall2                      shift and go to state 311
    empty                          shift and go to state 310

state 260

    (81) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (82) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (86) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 313

    ifblock                        shift and go to state 312

state 261

    (69) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 314


state 262

    (70) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 315


state 263

    (71) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 316


state 264

    (79) en2 -> empty .

    SCOLON          reduce using rule 79 (en2 -> empty .)


state 265

    (72) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (79) en2 -> . empty
    (170) empty -> .

    SCOLON          reduce using rule 170 (empty -> .)

    en2                            shift and go to state 317
    empty                          shift and go to state 264

state 266

    (73) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 73 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 73 (escrt2 -> COMMA escrt3 .)


state 267

    (75) escrt3 -> ID . escrt2
    (76) escrt3 -> ID .
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (170) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 76 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 76 (escrt3 -> ID .)
    COMMA           shift and go to state 209

  ! COMMA           [ reduce using rule 76 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 170 (empty -> .) ]
  ! COMMA           [ reduce using rule 170 (empty -> .) ]

    escrt2                         shift and go to state 318
    empty                          shift and go to state 210

state 268

    (77) escrt3 -> STRING . escrt2 escrt2
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (170) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 209
    CPAREN          reduce using rule 170 (empty -> .)

  ! COMMA           [ reduce using rule 170 (empty -> .) ]

    escrt2                         shift and go to state 319
    empty                          shift and go to state 210

state 269

    (92) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    EULER           reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 92 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 270

    (93) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    EULER           reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 93 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 271

    (97) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 320


state 272

    (98) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 321


state 273

    (94) plot2 -> LCOR varcte COMMA . varcte RCOR
    (95) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 322

state 274

    (90) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 323


state 275

    (91) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 324


state 276

    (123) metodos -> MEAN fe1 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 325


state 277

    (143) arrfun -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 326


state 278

    (146) datasetarr -> varcte .
    (147) datasetarr -> varcte . COMMA datasetarr

    RCOR            reduce using rule 146 (datasetarr -> varcte .)
    COMMA           shift and go to state 327


state 279

    (124) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 328


state 280

    (125) metodos -> MODE fe3 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 329


state 281

    (126) metodos -> STDV fe4 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 330


state 282

    (127) metodos -> KMEANS fe5 OPAREN kval CPAREN . SCOLON

    SCOLON          shift and go to state 331


state 283

    (142) kval -> varcte COMMA . arrfun2 COMMA arrfun3
    (144) arrfun2 -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 333

    arrfun2                        shift and go to state 332

state 284

    (128) metodos -> DERL dmn1 OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 334


state 285

    (158) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 335


state 286

    (159) expfunc -> varcte COMMA . varcte COMMA varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 336

state 287

    (129) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 337


state 288

    (160) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 338


state 289

    (161) expfunc2 -> varcte COMMA . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 339

state 290

    (130) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 340


state 291

    (131) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 341


state 292

    (162) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 162 (mmmfunc -> LCOR RCOR .)


state 293

    (163) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 342


state 294

    (165) mmmarray -> libero . LCOR datasetarr4 RCOR COMMA mmmarray
    (166) mmmarray -> libero . LCOR datasetarr4 RCOR

    LCOR            shift and go to state 343


state 295

    (167) libero -> empty .

    LCOR            reduce using rule 167 (libero -> empty .)


state 296

    (132) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 344


state 297

    (133) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 345


state 298

    (134) metodos -> REF tp4 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 346


state 299

    (135) metodos -> RREF tp5 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 347


state 300

    (115) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (119) dwhileconds -> . expresion dwhileconds
    (120) dwhileconds -> . empty
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (170) empty -> .
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    CPAREN          reduce using rule 170 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    dwhileconds                    shift and go to state 348
    expresion                      shift and go to state 349
    empty                          shift and go to state 350
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 301

    (118) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 118 (wblock -> OBRACKET block2 CBRACKET .)


state 302

    (121) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 351


state 303

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 352


state 304

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 353

state 305

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 306

    (59) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 307

    (30) funccall2 -> ID . fcn2 funccall2
    (27) fcn2 -> . empty
    (170) empty -> .

    COMMA           reduce using rule 170 (empty -> .)
    ID              reduce using rule 170 (empty -> .)
    CPAREN          reduce using rule 170 (empty -> .)

    fcn2                           shift and go to state 354
    empty                          shift and go to state 258

state 308

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 . CPAREN

    CPAREN          shift and go to state 355


state 309

    (29) funccall2 -> COMMA . expresion fcn2 funccall2
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 356
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 310

    (31) funccall2 -> empty .

    CPAREN          reduce using rule 31 (funccall2 -> empty .)


state 311

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 357


state 312

    (81) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 358
    ELSE            shift and go to state 359


state 313

    (86) ifblock -> OBRACKET . ifblock2 CBRACKET
    (87) ifblock2 -> . estatuto
    (88) ifblock2 -> . estatuto ifblock2
    (89) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (170) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (123) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (124) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (125) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (126) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (127) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (128) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (129) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (130) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (131) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (121) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 170 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    EULER           shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    ifblock2                       shift and go to state 360
    estatuto                       shift and go to state 361
    empty                          shift and go to state 362
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 314

    (69) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 363


state 315

    (70) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    EULER           reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 70 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 316

    (71) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    EULER           reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 71 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 317

    (72) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 364


state 318

    (75) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 75 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 75 (escrt3 -> ID escrt2 .)


state 319

    (77) escrt3 -> STRING escrt2 . escrt2
    (73) escrt2 -> . COMMA escrt3
    (74) escrt2 -> . empty
    (170) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 209
    CPAREN          reduce using rule 170 (empty -> .)

  ! COMMA           [ reduce using rule 170 (empty -> .) ]

    escrt2                         shift and go to state 365
    empty                          shift and go to state 210

state 320

    (97) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (97) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (98) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (99) xyfunc -> . empty
    (170) empty -> .

    FX              shift and go to state 164
    FY              shift and go to state 165
    CPAREN          reduce using rule 170 (empty -> .)

    xyfunc                         shift and go to state 366
    empty                          shift and go to state 367

state 321

    (98) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (97) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (98) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (99) xyfunc -> . empty
    (170) empty -> .

    FX              shift and go to state 164
    FY              shift and go to state 165
    CPAREN          reduce using rule 170 (empty -> .)

    xyfunc                         shift and go to state 368
    empty                          shift and go to state 367

state 322

    (94) plot2 -> LCOR varcte COMMA varcte . RCOR
    (95) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 369


state 323

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 370

state 324

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 371

state 325

    (123) metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 123 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)


state 326

    (143) arrfun -> LCOR datasetarr RCOR .

    CPAREN          reduce using rule 143 (arrfun -> LCOR datasetarr RCOR .)


state 327

    (147) datasetarr -> varcte COMMA . datasetarr
    (146) datasetarr -> . varcte
    (147) datasetarr -> . varcte COMMA datasetarr
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 278
    datasetarr                     shift and go to state 372

state 328

    (124) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 124 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)


state 329

    (125) metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 125 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)


state 330

    (126) metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 126 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)


state 331

    (127) metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .

    ID              reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    IF              reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PRINT           reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PLOT            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNT           reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNTIF         reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEAN            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEDIAN          reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MODE            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    STDV            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    KMEANS          reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DERL            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DBERN           reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DPOI            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    INVERSE         reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    ROTATE          reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    REF             reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RREF            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    EULER           reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DO              reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    READ            reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    CBRACKET        reduce using rule 127 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)


state 332

    (142) kval -> varcte COMMA arrfun2 . COMMA arrfun3

    COMMA           shift and go to state 373


state 333

    (144) arrfun2 -> LCOR . datasetarr RCOR
    (146) datasetarr -> . varcte
    (147) datasetarr -> . varcte COMMA datasetarr
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    datasetarr                     shift and go to state 374
    varcte                         shift and go to state 278

state 334

    (128) metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 128 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)


state 335

    (158) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 375


state 336

    (159) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 376


state 337

    (129) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 129 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)


state 338

    (160) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 160 (expfunc2 -> ID COMMA ID .)


state 339

    (161) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 161 (expfunc2 -> varcte COMMA varcte .)


state 340

    (130) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 130 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)


state 341

    (131) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 131 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)


state 342

    (163) mmmfunc -> LCOR mmmarray RCOR .

    CPAREN          reduce using rule 163 (mmmfunc -> LCOR mmmarray RCOR .)


state 343

    (165) mmmarray -> libero LCOR . datasetarr4 RCOR COMMA mmmarray
    (166) mmmarray -> libero LCOR . datasetarr4 RCOR
    (168) datasetarr4 -> . varcte
    (169) datasetarr4 -> . varcte COMMA datasetarr4
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    datasetarr4                    shift and go to state 377
    varcte                         shift and go to state 378

state 344

    (132) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)


state 345

    (133) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 133 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)


state 346

    (134) metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 134 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)


state 347

    (135) metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 135 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)


state 348

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 379


state 349

    (119) dwhileconds -> expresion . dwhileconds
    (101) expresion -> expresion . RELOP exp
    (119) dwhileconds -> . expresion dwhileconds
    (120) dwhileconds -> . empty
    (100) expresion -> . exp
    (101) expresion -> . expresion RELOP exp
    (170) empty -> .
    (102) exp -> . termino
    (103) exp -> . termino PLUS exp
    (104) exp -> . termino MINUS exp
    (105) termino -> . factor
    (106) termino -> . factor MULT termino
    (107) termino -> . factor DIV termino
    (108) factor -> . OPAREN expresion CPAREN
    (109) factor -> . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    RELOP           shift and go to state 88
    CPAREN          reduce using rule 170 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 349
    dwhileconds                    shift and go to state 380
    exp                            shift and go to state 39
    empty                          shift and go to state 350
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 95

state 350

    (120) dwhileconds -> empty .

    CPAREN          reduce using rule 120 (dwhileconds -> empty .)


state 351

    (121) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    EULER           reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 121 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 352

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (170) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 170 (empty -> .)

    modules2                       shift and go to state 381
    vars                           shift and go to state 245
    empty                          shift and go to state 246

state 353

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 382


state 354

    (30) funccall2 -> ID fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (170) empty -> .

    COMMA           shift and go to state 309
    ID              shift and go to state 307
    CPAREN          reduce using rule 170 (empty -> .)

    funccall2                      shift and go to state 383
    empty                          shift and go to state 310

state 355

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .

    ID              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    IF              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PRINT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PLOT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNTIF         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEAN            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEDIAN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MODE            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    STDV            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    KMEANS          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DERL            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DBERN           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DPOI            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    INVERSE         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    ROTATE          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    REF             reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RREF            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    EULER           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DO              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    READ            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CBRACKET        reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)


state 356

    (29) funccall2 -> COMMA expresion . fcn2 funccall2
    (101) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (170) empty -> .

    RELOP           shift and go to state 88
    COMMA           reduce using rule 170 (empty -> .)
    ID              reduce using rule 170 (empty -> .)
    CPAREN          reduce using rule 170 (empty -> .)

    fcn2                           shift and go to state 384
    empty                          shift and go to state 258

state 357

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (28) fcn3 -> . empty
    (170) empty -> .

    ID              reduce using rule 170 (empty -> .)
    IF              reduce using rule 170 (empty -> .)
    PRINT           reduce using rule 170 (empty -> .)
    PLOT            reduce using rule 170 (empty -> .)
    COUNT           reduce using rule 170 (empty -> .)
    COUNTIF         reduce using rule 170 (empty -> .)
    MEAN            reduce using rule 170 (empty -> .)
    MEDIAN          reduce using rule 170 (empty -> .)
    MODE            reduce using rule 170 (empty -> .)
    STDV            reduce using rule 170 (empty -> .)
    KMEANS          reduce using rule 170 (empty -> .)
    DERL            reduce using rule 170 (empty -> .)
    DBERN           reduce using rule 170 (empty -> .)
    DPOI            reduce using rule 170 (empty -> .)
    TRANSPOSE       reduce using rule 170 (empty -> .)
    INVERSE         reduce using rule 170 (empty -> .)
    ROTATE          reduce using rule 170 (empty -> .)
    REF             reduce using rule 170 (empty -> .)
    RREF            reduce using rule 170 (empty -> .)
    EULER           reduce using rule 170 (empty -> .)
    DO              reduce using rule 170 (empty -> .)
    READ            reduce using rule 170 (empty -> .)
    CBRACKET        reduce using rule 170 (empty -> .)

    fcn3                           shift and go to state 385
    empty                          shift and go to state 386

state 358

    (81) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (84) cn2 -> . empty
    (170) empty -> .

    ID              reduce using rule 170 (empty -> .)
    IF              reduce using rule 170 (empty -> .)
    PRINT           reduce using rule 170 (empty -> .)
    PLOT            reduce using rule 170 (empty -> .)
    COUNT           reduce using rule 170 (empty -> .)
    COUNTIF         reduce using rule 170 (empty -> .)
    MEAN            reduce using rule 170 (empty -> .)
    MEDIAN          reduce using rule 170 (empty -> .)
    MODE            reduce using rule 170 (empty -> .)
    STDV            reduce using rule 170 (empty -> .)
    KMEANS          reduce using rule 170 (empty -> .)
    DERL            reduce using rule 170 (empty -> .)
    DBERN           reduce using rule 170 (empty -> .)
    DPOI            reduce using rule 170 (empty -> .)
    TRANSPOSE       reduce using rule 170 (empty -> .)
    INVERSE         reduce using rule 170 (empty -> .)
    ROTATE          reduce using rule 170 (empty -> .)
    REF             reduce using rule 170 (empty -> .)
    RREF            reduce using rule 170 (empty -> .)
    EULER           reduce using rule 170 (empty -> .)
    DO              reduce using rule 170 (empty -> .)
    READ            reduce using rule 170 (empty -> .)
    CBRACKET        reduce using rule 170 (empty -> .)
    CPAREN          reduce using rule 170 (empty -> .)

    cn2                            shift and go to state 387
    empty                          shift and go to state 388

state 359

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (85) cn3 -> . empty
    (170) empty -> .

    OBRACKET        reduce using rule 170 (empty -> .)

    cn3                            shift and go to state 389
    empty                          shift and go to state 390

state 360

    (86) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 391


state 361

    (87) ifblock2 -> estatuto .
    (88) ifblock2 -> estatuto . ifblock2
    (87) ifblock2 -> . estatuto
    (88) ifblock2 -> . estatuto ifblock2
    (89) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (170) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (123) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (124) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (125) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (126) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (127) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (128) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (129) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (130) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (131) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (121) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 87 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 87 (ifblock2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    EULER           shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

  ! CBRACKET        [ reduce using rule 170 (empty -> .) ]

    estatuto                       shift and go to state 361
    ifblock2                       shift and go to state 392
    empty                          shift and go to state 362
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 362

    (89) ifblock2 -> empty .

    CBRACKET        reduce using rule 89 (ifblock2 -> empty .)


state 363

    (69) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    EULER           reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 69 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 364

    (72) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    EULER           reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 72 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 365

    (77) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 77 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 77 (escrt3 -> STRING escrt2 escrt2 .)


state 366

    (97) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 97 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 367

    (99) xyfunc -> empty .

    CPAREN          reduce using rule 99 (xyfunc -> empty .)


state 368

    (98) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 98 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 369

    (94) plot2 -> LCOR varcte COMMA varcte RCOR .
    (95) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 94 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 393


state 370

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 394


state 371

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 395


state 372

    (147) datasetarr -> varcte COMMA datasetarr .

    RCOR            reduce using rule 147 (datasetarr -> varcte COMMA datasetarr .)


state 373

    (142) kval -> varcte COMMA arrfun2 COMMA . arrfun3
    (145) arrfun3 -> . LCOR datasetarr2 RCOR

    LCOR            shift and go to state 397

    arrfun3                        shift and go to state 396

state 374

    (144) arrfun2 -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 398


state 375

    (158) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 399


state 376

    (159) expfunc -> varcte COMMA varcte COMMA . varcte
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 400

state 377

    (165) mmmarray -> libero LCOR datasetarr4 . RCOR COMMA mmmarray
    (166) mmmarray -> libero LCOR datasetarr4 . RCOR

    RCOR            shift and go to state 401


state 378

    (168) datasetarr4 -> varcte .
    (169) datasetarr4 -> varcte . COMMA datasetarr4

    RCOR            reduce using rule 168 (datasetarr4 -> varcte .)
    COMMA           shift and go to state 402


state 379

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (117) wn2 -> . empty
    (170) empty -> .

    SCOLON          reduce using rule 170 (empty -> .)

    wn2                            shift and go to state 403
    empty                          shift and go to state 404

state 380

    (119) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 119 (dwhileconds -> expresion dwhileconds .)


state 381

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (170) empty -> .

    OBRACKET        reduce using rule 170 (empty -> .)

    mn3                            shift and go to state 405
    empty                          shift and go to state 406

state 382

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (170) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 170 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 170 (empty -> .) ]
  ! CPAREN          [ reduce using rule 170 (empty -> .) ]

    lugstat2                       shift and go to state 407
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 383

    (30) funccall2 -> ID fcn2 funccall2 .

    CPAREN          reduce using rule 30 (funccall2 -> ID fcn2 funccall2 .)


state 384

    (29) funccall2 -> COMMA expresion fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (170) empty -> .

    COMMA           shift and go to state 309
    ID              shift and go to state 307
    CPAREN          reduce using rule 170 (empty -> .)

    funccall2                      shift and go to state 408
    empty                          shift and go to state 310

state 385

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    EULER           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 386

    (28) fcn3 -> empty .

    ID              reduce using rule 28 (fcn3 -> empty .)
    IF              reduce using rule 28 (fcn3 -> empty .)
    PRINT           reduce using rule 28 (fcn3 -> empty .)
    PLOT            reduce using rule 28 (fcn3 -> empty .)
    COUNT           reduce using rule 28 (fcn3 -> empty .)
    COUNTIF         reduce using rule 28 (fcn3 -> empty .)
    MEAN            reduce using rule 28 (fcn3 -> empty .)
    MEDIAN          reduce using rule 28 (fcn3 -> empty .)
    MODE            reduce using rule 28 (fcn3 -> empty .)
    STDV            reduce using rule 28 (fcn3 -> empty .)
    KMEANS          reduce using rule 28 (fcn3 -> empty .)
    DERL            reduce using rule 28 (fcn3 -> empty .)
    DBERN           reduce using rule 28 (fcn3 -> empty .)
    DPOI            reduce using rule 28 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 28 (fcn3 -> empty .)
    INVERSE         reduce using rule 28 (fcn3 -> empty .)
    ROTATE          reduce using rule 28 (fcn3 -> empty .)
    REF             reduce using rule 28 (fcn3 -> empty .)
    RREF            reduce using rule 28 (fcn3 -> empty .)
    EULER           reduce using rule 28 (fcn3 -> empty .)
    DO              reduce using rule 28 (fcn3 -> empty .)
    READ            reduce using rule 28 (fcn3 -> empty .)
    CBRACKET        reduce using rule 28 (fcn3 -> empty .)


state 387

    (81) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    EULER           reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 81 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 388

    (84) cn2 -> empty .

    ID              reduce using rule 84 (cn2 -> empty .)
    IF              reduce using rule 84 (cn2 -> empty .)
    PRINT           reduce using rule 84 (cn2 -> empty .)
    PLOT            reduce using rule 84 (cn2 -> empty .)
    COUNT           reduce using rule 84 (cn2 -> empty .)
    COUNTIF         reduce using rule 84 (cn2 -> empty .)
    MEAN            reduce using rule 84 (cn2 -> empty .)
    MEDIAN          reduce using rule 84 (cn2 -> empty .)
    MODE            reduce using rule 84 (cn2 -> empty .)
    STDV            reduce using rule 84 (cn2 -> empty .)
    KMEANS          reduce using rule 84 (cn2 -> empty .)
    DERL            reduce using rule 84 (cn2 -> empty .)
    DBERN           reduce using rule 84 (cn2 -> empty .)
    DPOI            reduce using rule 84 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 84 (cn2 -> empty .)
    INVERSE         reduce using rule 84 (cn2 -> empty .)
    ROTATE          reduce using rule 84 (cn2 -> empty .)
    REF             reduce using rule 84 (cn2 -> empty .)
    RREF            reduce using rule 84 (cn2 -> empty .)
    EULER           reduce using rule 84 (cn2 -> empty .)
    DO              reduce using rule 84 (cn2 -> empty .)
    READ            reduce using rule 84 (cn2 -> empty .)
    CBRACKET        reduce using rule 84 (cn2 -> empty .)
    CPAREN          reduce using rule 84 (cn2 -> empty .)


state 389

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (86) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 313

    ifblock                        shift and go to state 409

state 390

    (85) cn3 -> empty .

    OBRACKET        reduce using rule 85 (cn3 -> empty .)


state 391

    (86) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 86 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 86 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 392

    (88) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 88 (ifblock2 -> estatuto ifblock2 .)


state 393

    (95) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (94) plot2 -> . LCOR varcte COMMA varcte RCOR
    (95) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (96) plot2 -> . empty
    (170) empty -> .

    LCOR            shift and go to state 167
    CPAREN          reduce using rule 170 (empty -> .)

    plot2                          shift and go to state 410
    empty                          shift and go to state 411

state 394

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 412


state 395

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 61

    cond                           shift and go to state 413

state 396

    (142) kval -> varcte COMMA arrfun2 COMMA arrfun3 .

    CPAREN          reduce using rule 142 (kval -> varcte COMMA arrfun2 COMMA arrfun3 .)


state 397

    (145) arrfun3 -> LCOR . datasetarr2 RCOR
    (148) datasetarr2 -> . varcte
    (149) datasetarr2 -> . varcte COMMA datasetarr2
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    datasetarr2                    shift and go to state 414
    varcte                         shift and go to state 415

state 398

    (144) arrfun2 -> LCOR datasetarr RCOR .

    COMMA           reduce using rule 144 (arrfun2 -> LCOR datasetarr RCOR .)


state 399

    (158) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 158 (expfunc -> ID COMMA ID COMMA ID .)


state 400

    (159) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 159 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 401

    (165) mmmarray -> libero LCOR datasetarr4 RCOR . COMMA mmmarray
    (166) mmmarray -> libero LCOR datasetarr4 RCOR .

    COMMA           shift and go to state 416
    RCOR            reduce using rule 166 (mmmarray -> libero LCOR datasetarr4 RCOR .)


state 402

    (169) datasetarr4 -> varcte COMMA . datasetarr4
    (168) datasetarr4 -> . varcte
    (169) datasetarr4 -> . varcte COMMA datasetarr4
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 378
    datasetarr4                    shift and go to state 417

state 403

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 418


state 404

    (117) wn2 -> empty .

    SCOLON          reduce using rule 117 (wn2 -> empty .)


state 405

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (34) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 420

    funblock                       shift and go to state 419

state 406

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 407

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 408

    (29) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 29 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 409

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 421


state 410

    (95) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 95 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 411

    (96) plot2 -> empty .

    CPAREN          reduce using rule 96 (plot2 -> empty .)


state 412

    (90) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    EULER           reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 90 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 413

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 422


state 414

    (145) arrfun3 -> LCOR datasetarr2 . RCOR

    RCOR            shift and go to state 423


state 415

    (148) datasetarr2 -> varcte .
    (149) datasetarr2 -> varcte . COMMA datasetarr2

    RCOR            reduce using rule 148 (datasetarr2 -> varcte .)
    COMMA           shift and go to state 424


state 416

    (165) mmmarray -> libero LCOR datasetarr4 RCOR COMMA . mmmarray
    (165) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (166) mmmarray -> . libero LCOR datasetarr4 RCOR
    (167) libero -> . empty
    (170) empty -> .

    LCOR            reduce using rule 170 (empty -> .)

    libero                         shift and go to state 294
    mmmarray                       shift and go to state 425
    empty                          shift and go to state 295

state 417

    (169) datasetarr4 -> varcte COMMA datasetarr4 .

    RCOR            reduce using rule 169 (datasetarr4 -> varcte COMMA datasetarr4 .)


state 418

    (115) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    EULER           reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 115 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 419

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (170) empty -> .

    FUNC            reduce using rule 170 (empty -> .)
    OBRACKET        reduce using rule 170 (empty -> .)

    mn7                            shift and go to state 426
    empty                          shift and go to state 427

state 420

    (34) funblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (170) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (81) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (82) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (69) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (70) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (71) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (72) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (92) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (93) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (90) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (91) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (123) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (124) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (125) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (126) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (127) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (128) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (129) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (130) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (131) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (136) metodos -> . EULER OPAREN CPAREN SCOLON
    (115) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (121) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 170 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    EULER           shift and go to state 79
    DO              shift and go to state 80
    READ            shift and go to state 81

    block2                         shift and go to state 428
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 421

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (84) cn2 -> . empty
    (170) empty -> .

    ID              reduce using rule 170 (empty -> .)
    IF              reduce using rule 170 (empty -> .)
    PRINT           reduce using rule 170 (empty -> .)
    PLOT            reduce using rule 170 (empty -> .)
    COUNT           reduce using rule 170 (empty -> .)
    COUNTIF         reduce using rule 170 (empty -> .)
    MEAN            reduce using rule 170 (empty -> .)
    MEDIAN          reduce using rule 170 (empty -> .)
    MODE            reduce using rule 170 (empty -> .)
    STDV            reduce using rule 170 (empty -> .)
    KMEANS          reduce using rule 170 (empty -> .)
    DERL            reduce using rule 170 (empty -> .)
    DBERN           reduce using rule 170 (empty -> .)
    DPOI            reduce using rule 170 (empty -> .)
    TRANSPOSE       reduce using rule 170 (empty -> .)
    INVERSE         reduce using rule 170 (empty -> .)
    ROTATE          reduce using rule 170 (empty -> .)
    REF             reduce using rule 170 (empty -> .)
    RREF            reduce using rule 170 (empty -> .)
    EULER           reduce using rule 170 (empty -> .)
    DO              reduce using rule 170 (empty -> .)
    READ            reduce using rule 170 (empty -> .)
    CBRACKET        reduce using rule 170 (empty -> .)
    CPAREN          reduce using rule 170 (empty -> .)

    cn2                            shift and go to state 429
    empty                          shift and go to state 388

state 422

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 430


state 423

    (145) arrfun3 -> LCOR datasetarr2 RCOR .

    CPAREN          reduce using rule 145 (arrfun3 -> LCOR datasetarr2 RCOR .)


state 424

    (149) datasetarr2 -> varcte COMMA . datasetarr2
    (148) datasetarr2 -> . varcte
    (149) datasetarr2 -> . varcte COMMA datasetarr2
    (110) varcte -> . ID
    (111) varcte -> . ID asign2
    (112) varcte -> . NUMERIC
    (113) varcte -> . NUMBER
    (114) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 96
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 415
    datasetarr2                    shift and go to state 431

state 425

    (165) mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .

    RCOR            reduce using rule 165 (mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .)


state 426

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 427

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 428

    (34) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 432


state 429

    (82) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    EULER           reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 82 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 430

    (91) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    EULER           reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 91 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 431

    (149) datasetarr2 -> varcte COMMA datasetarr2 .

    RCOR            reduce using rule 149 (datasetarr2 -> varcte COMMA datasetarr2 .)


state 432

    (34) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 36 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 38 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 153 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 161 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 191 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 192 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 195 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 197 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 226 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 229 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 254 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 267 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 267 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 268 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 319 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 48 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 159 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 159
WARNING: reduce/reduce conflict in state 166 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 166
WARNING: reduce/reduce conflict in state 199 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 199
WARNING: reduce/reduce conflict in state 248 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 248
WARNING: reduce/reduce conflict in state 267 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 267
WARNING: reduce/reduce conflict in state 361 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 361
WARNING: reduce/reduce conflict in state 382 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 382
