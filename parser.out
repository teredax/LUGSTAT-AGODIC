Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    MONT
    OR
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
Rule 26    fcn1 -> empty
Rule 27    fcn2 -> empty
Rule 28    fcn3 -> empty
Rule 29    funccall2 -> COMMA expresion fcn2 funccall2
Rule 30    funccall2 -> ID fcn2 funccall2
Rule 31    funccall2 -> empty
Rule 32    modules2 -> vars
Rule 33    modules2 -> empty
Rule 34    funblock -> OBRACKET block2 CBRACKET
Rule 35    block -> OBRACKET block2 CBRACKET
Rule 36    block2 -> estatuto
Rule 37    block2 -> estatuto block2
Rule 38    block2 -> empty
Rule 39    tipo -> INT
Rule 40    tipo -> BOOL
Rule 41    tipo -> DOUBLE
Rule 42    tipo -> STRING
Rule 43    tipo -> CHAR
Rule 44    estatuto -> asign
Rule 45    estatuto -> cond
Rule 46    estatuto -> escrt
Rule 47    estatuto -> plot
Rule 48    estatuto -> count
Rule 49    estatuto -> countif
Rule 50    estatuto -> metodos
Rule 51    estatuto -> dwhile
Rule 52    estatuto -> readln
Rule 53    estatuto -> funccall
Rule 54    estatuto -> regreso
Rule 55    regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON
Rule 56    regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON
Rule 57    regnum1 -> <empty>
Rule 58    regnum2 -> <empty>
Rule 59    afcn1 -> empty
Rule 60    asign -> ID EQUALS expresion SCOLON
Rule 61    asign -> ID EQUALS ID SCOLON
Rule 62    asign -> ID EQUALS ID asign2 SCOLON
Rule 63    asign -> ID asign2 EQUALS ID SCOLON
Rule 64    asign -> ID asign2 EQUALS expresion SCOLON
Rule 65    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 66    asign -> ID EQUALS funccall afcn1
Rule 67    asign2 -> LCOR expresion RCOR LCOR varcte RCOR
Rule 68    asign2 -> LCOR expresion RCOR LCOR expresion RCOR
Rule 69    asign2 -> LCOR varcte RCOR LCOR expresion RCOR
Rule 70    asign2 -> LCOR varcte RCOR LCOR varcte RCOR
Rule 71    asign2 -> LCOR expresion RCOR
Rule 72    asign2 -> LCOR varcte RCOR
Rule 73    asign3 -> LCOR expresion RCOR
Rule 74    asign3 -> LCOR varcte RCOR
Rule 75    asign3 -> empty
Rule 76    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 77    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 78    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 79    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 80    escrt2 -> COMMA escrt3
Rule 81    escrt2 -> empty
Rule 82    escrt3 -> ID escrt2
Rule 83    escrt3 -> ID
Rule 84    escrt3 -> STRING escrt2 escrt2
Rule 85    en1 -> empty
Rule 86    en2 -> empty
Rule 87    en3 -> empty
Rule 88    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 89    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 90    cn1 -> empty
Rule 91    cn2 -> empty
Rule 92    cn3 -> empty
Rule 93    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 94    ifblock2 -> estatuto
Rule 95    ifblock2 -> estatuto ifblock2
Rule 96    ifblock2 -> empty
Rule 97    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 98    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 99    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 100   plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 101   plot2 -> LCOR varcte COMMA varcte RCOR
Rule 102   plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 103   plot2 -> empty
Rule 104   xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 105   xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 106   xyfunc -> empty
Rule 107   expresion -> exp
Rule 108   expresion -> expresion RELOP exp
Rule 109   exp -> termino
Rule 110   exp -> termino PLUS exp
Rule 111   exp -> termino MINUS exp
Rule 112   termino -> factor
Rule 113   termino -> factor MULT termino
Rule 114   termino -> factor DIV termino
Rule 115   factor -> OPAREN expresion CPAREN
Rule 116   factor -> varcte
Rule 117   varcte -> ID
Rule 118   varcte -> ID asign2
Rule 119   varcte -> NUMERIC
Rule 120   varcte -> NUMBER
Rule 121   varcte -> LOGICAL
Rule 122   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 123   wn1 -> empty
Rule 124   wn2 -> empty
Rule 125   wblock -> OBRACKET block2 CBRACKET
Rule 126   dwhileconds -> expresion dwhileconds
Rule 127   dwhileconds -> empty
Rule 128   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 129   rn1 -> empty
Rule 130   metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON
Rule 131   metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
Rule 132   metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON
Rule 133   metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON
Rule 134   metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON
Rule 135   metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON
Rule 136   metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
Rule 137   metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
Rule 138   metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
Rule 139   metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
Rule 140   metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
Rule 141   metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON
Rule 142   metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON
Rule 143   metodos -> EULER tp6 OPAREN CPAREN SCOLON
Rule 144   fe1 -> empty
Rule 145   fe2 -> empty
Rule 146   fe3 -> empty
Rule 147   fe4 -> empty
Rule 148   fe5 -> empty
Rule 149   kval -> varcte COMMA arrfun2 COMMA arrfun3
Rule 150   arrfun -> LCOR datasetarr RCOR
Rule 151   arrfun2 -> LCOR datasetarr RCOR
Rule 152   arrfun3 -> LCOR datasetarr2 RCOR
Rule 153   datasetarr -> varcte
Rule 154   datasetarr -> varcte COMMA datasetarr
Rule 155   datasetarr2 -> varcte
Rule 156   datasetarr2 -> varcte COMMA datasetarr2
Rule 157   dmn1 -> empty
Rule 158   dbrn1 -> empty
Rule 159   dp1 -> empty
Rule 160   tp1 -> empty
Rule 161   tp2 -> empty
Rule 162   tp3 -> empty
Rule 163   tp4 -> empty
Rule 164   tp5 -> empty
Rule 165   tp6 -> empty
Rule 166   expfunc -> ID COMMA ID COMMA ID
Rule 167   expfunc -> varcte COMMA varcte COMMA varcte
Rule 168   expfunc2 -> ID COMMA ID
Rule 169   expfunc2 -> varcte COMMA varcte
Rule 170   mmmfunc -> LCOR RCOR
Rule 171   mmmfunc -> LCOR mmmarray RCOR
Rule 172   mmmfunc -> ID
Rule 173   mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray
Rule 174   mmmarray -> libero LCOR datasetarr4 RCOR
Rule 175   libero -> empty
Rule 176   datasetarr4 -> varcte
Rule 177   datasetarr4 -> varcte COMMA datasetarr4
Rule 178   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 40
CBRACKET             : 34 35 93 125
CHAR                 : 43
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 29 80 97 97 98 98 98 101 102 102 149 149 154 156 166 166 167 167 168 169 173 177
COMMENT              : 
COUNT                : 97
COUNTIF              : 98
CPAREN               : 19 24 25 55 56 76 77 78 79 88 89 97 98 99 100 115 122 128 130 131 132 133 134 135 136 137 138 139 140 141 142 143
CTED                 : 
CTEI                 : 
DBERN                : 136
DERL                 : 135
DIFF                 : 
DIV                  : 114
DO                   : 122
DOUBLE               : 41
DPOI                 : 137
ELSE                 : 89
EQ                   : 
EQUALS               : 60 61 62 63 64 65 66 104 105
EULER                : 143
FUNC                 : 19
FX                   : 104
FY                   : 105
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 25 25 30 55 60 61 61 62 62 63 63 64 65 65 66 76 82 83 97 98 117 118 128 166 166 166 168 168 172
IF                   : 88 89
INT                  : 39
INTEGER              : 
INVERSE              : 139
KMEANS               : 134
LCOR                 : 12 13 14 14 15 15 67 67 68 68 69 69 70 70 71 72 73 74 101 102 150 151 152 170 171 173 174
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 121
LUGSTAT              : 1
MEAN                 : 130
MEDIAN               : 131
MINUS                : 111
MODE                 : 132
MONT                 : 
MULT                 : 113
NUMBER               : 12 13 14 14 15 15 120
NUMERIC              : 119
OBRACKET             : 34 35 93 125
OPAREN               : 19 24 25 55 56 76 77 78 79 88 89 97 98 99 100 115 122 128 130 131 132 133 134 135 136 137 138 139 140 141 142 143
OR                   : 
PER                  : 
PLOT                 : 99 100
PLUS                 : 110
PRINT                : 76 77 78 79
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 67 67 68 68 69 69 70 70 71 72 73 74 101 102 150 151 152 170 171 173 174
READ                 : 128
REF                  : 141
RELOP                : 108
RETURN               : 55 56
ROTATE               : 140
RREF                 : 142
SCOLON               : 1 11 12 13 14 15 16 55 56 60 61 62 63 64 65 76 77 78 79 88 89 97 98 99 100 104 105 122 128 130 131 132 133 134 135 136 137 138 139 140 141 142 143
STDV                 : 133
STRING               : 42 78 79 84
TIPO                 : 
TRANSPOSE            : 138
VAR                  : 9
WHILE                : 122
error                : 

Nonterminals, with rules where they appear

addmain              : 1
afcn1                : 66
arrfun               : 130 131 132 133
arrfun2              : 149
arrfun3              : 149
asign                : 44
asign2               : 16 17 62 63 64 65 65 118
asign3               : 
block                : 1
block2               : 34 35 37 125
cn1                  : 88 89
cn2                  : 88 89
cn3                  : 89
cond                 : 45 98
count                : 48
countif              : 49
datasetarr           : 150 151 154
datasetarr2          : 152 156
datasetarr4          : 173 174 177
dbrn1                : 136
dmn1                 : 135
dp1                  : 137
dwhile               : 51
dwhileconds          : 122 126
empty                : 2 3 5 8 18 20 21 23 26 27 28 31 33 38 59 75 81 85 86 87 90 91 92 96 103 106 123 124 127 129 144 145 146 147 148 157 158 159 160 161 162 163 164 165 175
en1                  : 77
en2                  : 78 79
en3                  : 76
escrt                : 46
escrt2               : 76 79 82 84 84
escrt3               : 80
estatuto             : 36 37 94 95
exp                  : 104 105 107 108 110 111
expfunc              : 135
expfunc2             : 136 137
expresion            : 24 29 56 60 64 67 68 68 69 71 73 77 88 89 108 115 126
factor               : 112 113 114
fcn1                 : 24 25
fcn2                 : 24 25 29 30
fcn3                 : 24
fe1                  : 130
fe2                  : 131
fe3                  : 132
fe4                  : 133
fe5                  : 134
funblock             : 19
funccall             : 53 66
funccall2            : 24 25 29 30
ifblock              : 88 89 89
ifblock2             : 93 95
kval                 : 134
libero               : 173 174
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 50
mmmarray             : 171 173
mmmfunc              : 138 139 140 141 142
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 47
plot2                : 100 102
readln               : 52
regnum1              : 55
regnum2              : 56
regreso              : 54
rn1                  : 128
savename             : 
termino              : 109 110 111 113 114
tipo                 : 11 12 13 14 15 16 19
tp1                  : 138
tp2                  : 139
tp3                  : 140
tp4                  : 141
tp5                  : 142
tp6                  : 143
varcte               : 67 69 70 70 72 74 97 97 98 98 101 101 102 102 116 149 153 154 155 156 167 167 167 169 169 176 177
vars                 : 4 32
vars1                : 9 10 17
wblock               : 122
wn1                  : 122
wn2                  : 122
xyfunc               : 99 104 105

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (178) empty -> .

    VAR             reduce using rule 178 (empty -> .)
    FUNC            reduce using rule 178 (empty -> .)
    OBRACKET        reduce using rule 178 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (178) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 178 (empty -> .)
    OBRACKET        reduce using rule 178 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (178) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 178 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (178) empty -> .

    OBRACKET        reduce using rule 178 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (178) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 178 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (35) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (67) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (68) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (69) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (70) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (71) asign2 -> LCOR . expresion RCOR
    (72) asign2 -> LCOR . varcte RCOR
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte

    NUMBER          shift and go to state 36
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (35) block -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (54) estatuto -> . regreso
    (178) empty -> .
    (60) asign -> . ID EQUALS expresion SCOLON
    (61) asign -> . ID EQUALS ID SCOLON
    (62) asign -> . ID EQUALS ID asign2 SCOLON
    (63) asign -> . ID asign2 EQUALS ID SCOLON
    (64) asign -> . ID asign2 EQUALS expresion SCOLON
    (65) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (66) asign -> . ID EQUALS funccall afcn1
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (76) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (99) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (100) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (97) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (98) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (130) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (131) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (135) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (136) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (137) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (122) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (128) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (55) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 178 (empty -> .)
    ID              shift and go to state 61
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    PLOT            shift and go to state 64
    COUNT           shift and go to state 65
    COUNTIF         shift and go to state 66
    MEAN            shift and go to state 67
    MEDIAN          shift and go to state 68
    MODE            shift and go to state 69
    STDV            shift and go to state 70
    KMEANS          shift and go to state 71
    DERL            shift and go to state 72
    DBERN           shift and go to state 73
    DPOI            shift and go to state 74
    TRANSPOSE       shift and go to state 75
    INVERSE         shift and go to state 76
    ROTATE          shift and go to state 77
    REF             shift and go to state 78
    RREF            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82
    RETURN          shift and go to state 83

    block2                         shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59
    regreso                        shift and go to state 60

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 84

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 85


state 30

    (39) tipo -> INT .

    SCOLON          reduce using rule 39 (tipo -> INT .)
    OPAREN          reduce using rule 39 (tipo -> INT .)


state 31

    (40) tipo -> BOOL .

    SCOLON          reduce using rule 40 (tipo -> BOOL .)
    OPAREN          reduce using rule 40 (tipo -> BOOL .)


state 32

    (41) tipo -> DOUBLE .

    SCOLON          reduce using rule 41 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 41 (tipo -> DOUBLE .)


state 33

    (42) tipo -> STRING .

    SCOLON          reduce using rule 42 (tipo -> STRING .)
    OPAREN          reduce using rule 42 (tipo -> STRING .)


state 34

    (43) tipo -> CHAR .

    SCOLON          reduce using rule 43 (tipo -> CHAR .)
    OPAREN          reduce using rule 43 (tipo -> CHAR .)


state 35

    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

    RCOR            reduce using rule 117 (varcte -> ID .)
    MULT            reduce using rule 117 (varcte -> ID .)
    DIV             reduce using rule 117 (varcte -> ID .)
    PLUS            reduce using rule 117 (varcte -> ID .)
    MINUS           reduce using rule 117 (varcte -> ID .)
    RELOP           reduce using rule 117 (varcte -> ID .)
    CPAREN          reduce using rule 117 (varcte -> ID .)
    SCOLON          reduce using rule 117 (varcte -> ID .)
    COMMA           reduce using rule 117 (varcte -> ID .)
    ID              reduce using rule 117 (varcte -> ID .)
    OPAREN          reduce using rule 117 (varcte -> ID .)
    NUMERIC         reduce using rule 117 (varcte -> ID .)
    NUMBER          reduce using rule 117 (varcte -> ID .)
    LOGICAL         reduce using rule 117 (varcte -> ID .)
    LCOR            shift and go to state 87

    asign2                         shift and go to state 86

state 36

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (120) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 88
    MULT            reduce using rule 120 (varcte -> NUMBER .)
    DIV             reduce using rule 120 (varcte -> NUMBER .)
    PLUS            reduce using rule 120 (varcte -> NUMBER .)
    MINUS           reduce using rule 120 (varcte -> NUMBER .)
    RELOP           reduce using rule 120 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 120 (varcte -> NUMBER .) ]


state 37

    (67) asign2 -> LCOR expresion . RCOR LCOR varcte RCOR
    (68) asign2 -> LCOR expresion . RCOR LCOR expresion RCOR
    (71) asign2 -> LCOR expresion . RCOR
    (108) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 89
    RELOP           shift and go to state 90


state 38

    (69) asign2 -> LCOR varcte . RCOR LCOR expresion RCOR
    (70) asign2 -> LCOR varcte . RCOR LCOR varcte RCOR
    (72) asign2 -> LCOR varcte . RCOR
    (116) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 91
    MULT            reduce using rule 116 (factor -> varcte .)
    DIV             reduce using rule 116 (factor -> varcte .)
    PLUS            reduce using rule 116 (factor -> varcte .)
    MINUS           reduce using rule 116 (factor -> varcte .)
    RELOP           reduce using rule 116 (factor -> varcte .)

  ! RCOR            [ reduce using rule 116 (factor -> varcte .) ]


state 39

    (107) expresion -> exp .

    RCOR            reduce using rule 107 (expresion -> exp .)
    RELOP           reduce using rule 107 (expresion -> exp .)
    CPAREN          reduce using rule 107 (expresion -> exp .)
    SCOLON          reduce using rule 107 (expresion -> exp .)
    COMMA           reduce using rule 107 (expresion -> exp .)
    ID              reduce using rule 107 (expresion -> exp .)
    OPAREN          reduce using rule 107 (expresion -> exp .)
    NUMERIC         reduce using rule 107 (expresion -> exp .)
    NUMBER          reduce using rule 107 (expresion -> exp .)
    LOGICAL         reduce using rule 107 (expresion -> exp .)


state 40

    (119) varcte -> NUMERIC .

    RCOR            reduce using rule 119 (varcte -> NUMERIC .)
    MULT            reduce using rule 119 (varcte -> NUMERIC .)
    DIV             reduce using rule 119 (varcte -> NUMERIC .)
    PLUS            reduce using rule 119 (varcte -> NUMERIC .)
    MINUS           reduce using rule 119 (varcte -> NUMERIC .)
    RELOP           reduce using rule 119 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 119 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 119 (varcte -> NUMERIC .)
    COMMA           reduce using rule 119 (varcte -> NUMERIC .)
    ID              reduce using rule 119 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 119 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 119 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 119 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 119 (varcte -> NUMERIC .)


state 41

    (121) varcte -> LOGICAL .

    RCOR            reduce using rule 121 (varcte -> LOGICAL .)
    MULT            reduce using rule 121 (varcte -> LOGICAL .)
    DIV             reduce using rule 121 (varcte -> LOGICAL .)
    PLUS            reduce using rule 121 (varcte -> LOGICAL .)
    MINUS           reduce using rule 121 (varcte -> LOGICAL .)
    RELOP           reduce using rule 121 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 121 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 121 (varcte -> LOGICAL .)
    COMMA           reduce using rule 121 (varcte -> LOGICAL .)
    ID              reduce using rule 121 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 121 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 121 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 121 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 121 (varcte -> LOGICAL .)


state 42

    (109) exp -> termino .
    (110) exp -> termino . PLUS exp
    (111) exp -> termino . MINUS exp

    RCOR            reduce using rule 109 (exp -> termino .)
    RELOP           reduce using rule 109 (exp -> termino .)
    CPAREN          reduce using rule 109 (exp -> termino .)
    SCOLON          reduce using rule 109 (exp -> termino .)
    COMMA           reduce using rule 109 (exp -> termino .)
    ID              reduce using rule 109 (exp -> termino .)
    OPAREN          reduce using rule 109 (exp -> termino .)
    NUMERIC         reduce using rule 109 (exp -> termino .)
    NUMBER          reduce using rule 109 (exp -> termino .)
    LOGICAL         reduce using rule 109 (exp -> termino .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93


state 43

    (112) termino -> factor .
    (113) termino -> factor . MULT termino
    (114) termino -> factor . DIV termino

    PLUS            reduce using rule 112 (termino -> factor .)
    MINUS           reduce using rule 112 (termino -> factor .)
    RCOR            reduce using rule 112 (termino -> factor .)
    RELOP           reduce using rule 112 (termino -> factor .)
    CPAREN          reduce using rule 112 (termino -> factor .)
    SCOLON          reduce using rule 112 (termino -> factor .)
    COMMA           reduce using rule 112 (termino -> factor .)
    ID              reduce using rule 112 (termino -> factor .)
    OPAREN          reduce using rule 112 (termino -> factor .)
    NUMERIC         reduce using rule 112 (termino -> factor .)
    NUMBER          reduce using rule 112 (termino -> factor .)
    LOGICAL         reduce using rule 112 (termino -> factor .)
    MULT            shift and go to state 94
    DIV             shift and go to state 95


state 44

    (115) factor -> OPAREN . expresion CPAREN
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 96
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 45

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 99

state 46

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 100

state 47

    (35) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 101


state 48

    (36) block2 -> estatuto .
    (37) block2 -> estatuto . block2
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (54) estatuto -> . regreso
    (178) empty -> .
    (60) asign -> . ID EQUALS expresion SCOLON
    (61) asign -> . ID EQUALS ID SCOLON
    (62) asign -> . ID EQUALS ID asign2 SCOLON
    (63) asign -> . ID asign2 EQUALS ID SCOLON
    (64) asign -> . ID asign2 EQUALS expresion SCOLON
    (65) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (66) asign -> . ID EQUALS funccall afcn1
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (76) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (99) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (100) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (97) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (98) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (130) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (131) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (135) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (136) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (137) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (122) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (128) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (55) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 36 (block2 -> estatuto .)
    CBRACKET        reduce using rule 36 (block2 -> estatuto .)
    ID              shift and go to state 61
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    PLOT            shift and go to state 64
    COUNT           shift and go to state 65
    COUNTIF         shift and go to state 66
    MEAN            shift and go to state 67
    MEDIAN          shift and go to state 68
    MODE            shift and go to state 69
    STDV            shift and go to state 70
    KMEANS          shift and go to state 71
    DERL            shift and go to state 72
    DBERN           shift and go to state 73
    DPOI            shift and go to state 74
    TRANSPOSE       shift and go to state 75
    INVERSE         shift and go to state 76
    ROTATE          shift and go to state 77
    REF             shift and go to state 78
    RREF            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82
    RETURN          shift and go to state 83

  ! CBRACKET        [ reduce using rule 178 (empty -> .) ]

    estatuto                       shift and go to state 48
    block2                         shift and go to state 102
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59
    regreso                        shift and go to state 60

state 49

    (38) block2 -> empty .

    CBRACKET        reduce using rule 38 (block2 -> empty .)


state 50

    (44) estatuto -> asign .

    ID              reduce using rule 44 (estatuto -> asign .)
    IF              reduce using rule 44 (estatuto -> asign .)
    PRINT           reduce using rule 44 (estatuto -> asign .)
    PLOT            reduce using rule 44 (estatuto -> asign .)
    COUNT           reduce using rule 44 (estatuto -> asign .)
    COUNTIF         reduce using rule 44 (estatuto -> asign .)
    MEAN            reduce using rule 44 (estatuto -> asign .)
    MEDIAN          reduce using rule 44 (estatuto -> asign .)
    MODE            reduce using rule 44 (estatuto -> asign .)
    STDV            reduce using rule 44 (estatuto -> asign .)
    KMEANS          reduce using rule 44 (estatuto -> asign .)
    DERL            reduce using rule 44 (estatuto -> asign .)
    DBERN           reduce using rule 44 (estatuto -> asign .)
    DPOI            reduce using rule 44 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 44 (estatuto -> asign .)
    INVERSE         reduce using rule 44 (estatuto -> asign .)
    ROTATE          reduce using rule 44 (estatuto -> asign .)
    REF             reduce using rule 44 (estatuto -> asign .)
    RREF            reduce using rule 44 (estatuto -> asign .)
    EULER           reduce using rule 44 (estatuto -> asign .)
    DO              reduce using rule 44 (estatuto -> asign .)
    READ            reduce using rule 44 (estatuto -> asign .)
    RETURN          reduce using rule 44 (estatuto -> asign .)
    CBRACKET        reduce using rule 44 (estatuto -> asign .)


state 51

    (45) estatuto -> cond .

    ID              reduce using rule 45 (estatuto -> cond .)
    IF              reduce using rule 45 (estatuto -> cond .)
    PRINT           reduce using rule 45 (estatuto -> cond .)
    PLOT            reduce using rule 45 (estatuto -> cond .)
    COUNT           reduce using rule 45 (estatuto -> cond .)
    COUNTIF         reduce using rule 45 (estatuto -> cond .)
    MEAN            reduce using rule 45 (estatuto -> cond .)
    MEDIAN          reduce using rule 45 (estatuto -> cond .)
    MODE            reduce using rule 45 (estatuto -> cond .)
    STDV            reduce using rule 45 (estatuto -> cond .)
    KMEANS          reduce using rule 45 (estatuto -> cond .)
    DERL            reduce using rule 45 (estatuto -> cond .)
    DBERN           reduce using rule 45 (estatuto -> cond .)
    DPOI            reduce using rule 45 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 45 (estatuto -> cond .)
    INVERSE         reduce using rule 45 (estatuto -> cond .)
    ROTATE          reduce using rule 45 (estatuto -> cond .)
    REF             reduce using rule 45 (estatuto -> cond .)
    RREF            reduce using rule 45 (estatuto -> cond .)
    EULER           reduce using rule 45 (estatuto -> cond .)
    DO              reduce using rule 45 (estatuto -> cond .)
    READ            reduce using rule 45 (estatuto -> cond .)
    RETURN          reduce using rule 45 (estatuto -> cond .)
    CBRACKET        reduce using rule 45 (estatuto -> cond .)


state 52

    (46) estatuto -> escrt .

    ID              reduce using rule 46 (estatuto -> escrt .)
    IF              reduce using rule 46 (estatuto -> escrt .)
    PRINT           reduce using rule 46 (estatuto -> escrt .)
    PLOT            reduce using rule 46 (estatuto -> escrt .)
    COUNT           reduce using rule 46 (estatuto -> escrt .)
    COUNTIF         reduce using rule 46 (estatuto -> escrt .)
    MEAN            reduce using rule 46 (estatuto -> escrt .)
    MEDIAN          reduce using rule 46 (estatuto -> escrt .)
    MODE            reduce using rule 46 (estatuto -> escrt .)
    STDV            reduce using rule 46 (estatuto -> escrt .)
    KMEANS          reduce using rule 46 (estatuto -> escrt .)
    DERL            reduce using rule 46 (estatuto -> escrt .)
    DBERN           reduce using rule 46 (estatuto -> escrt .)
    DPOI            reduce using rule 46 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 46 (estatuto -> escrt .)
    INVERSE         reduce using rule 46 (estatuto -> escrt .)
    ROTATE          reduce using rule 46 (estatuto -> escrt .)
    REF             reduce using rule 46 (estatuto -> escrt .)
    RREF            reduce using rule 46 (estatuto -> escrt .)
    EULER           reduce using rule 46 (estatuto -> escrt .)
    DO              reduce using rule 46 (estatuto -> escrt .)
    READ            reduce using rule 46 (estatuto -> escrt .)
    RETURN          reduce using rule 46 (estatuto -> escrt .)
    CBRACKET        reduce using rule 46 (estatuto -> escrt .)


state 53

    (47) estatuto -> plot .

    ID              reduce using rule 47 (estatuto -> plot .)
    IF              reduce using rule 47 (estatuto -> plot .)
    PRINT           reduce using rule 47 (estatuto -> plot .)
    PLOT            reduce using rule 47 (estatuto -> plot .)
    COUNT           reduce using rule 47 (estatuto -> plot .)
    COUNTIF         reduce using rule 47 (estatuto -> plot .)
    MEAN            reduce using rule 47 (estatuto -> plot .)
    MEDIAN          reduce using rule 47 (estatuto -> plot .)
    MODE            reduce using rule 47 (estatuto -> plot .)
    STDV            reduce using rule 47 (estatuto -> plot .)
    KMEANS          reduce using rule 47 (estatuto -> plot .)
    DERL            reduce using rule 47 (estatuto -> plot .)
    DBERN           reduce using rule 47 (estatuto -> plot .)
    DPOI            reduce using rule 47 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 47 (estatuto -> plot .)
    INVERSE         reduce using rule 47 (estatuto -> plot .)
    ROTATE          reduce using rule 47 (estatuto -> plot .)
    REF             reduce using rule 47 (estatuto -> plot .)
    RREF            reduce using rule 47 (estatuto -> plot .)
    EULER           reduce using rule 47 (estatuto -> plot .)
    DO              reduce using rule 47 (estatuto -> plot .)
    READ            reduce using rule 47 (estatuto -> plot .)
    RETURN          reduce using rule 47 (estatuto -> plot .)
    CBRACKET        reduce using rule 47 (estatuto -> plot .)


state 54

    (48) estatuto -> count .

    ID              reduce using rule 48 (estatuto -> count .)
    IF              reduce using rule 48 (estatuto -> count .)
    PRINT           reduce using rule 48 (estatuto -> count .)
    PLOT            reduce using rule 48 (estatuto -> count .)
    COUNT           reduce using rule 48 (estatuto -> count .)
    COUNTIF         reduce using rule 48 (estatuto -> count .)
    MEAN            reduce using rule 48 (estatuto -> count .)
    MEDIAN          reduce using rule 48 (estatuto -> count .)
    MODE            reduce using rule 48 (estatuto -> count .)
    STDV            reduce using rule 48 (estatuto -> count .)
    KMEANS          reduce using rule 48 (estatuto -> count .)
    DERL            reduce using rule 48 (estatuto -> count .)
    DBERN           reduce using rule 48 (estatuto -> count .)
    DPOI            reduce using rule 48 (estatuto -> count .)
    TRANSPOSE       reduce using rule 48 (estatuto -> count .)
    INVERSE         reduce using rule 48 (estatuto -> count .)
    ROTATE          reduce using rule 48 (estatuto -> count .)
    REF             reduce using rule 48 (estatuto -> count .)
    RREF            reduce using rule 48 (estatuto -> count .)
    EULER           reduce using rule 48 (estatuto -> count .)
    DO              reduce using rule 48 (estatuto -> count .)
    READ            reduce using rule 48 (estatuto -> count .)
    RETURN          reduce using rule 48 (estatuto -> count .)
    CBRACKET        reduce using rule 48 (estatuto -> count .)


state 55

    (49) estatuto -> countif .

    ID              reduce using rule 49 (estatuto -> countif .)
    IF              reduce using rule 49 (estatuto -> countif .)
    PRINT           reduce using rule 49 (estatuto -> countif .)
    PLOT            reduce using rule 49 (estatuto -> countif .)
    COUNT           reduce using rule 49 (estatuto -> countif .)
    COUNTIF         reduce using rule 49 (estatuto -> countif .)
    MEAN            reduce using rule 49 (estatuto -> countif .)
    MEDIAN          reduce using rule 49 (estatuto -> countif .)
    MODE            reduce using rule 49 (estatuto -> countif .)
    STDV            reduce using rule 49 (estatuto -> countif .)
    KMEANS          reduce using rule 49 (estatuto -> countif .)
    DERL            reduce using rule 49 (estatuto -> countif .)
    DBERN           reduce using rule 49 (estatuto -> countif .)
    DPOI            reduce using rule 49 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 49 (estatuto -> countif .)
    INVERSE         reduce using rule 49 (estatuto -> countif .)
    ROTATE          reduce using rule 49 (estatuto -> countif .)
    REF             reduce using rule 49 (estatuto -> countif .)
    RREF            reduce using rule 49 (estatuto -> countif .)
    EULER           reduce using rule 49 (estatuto -> countif .)
    DO              reduce using rule 49 (estatuto -> countif .)
    READ            reduce using rule 49 (estatuto -> countif .)
    RETURN          reduce using rule 49 (estatuto -> countif .)
    CBRACKET        reduce using rule 49 (estatuto -> countif .)


state 56

    (50) estatuto -> metodos .

    ID              reduce using rule 50 (estatuto -> metodos .)
    IF              reduce using rule 50 (estatuto -> metodos .)
    PRINT           reduce using rule 50 (estatuto -> metodos .)
    PLOT            reduce using rule 50 (estatuto -> metodos .)
    COUNT           reduce using rule 50 (estatuto -> metodos .)
    COUNTIF         reduce using rule 50 (estatuto -> metodos .)
    MEAN            reduce using rule 50 (estatuto -> metodos .)
    MEDIAN          reduce using rule 50 (estatuto -> metodos .)
    MODE            reduce using rule 50 (estatuto -> metodos .)
    STDV            reduce using rule 50 (estatuto -> metodos .)
    KMEANS          reduce using rule 50 (estatuto -> metodos .)
    DERL            reduce using rule 50 (estatuto -> metodos .)
    DBERN           reduce using rule 50 (estatuto -> metodos .)
    DPOI            reduce using rule 50 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 50 (estatuto -> metodos .)
    INVERSE         reduce using rule 50 (estatuto -> metodos .)
    ROTATE          reduce using rule 50 (estatuto -> metodos .)
    REF             reduce using rule 50 (estatuto -> metodos .)
    RREF            reduce using rule 50 (estatuto -> metodos .)
    EULER           reduce using rule 50 (estatuto -> metodos .)
    DO              reduce using rule 50 (estatuto -> metodos .)
    READ            reduce using rule 50 (estatuto -> metodos .)
    RETURN          reduce using rule 50 (estatuto -> metodos .)
    CBRACKET        reduce using rule 50 (estatuto -> metodos .)


state 57

    (51) estatuto -> dwhile .

    ID              reduce using rule 51 (estatuto -> dwhile .)
    IF              reduce using rule 51 (estatuto -> dwhile .)
    PRINT           reduce using rule 51 (estatuto -> dwhile .)
    PLOT            reduce using rule 51 (estatuto -> dwhile .)
    COUNT           reduce using rule 51 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 51 (estatuto -> dwhile .)
    MEAN            reduce using rule 51 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 51 (estatuto -> dwhile .)
    MODE            reduce using rule 51 (estatuto -> dwhile .)
    STDV            reduce using rule 51 (estatuto -> dwhile .)
    KMEANS          reduce using rule 51 (estatuto -> dwhile .)
    DERL            reduce using rule 51 (estatuto -> dwhile .)
    DBERN           reduce using rule 51 (estatuto -> dwhile .)
    DPOI            reduce using rule 51 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 51 (estatuto -> dwhile .)
    INVERSE         reduce using rule 51 (estatuto -> dwhile .)
    ROTATE          reduce using rule 51 (estatuto -> dwhile .)
    REF             reduce using rule 51 (estatuto -> dwhile .)
    RREF            reduce using rule 51 (estatuto -> dwhile .)
    EULER           reduce using rule 51 (estatuto -> dwhile .)
    DO              reduce using rule 51 (estatuto -> dwhile .)
    READ            reduce using rule 51 (estatuto -> dwhile .)
    RETURN          reduce using rule 51 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 51 (estatuto -> dwhile .)


state 58

    (52) estatuto -> readln .

    ID              reduce using rule 52 (estatuto -> readln .)
    IF              reduce using rule 52 (estatuto -> readln .)
    PRINT           reduce using rule 52 (estatuto -> readln .)
    PLOT            reduce using rule 52 (estatuto -> readln .)
    COUNT           reduce using rule 52 (estatuto -> readln .)
    COUNTIF         reduce using rule 52 (estatuto -> readln .)
    MEAN            reduce using rule 52 (estatuto -> readln .)
    MEDIAN          reduce using rule 52 (estatuto -> readln .)
    MODE            reduce using rule 52 (estatuto -> readln .)
    STDV            reduce using rule 52 (estatuto -> readln .)
    KMEANS          reduce using rule 52 (estatuto -> readln .)
    DERL            reduce using rule 52 (estatuto -> readln .)
    DBERN           reduce using rule 52 (estatuto -> readln .)
    DPOI            reduce using rule 52 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 52 (estatuto -> readln .)
    INVERSE         reduce using rule 52 (estatuto -> readln .)
    ROTATE          reduce using rule 52 (estatuto -> readln .)
    REF             reduce using rule 52 (estatuto -> readln .)
    RREF            reduce using rule 52 (estatuto -> readln .)
    EULER           reduce using rule 52 (estatuto -> readln .)
    DO              reduce using rule 52 (estatuto -> readln .)
    READ            reduce using rule 52 (estatuto -> readln .)
    RETURN          reduce using rule 52 (estatuto -> readln .)
    CBRACKET        reduce using rule 52 (estatuto -> readln .)


state 59

    (53) estatuto -> funccall .

    ID              reduce using rule 53 (estatuto -> funccall .)
    IF              reduce using rule 53 (estatuto -> funccall .)
    PRINT           reduce using rule 53 (estatuto -> funccall .)
    PLOT            reduce using rule 53 (estatuto -> funccall .)
    COUNT           reduce using rule 53 (estatuto -> funccall .)
    COUNTIF         reduce using rule 53 (estatuto -> funccall .)
    MEAN            reduce using rule 53 (estatuto -> funccall .)
    MEDIAN          reduce using rule 53 (estatuto -> funccall .)
    MODE            reduce using rule 53 (estatuto -> funccall .)
    STDV            reduce using rule 53 (estatuto -> funccall .)
    KMEANS          reduce using rule 53 (estatuto -> funccall .)
    DERL            reduce using rule 53 (estatuto -> funccall .)
    DBERN           reduce using rule 53 (estatuto -> funccall .)
    DPOI            reduce using rule 53 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 53 (estatuto -> funccall .)
    INVERSE         reduce using rule 53 (estatuto -> funccall .)
    ROTATE          reduce using rule 53 (estatuto -> funccall .)
    REF             reduce using rule 53 (estatuto -> funccall .)
    RREF            reduce using rule 53 (estatuto -> funccall .)
    EULER           reduce using rule 53 (estatuto -> funccall .)
    DO              reduce using rule 53 (estatuto -> funccall .)
    READ            reduce using rule 53 (estatuto -> funccall .)
    RETURN          reduce using rule 53 (estatuto -> funccall .)
    CBRACKET        reduce using rule 53 (estatuto -> funccall .)


state 60

    (54) estatuto -> regreso .

    ID              reduce using rule 54 (estatuto -> regreso .)
    IF              reduce using rule 54 (estatuto -> regreso .)
    PRINT           reduce using rule 54 (estatuto -> regreso .)
    PLOT            reduce using rule 54 (estatuto -> regreso .)
    COUNT           reduce using rule 54 (estatuto -> regreso .)
    COUNTIF         reduce using rule 54 (estatuto -> regreso .)
    MEAN            reduce using rule 54 (estatuto -> regreso .)
    MEDIAN          reduce using rule 54 (estatuto -> regreso .)
    MODE            reduce using rule 54 (estatuto -> regreso .)
    STDV            reduce using rule 54 (estatuto -> regreso .)
    KMEANS          reduce using rule 54 (estatuto -> regreso .)
    DERL            reduce using rule 54 (estatuto -> regreso .)
    DBERN           reduce using rule 54 (estatuto -> regreso .)
    DPOI            reduce using rule 54 (estatuto -> regreso .)
    TRANSPOSE       reduce using rule 54 (estatuto -> regreso .)
    INVERSE         reduce using rule 54 (estatuto -> regreso .)
    ROTATE          reduce using rule 54 (estatuto -> regreso .)
    REF             reduce using rule 54 (estatuto -> regreso .)
    RREF            reduce using rule 54 (estatuto -> regreso .)
    EULER           reduce using rule 54 (estatuto -> regreso .)
    DO              reduce using rule 54 (estatuto -> regreso .)
    READ            reduce using rule 54 (estatuto -> regreso .)
    RETURN          reduce using rule 54 (estatuto -> regreso .)
    CBRACKET        reduce using rule 54 (estatuto -> regreso .)


state 61

    (60) asign -> ID . EQUALS expresion SCOLON
    (61) asign -> ID . EQUALS ID SCOLON
    (62) asign -> ID . EQUALS ID asign2 SCOLON
    (63) asign -> ID . asign2 EQUALS ID SCOLON
    (64) asign -> ID . asign2 EQUALS expresion SCOLON
    (65) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (66) asign -> ID . EQUALS funccall afcn1
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

    EQUALS          shift and go to state 103
    OPAREN          shift and go to state 105
    LCOR            shift and go to state 87

    asign2                         shift and go to state 104

state 62

    (88) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 106


state 63

    (76) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 107


state 64

    (99) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (100) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 108


state 65

    (97) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 109


state 66

    (98) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 110


state 67

    (130) metodos -> MEAN . fe1 OPAREN arrfun CPAREN SCOLON
    (144) fe1 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    fe1                            shift and go to state 111
    empty                          shift and go to state 112

state 68

    (131) metodos -> MEDIAN . fe2 OPAREN arrfun CPAREN SCOLON
    (145) fe2 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    fe2                            shift and go to state 113
    empty                          shift and go to state 114

state 69

    (132) metodos -> MODE . fe3 OPAREN arrfun CPAREN SCOLON
    (146) fe3 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    fe3                            shift and go to state 115
    empty                          shift and go to state 116

state 70

    (133) metodos -> STDV . fe4 OPAREN arrfun CPAREN SCOLON
    (147) fe4 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    fe4                            shift and go to state 117
    empty                          shift and go to state 118

state 71

    (134) metodos -> KMEANS . fe5 OPAREN kval CPAREN SCOLON
    (148) fe5 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    fe5                            shift and go to state 119
    empty                          shift and go to state 120

state 72

    (135) metodos -> DERL . dmn1 OPAREN expfunc CPAREN SCOLON
    (157) dmn1 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    dmn1                           shift and go to state 121
    empty                          shift and go to state 122

state 73

    (136) metodos -> DBERN . dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (158) dbrn1 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    dbrn1                          shift and go to state 123
    empty                          shift and go to state 124

state 74

    (137) metodos -> DPOI . dp1 OPAREN expfunc2 CPAREN SCOLON
    (159) dp1 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    dp1                            shift and go to state 125
    empty                          shift and go to state 126

state 75

    (138) metodos -> TRANSPOSE . tp1 OPAREN mmmfunc CPAREN SCOLON
    (160) tp1 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    tp1                            shift and go to state 127
    empty                          shift and go to state 128

state 76

    (139) metodos -> INVERSE . tp2 OPAREN mmmfunc CPAREN SCOLON
    (161) tp2 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    tp2                            shift and go to state 129
    empty                          shift and go to state 130

state 77

    (140) metodos -> ROTATE . tp3 OPAREN mmmfunc CPAREN SCOLON
    (162) tp3 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    tp3                            shift and go to state 131
    empty                          shift and go to state 132

state 78

    (141) metodos -> REF . tp4 OPAREN mmmfunc CPAREN SCOLON
    (163) tp4 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    tp4                            shift and go to state 133
    empty                          shift and go to state 134

state 79

    (142) metodos -> RREF . tp5 OPAREN mmmfunc CPAREN SCOLON
    (164) tp5 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    tp5                            shift and go to state 135
    empty                          shift and go to state 136

state 80

    (143) metodos -> EULER . tp6 OPAREN CPAREN SCOLON
    (165) tp6 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    tp6                            shift and go to state 137
    empty                          shift and go to state 138

state 81

    (122) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (123) wn1 -> . empty
    (178) empty -> .

    OBRACKET        reduce using rule 178 (empty -> .)

    wn1                            shift and go to state 139
    empty                          shift and go to state 140

state 82

    (128) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 141


state 83

    (55) regreso -> RETURN . OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> RETURN . OPAREN expresion regnum2 CPAREN SCOLON

    OPAREN          shift and go to state 142


state 84

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (178) empty -> .

    OPAREN          reduce using rule 178 (empty -> .)

    mn1                            shift and go to state 143
    empty                          shift and go to state 144

state 85

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (178) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 178 (empty -> .)
    OBRACKET        reduce using rule 178 (empty -> .)
    CPAREN          reduce using rule 178 (empty -> .)

    lugstat2                       shift and go to state 145
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 86

    (118) varcte -> ID asign2 .

    RCOR            reduce using rule 118 (varcte -> ID asign2 .)
    MULT            reduce using rule 118 (varcte -> ID asign2 .)
    DIV             reduce using rule 118 (varcte -> ID asign2 .)
    PLUS            reduce using rule 118 (varcte -> ID asign2 .)
    MINUS           reduce using rule 118 (varcte -> ID asign2 .)
    RELOP           reduce using rule 118 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 118 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 118 (varcte -> ID asign2 .)
    COMMA           reduce using rule 118 (varcte -> ID asign2 .)
    ID              reduce using rule 118 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 118 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 118 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 118 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 118 (varcte -> ID asign2 .)


state 87

    (67) asign2 -> LCOR . expresion RCOR LCOR varcte RCOR
    (68) asign2 -> LCOR . expresion RCOR LCOR expresion RCOR
    (69) asign2 -> LCOR . varcte RCOR LCOR expresion RCOR
    (70) asign2 -> LCOR . varcte RCOR LCOR varcte RCOR
    (71) asign2 -> LCOR . expresion RCOR
    (72) asign2 -> LCOR . varcte RCOR
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 88

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 147
    LCOR            shift and go to state 146


state 89

    (67) asign2 -> LCOR expresion RCOR . LCOR varcte RCOR
    (68) asign2 -> LCOR expresion RCOR . LCOR expresion RCOR
    (71) asign2 -> LCOR expresion RCOR .

    LCOR            shift and go to state 148
    COLON           reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    MULT            reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    DIV             reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    ID              reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 71 (asign2 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 71 (asign2 -> LCOR expresion RCOR .)


state 90

    (108) expresion -> expresion RELOP . exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 149
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 91

    (69) asign2 -> LCOR varcte RCOR . LCOR expresion RCOR
    (70) asign2 -> LCOR varcte RCOR . LCOR varcte RCOR
    (72) asign2 -> LCOR varcte RCOR .

    LCOR            shift and go to state 150
    COLON           reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    MULT            reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    DIV             reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    ID              reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 72 (asign2 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 72 (asign2 -> LCOR varcte RCOR .)


state 92

    (110) exp -> termino PLUS . exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 151
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 93

    (111) exp -> termino MINUS . exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 152
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 94

    (113) termino -> factor MULT . termino
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 153
    varcte                         shift and go to state 97

state 95

    (114) termino -> factor DIV . termino
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 154
    varcte                         shift and go to state 97

state 96

    (115) factor -> OPAREN expresion . CPAREN
    (108) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 155
    RELOP           shift and go to state 90


state 97

    (116) factor -> varcte .

    MULT            reduce using rule 116 (factor -> varcte .)
    DIV             reduce using rule 116 (factor -> varcte .)
    PLUS            reduce using rule 116 (factor -> varcte .)
    MINUS           reduce using rule 116 (factor -> varcte .)
    CPAREN          reduce using rule 116 (factor -> varcte .)
    RELOP           reduce using rule 116 (factor -> varcte .)
    RCOR            reduce using rule 116 (factor -> varcte .)
    SCOLON          reduce using rule 116 (factor -> varcte .)
    COMMA           reduce using rule 116 (factor -> varcte .)
    ID              reduce using rule 116 (factor -> varcte .)
    OPAREN          reduce using rule 116 (factor -> varcte .)
    NUMERIC         reduce using rule 116 (factor -> varcte .)
    NUMBER          reduce using rule 116 (factor -> varcte .)
    LOGICAL         reduce using rule 116 (factor -> varcte .)


state 98

    (120) varcte -> NUMBER .

    MULT            reduce using rule 120 (varcte -> NUMBER .)
    DIV             reduce using rule 120 (varcte -> NUMBER .)
    PLUS            reduce using rule 120 (varcte -> NUMBER .)
    MINUS           reduce using rule 120 (varcte -> NUMBER .)
    CPAREN          reduce using rule 120 (varcte -> NUMBER .)
    RELOP           reduce using rule 120 (varcte -> NUMBER .)
    RCOR            reduce using rule 120 (varcte -> NUMBER .)
    SCOLON          reduce using rule 120 (varcte -> NUMBER .)
    COMMA           reduce using rule 120 (varcte -> NUMBER .)
    ID              reduce using rule 120 (varcte -> NUMBER .)
    OPAREN          reduce using rule 120 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 120 (varcte -> NUMBER .)
    NUMBER          reduce using rule 120 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 120 (varcte -> NUMBER .)


state 99

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 156


state 100

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 101

    (35) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 35 (block -> OBRACKET block2 CBRACKET .)


state 102

    (37) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 37 (block2 -> estatuto block2 .)


state 103

    (60) asign -> ID EQUALS . expresion SCOLON
    (61) asign -> ID EQUALS . ID SCOLON
    (62) asign -> ID EQUALS . ID asign2 SCOLON
    (66) asign -> ID EQUALS . funccall afcn1
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 157
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 158
    funccall                       shift and go to state 159
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 104

    (63) asign -> ID asign2 . EQUALS ID SCOLON
    (64) asign -> ID asign2 . EQUALS expresion SCOLON
    (65) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 160


state 105

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN . fcn1 ID fcn2 funccall2 CPAREN
    (26) fcn1 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    OPAREN          reduce using rule 178 (empty -> .)
    NUMERIC         reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    LOGICAL         reduce using rule 178 (empty -> .)

    fcn1                           shift and go to state 161
    empty                          shift and go to state 162

state 106

    (88) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 163
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 107

    (76) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (78) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (79) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 164
    STRING          shift and go to state 166
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 165
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 108

    (99) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (100) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (104) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (105) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (106) xyfunc -> . empty
    (101) plot2 -> . LCOR varcte COMMA varcte RCOR
    (102) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (103) plot2 -> . empty
    (178) empty -> .

    FX              shift and go to state 169
    FY              shift and go to state 170
    LCOR            shift and go to state 172
    CPAREN          reduce using rule 178 (empty -> .)

    xyfunc                         shift and go to state 167
    plot2                          shift and go to state 168
    empty                          shift and go to state 171

state 109

    (97) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 173


state 110

    (98) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 174


state 111

    (130) metodos -> MEAN fe1 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 175


state 112

    (144) fe1 -> empty .

    OPAREN          reduce using rule 144 (fe1 -> empty .)


state 113

    (131) metodos -> MEDIAN fe2 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 176


state 114

    (145) fe2 -> empty .

    OPAREN          reduce using rule 145 (fe2 -> empty .)


state 115

    (132) metodos -> MODE fe3 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 177


state 116

    (146) fe3 -> empty .

    OPAREN          reduce using rule 146 (fe3 -> empty .)


state 117

    (133) metodos -> STDV fe4 . OPAREN arrfun CPAREN SCOLON

    OPAREN          shift and go to state 178


state 118

    (147) fe4 -> empty .

    OPAREN          reduce using rule 147 (fe4 -> empty .)


state 119

    (134) metodos -> KMEANS fe5 . OPAREN kval CPAREN SCOLON

    OPAREN          shift and go to state 179


state 120

    (148) fe5 -> empty .

    OPAREN          reduce using rule 148 (fe5 -> empty .)


state 121

    (135) metodos -> DERL dmn1 . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 180


state 122

    (157) dmn1 -> empty .

    OPAREN          reduce using rule 157 (dmn1 -> empty .)


state 123

    (136) metodos -> DBERN dbrn1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 181


state 124

    (158) dbrn1 -> empty .

    OPAREN          reduce using rule 158 (dbrn1 -> empty .)


state 125

    (137) metodos -> DPOI dp1 . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 182


state 126

    (159) dp1 -> empty .

    OPAREN          reduce using rule 159 (dp1 -> empty .)


state 127

    (138) metodos -> TRANSPOSE tp1 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 183


state 128

    (160) tp1 -> empty .

    OPAREN          reduce using rule 160 (tp1 -> empty .)


state 129

    (139) metodos -> INVERSE tp2 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 184


state 130

    (161) tp2 -> empty .

    OPAREN          reduce using rule 161 (tp2 -> empty .)


state 131

    (140) metodos -> ROTATE tp3 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 185


state 132

    (162) tp3 -> empty .

    OPAREN          reduce using rule 162 (tp3 -> empty .)


state 133

    (141) metodos -> REF tp4 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 186


state 134

    (163) tp4 -> empty .

    OPAREN          reduce using rule 163 (tp4 -> empty .)


state 135

    (142) metodos -> RREF tp5 . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 187


state 136

    (164) tp5 -> empty .

    OPAREN          reduce using rule 164 (tp5 -> empty .)


state 137

    (143) metodos -> EULER tp6 . OPAREN CPAREN SCOLON

    OPAREN          shift and go to state 188


state 138

    (165) tp6 -> empty .

    OPAREN          reduce using rule 165 (tp6 -> empty .)


state 139

    (122) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (125) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 190

    wblock                         shift and go to state 189

state 140

    (123) wn1 -> empty .

    OBRACKET        reduce using rule 123 (wn1 -> empty .)


state 141

    (128) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 191


state 142

    (55) regreso -> RETURN OPAREN . ID regnum1 CPAREN SCOLON
    (56) regreso -> RETURN OPAREN . expresion regnum2 CPAREN SCOLON
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 192
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 193
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 143

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 194


state 144

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 145

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 146

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 195


state 147

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 196

state 148

    (67) asign2 -> LCOR expresion RCOR LCOR . varcte RCOR
    (68) asign2 -> LCOR expresion RCOR LCOR . expresion RCOR
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 197
    varcte                         shift and go to state 198
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 149

    (108) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 108 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 108 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 108 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 108 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 108 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 108 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 108 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 108 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 108 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 108 (expresion -> expresion RELOP exp .)


state 150

    (69) asign2 -> LCOR varcte RCOR LCOR . expresion RCOR
    (70) asign2 -> LCOR varcte RCOR LCOR . varcte RCOR
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    varcte                         shift and go to state 199
    expresion                      shift and go to state 200
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 151

    (110) exp -> termino PLUS exp .

    RCOR            reduce using rule 110 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 110 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 110 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 110 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 110 (exp -> termino PLUS exp .)
    ID              reduce using rule 110 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 110 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 110 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 110 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 110 (exp -> termino PLUS exp .)


state 152

    (111) exp -> termino MINUS exp .

    RCOR            reduce using rule 111 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 111 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 111 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 111 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 111 (exp -> termino MINUS exp .)
    ID              reduce using rule 111 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 111 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 111 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 111 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 111 (exp -> termino MINUS exp .)


state 153

    (113) termino -> factor MULT termino .

    PLUS            reduce using rule 113 (termino -> factor MULT termino .)
    MINUS           reduce using rule 113 (termino -> factor MULT termino .)
    RCOR            reduce using rule 113 (termino -> factor MULT termino .)
    RELOP           reduce using rule 113 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 113 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 113 (termino -> factor MULT termino .)
    COMMA           reduce using rule 113 (termino -> factor MULT termino .)
    ID              reduce using rule 113 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 113 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 113 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 113 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 113 (termino -> factor MULT termino .)


state 154

    (114) termino -> factor DIV termino .

    PLUS            reduce using rule 114 (termino -> factor DIV termino .)
    MINUS           reduce using rule 114 (termino -> factor DIV termino .)
    RCOR            reduce using rule 114 (termino -> factor DIV termino .)
    RELOP           reduce using rule 114 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 114 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 114 (termino -> factor DIV termino .)
    COMMA           reduce using rule 114 (termino -> factor DIV termino .)
    ID              reduce using rule 114 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 114 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 114 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 114 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 114 (termino -> factor DIV termino .)


state 155

    (115) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 115 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 115 (factor -> OPAREN expresion CPAREN .)


state 156

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 157

    (61) asign -> ID EQUALS ID . SCOLON
    (62) asign -> ID EQUALS ID . asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 201
    OPAREN          shift and go to state 105
    MULT            reduce using rule 117 (varcte -> ID .)
    DIV             reduce using rule 117 (varcte -> ID .)
    PLUS            reduce using rule 117 (varcte -> ID .)
    MINUS           reduce using rule 117 (varcte -> ID .)
    RELOP           reduce using rule 117 (varcte -> ID .)
    LCOR            shift and go to state 87

  ! SCOLON          [ reduce using rule 117 (varcte -> ID .) ]

    asign2                         shift and go to state 202

state 158

    (60) asign -> ID EQUALS expresion . SCOLON
    (108) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 203
    RELOP           shift and go to state 90


state 159

    (66) asign -> ID EQUALS funccall . afcn1
    (59) afcn1 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    PRINT           reduce using rule 178 (empty -> .)
    PLOT            reduce using rule 178 (empty -> .)
    COUNT           reduce using rule 178 (empty -> .)
    COUNTIF         reduce using rule 178 (empty -> .)
    MEAN            reduce using rule 178 (empty -> .)
    MEDIAN          reduce using rule 178 (empty -> .)
    MODE            reduce using rule 178 (empty -> .)
    STDV            reduce using rule 178 (empty -> .)
    KMEANS          reduce using rule 178 (empty -> .)
    DERL            reduce using rule 178 (empty -> .)
    DBERN           reduce using rule 178 (empty -> .)
    DPOI            reduce using rule 178 (empty -> .)
    TRANSPOSE       reduce using rule 178 (empty -> .)
    INVERSE         reduce using rule 178 (empty -> .)
    ROTATE          reduce using rule 178 (empty -> .)
    REF             reduce using rule 178 (empty -> .)
    RREF            reduce using rule 178 (empty -> .)
    EULER           reduce using rule 178 (empty -> .)
    DO              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    CBRACKET        reduce using rule 178 (empty -> .)

    afcn1                          shift and go to state 204
    empty                          shift and go to state 205

state 160

    (63) asign -> ID asign2 EQUALS . ID SCOLON
    (64) asign -> ID asign2 EQUALS . expresion SCOLON
    (65) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 206
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 207
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 161

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN fcn1 . ID fcn2 funccall2 CPAREN
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 208
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 209
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 162

    (26) fcn1 -> empty .

    ID              reduce using rule 26 (fcn1 -> empty .)
    OPAREN          reduce using rule 26 (fcn1 -> empty .)
    NUMERIC         reduce using rule 26 (fcn1 -> empty .)
    NUMBER          reduce using rule 26 (fcn1 -> empty .)
    LOGICAL         reduce using rule 26 (fcn1 -> empty .)


state 163

    (88) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (108) expresion -> expresion . RELOP exp
    (90) cn1 -> . empty
    (178) empty -> .

    RELOP           shift and go to state 90
    CPAREN          reduce using rule 178 (empty -> .)

    cn1                            shift and go to state 210
    empty                          shift and go to state 211

state 164

    (76) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (87) en3 -> . empty
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR
    (178) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 117 (varcte -> ID .)
    MULT            reduce using rule 117 (varcte -> ID .)
    DIV             reduce using rule 117 (varcte -> ID .)
    PLUS            reduce using rule 117 (varcte -> ID .)
    MINUS           reduce using rule 117 (varcte -> ID .)
    RELOP           reduce using rule 117 (varcte -> ID .)
    CPAREN          reduce using rule 117 (varcte -> ID .)
    LCOR            shift and go to state 87
    COMMA           reduce using rule 178 (empty -> .)

  ! CPAREN          [ reduce using rule 178 (empty -> .) ]

    en3                            shift and go to state 212
    asign2                         shift and go to state 86
    empty                          shift and go to state 213

state 165

    (77) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (108) expresion -> expresion . RELOP exp
    (85) en1 -> . empty
    (178) empty -> .

    RELOP           shift and go to state 90
    CPAREN          reduce using rule 178 (empty -> .)

    en1                            shift and go to state 214
    empty                          shift and go to state 215

state 166

    (78) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (79) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (80) escrt2 -> . COMMA escrt3
    (81) escrt2 -> . empty
    (178) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 216
    COMMA           shift and go to state 218

  ! CPAREN          [ reduce using rule 178 (empty -> .) ]

    escrt2                         shift and go to state 217
    empty                          shift and go to state 219

state 167

    (99) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 220


state 168

    (100) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 221


state 169

    (104) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 222


state 170

    (105) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 223


state 171

    (106) xyfunc -> empty .
    (103) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 103 (plot2 -> empty .)
    CPAREN          reduce using rule 103 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 106 (xyfunc -> empty .) ]


state 172

    (101) plot2 -> LCOR . varcte COMMA varcte RCOR
    (102) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 224

state 173

    (97) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 225


state 174

    (98) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 226


state 175

    (130) metodos -> MEAN fe1 OPAREN . arrfun CPAREN SCOLON
    (150) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 228

    arrfun                         shift and go to state 227

state 176

    (131) metodos -> MEDIAN fe2 OPAREN . arrfun CPAREN SCOLON
    (150) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 228

    arrfun                         shift and go to state 229

state 177

    (132) metodos -> MODE fe3 OPAREN . arrfun CPAREN SCOLON
    (150) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 228

    arrfun                         shift and go to state 230

state 178

    (133) metodos -> STDV fe4 OPAREN . arrfun CPAREN SCOLON
    (150) arrfun -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 228

    arrfun                         shift and go to state 231

state 179

    (134) metodos -> KMEANS fe5 OPAREN . kval CPAREN SCOLON
    (149) kval -> . varcte COMMA arrfun2 COMMA arrfun3
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    kval                           shift and go to state 232
    varcte                         shift and go to state 233

state 180

    (135) metodos -> DERL dmn1 OPAREN . expfunc CPAREN SCOLON
    (166) expfunc -> . ID COMMA ID COMMA ID
    (167) expfunc -> . varcte COMMA varcte COMMA varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 235
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 234
    varcte                         shift and go to state 236

state 181

    (136) metodos -> DBERN dbrn1 OPAREN . expfunc2 CPAREN SCOLON
    (168) expfunc2 -> . ID COMMA ID
    (169) expfunc2 -> . varcte COMMA varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 238
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 237
    varcte                         shift and go to state 239

state 182

    (137) metodos -> DPOI dp1 OPAREN . expfunc2 CPAREN SCOLON
    (168) expfunc2 -> . ID COMMA ID
    (169) expfunc2 -> . varcte COMMA varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 238
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 240
    varcte                         shift and go to state 239

state 183

    (138) metodos -> TRANSPOSE tp1 OPAREN . mmmfunc CPAREN SCOLON
    (170) mmmfunc -> . LCOR RCOR
    (171) mmmfunc -> . LCOR mmmarray RCOR
    (172) mmmfunc -> . ID

    LCOR            shift and go to state 242
    ID              shift and go to state 243

    mmmfunc                        shift and go to state 241

state 184

    (139) metodos -> INVERSE tp2 OPAREN . mmmfunc CPAREN SCOLON
    (170) mmmfunc -> . LCOR RCOR
    (171) mmmfunc -> . LCOR mmmarray RCOR
    (172) mmmfunc -> . ID

    LCOR            shift and go to state 242
    ID              shift and go to state 243

    mmmfunc                        shift and go to state 244

state 185

    (140) metodos -> ROTATE tp3 OPAREN . mmmfunc CPAREN SCOLON
    (170) mmmfunc -> . LCOR RCOR
    (171) mmmfunc -> . LCOR mmmarray RCOR
    (172) mmmfunc -> . ID

    LCOR            shift and go to state 242
    ID              shift and go to state 243

    mmmfunc                        shift and go to state 245

state 186

    (141) metodos -> REF tp4 OPAREN . mmmfunc CPAREN SCOLON
    (170) mmmfunc -> . LCOR RCOR
    (171) mmmfunc -> . LCOR mmmarray RCOR
    (172) mmmfunc -> . ID

    LCOR            shift and go to state 242
    ID              shift and go to state 243

    mmmfunc                        shift and go to state 246

state 187

    (142) metodos -> RREF tp5 OPAREN . mmmfunc CPAREN SCOLON
    (170) mmmfunc -> . LCOR RCOR
    (171) mmmfunc -> . LCOR mmmarray RCOR
    (172) mmmfunc -> . ID

    LCOR            shift and go to state 242
    ID              shift and go to state 243

    mmmfunc                        shift and go to state 247

state 188

    (143) metodos -> EULER tp6 OPAREN . CPAREN SCOLON

    CPAREN          shift and go to state 248


state 189

    (122) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 249


state 190

    (125) wblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (54) estatuto -> . regreso
    (178) empty -> .
    (60) asign -> . ID EQUALS expresion SCOLON
    (61) asign -> . ID EQUALS ID SCOLON
    (62) asign -> . ID EQUALS ID asign2 SCOLON
    (63) asign -> . ID asign2 EQUALS ID SCOLON
    (64) asign -> . ID asign2 EQUALS expresion SCOLON
    (65) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (66) asign -> . ID EQUALS funccall afcn1
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (76) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (99) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (100) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (97) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (98) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (130) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (131) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (135) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (136) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (137) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (122) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (128) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (55) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 178 (empty -> .)
    ID              shift and go to state 61
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    PLOT            shift and go to state 64
    COUNT           shift and go to state 65
    COUNTIF         shift and go to state 66
    MEAN            shift and go to state 67
    MEDIAN          shift and go to state 68
    MODE            shift and go to state 69
    STDV            shift and go to state 70
    KMEANS          shift and go to state 71
    DERL            shift and go to state 72
    DBERN           shift and go to state 73
    DPOI            shift and go to state 74
    TRANSPOSE       shift and go to state 75
    INVERSE         shift and go to state 76
    ROTATE          shift and go to state 77
    REF             shift and go to state 78
    RREF            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82
    RETURN          shift and go to state 83

    block2                         shift and go to state 250
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59
    regreso                        shift and go to state 60

state 191

    (128) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (129) rn1 -> . empty
    (178) empty -> .

    CPAREN          reduce using rule 178 (empty -> .)

    rn1                            shift and go to state 251
    empty                          shift and go to state 252

state 192

    (55) regreso -> RETURN OPAREN ID . regnum1 CPAREN SCOLON
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (57) regnum1 -> .
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

  ! reduce/reduce conflict for CPAREN resolved using rule 57 (regnum1 -> .)
    MULT            reduce using rule 117 (varcte -> ID .)
    DIV             reduce using rule 117 (varcte -> ID .)
    PLUS            reduce using rule 117 (varcte -> ID .)
    MINUS           reduce using rule 117 (varcte -> ID .)
    RELOP           reduce using rule 117 (varcte -> ID .)
    CPAREN          reduce using rule 57 (regnum1 -> .)
    LCOR            shift and go to state 87

  ! CPAREN          [ reduce using rule 117 (varcte -> ID .) ]

    regnum1                        shift and go to state 253
    asign2                         shift and go to state 86

state 193

    (56) regreso -> RETURN OPAREN expresion . regnum2 CPAREN SCOLON
    (108) expresion -> expresion . RELOP exp
    (58) regnum2 -> .

    RELOP           shift and go to state 90
    CPAREN          reduce using rule 58 (regnum2 -> .)

    regnum2                        shift and go to state 254

state 194

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (178) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 178 (empty -> .)

    modules2                       shift and go to state 255
    vars                           shift and go to state 256
    empty                          shift and go to state 257

state 195

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 258


state 196

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 259


state 197

    (68) asign2 -> LCOR expresion RCOR LCOR expresion . RCOR
    (108) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 260
    RELOP           shift and go to state 90


state 198

    (67) asign2 -> LCOR expresion RCOR LCOR varcte . RCOR
    (116) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 261
    MULT            reduce using rule 116 (factor -> varcte .)
    DIV             reduce using rule 116 (factor -> varcte .)
    PLUS            reduce using rule 116 (factor -> varcte .)
    MINUS           reduce using rule 116 (factor -> varcte .)
    RELOP           reduce using rule 116 (factor -> varcte .)

  ! RCOR            [ reduce using rule 116 (factor -> varcte .) ]


state 199

    (70) asign2 -> LCOR varcte RCOR LCOR varcte . RCOR
    (116) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 262
    MULT            reduce using rule 116 (factor -> varcte .)
    DIV             reduce using rule 116 (factor -> varcte .)
    PLUS            reduce using rule 116 (factor -> varcte .)
    MINUS           reduce using rule 116 (factor -> varcte .)
    RELOP           reduce using rule 116 (factor -> varcte .)

  ! RCOR            [ reduce using rule 116 (factor -> varcte .) ]


state 200

    (69) asign2 -> LCOR varcte RCOR LCOR expresion . RCOR
    (108) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 263
    RELOP           shift and go to state 90


state 201

    (61) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    EULER           reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    RETURN          reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 61 (asign -> ID EQUALS ID SCOLON .)


state 202

    (62) asign -> ID EQUALS ID asign2 . SCOLON
    (118) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 264
    MULT            reduce using rule 118 (varcte -> ID asign2 .)
    DIV             reduce using rule 118 (varcte -> ID asign2 .)
    PLUS            reduce using rule 118 (varcte -> ID asign2 .)
    MINUS           reduce using rule 118 (varcte -> ID asign2 .)
    RELOP           reduce using rule 118 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 118 (varcte -> ID asign2 .) ]


state 203

    (60) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    EULER           reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    RETURN          reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 60 (asign -> ID EQUALS expresion SCOLON .)


state 204

    (66) asign -> ID EQUALS funccall afcn1 .

    ID              reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    IF              reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    PRINT           reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    PLOT            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    COUNT           reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    COUNTIF         reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    MEAN            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    MEDIAN          reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    MODE            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    STDV            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    KMEANS          reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    DERL            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    DBERN           reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    DPOI            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    TRANSPOSE       reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    INVERSE         reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    ROTATE          reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    REF             reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    RREF            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    EULER           reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    DO              reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    READ            reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    RETURN          reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)
    CBRACKET        reduce using rule 66 (asign -> ID EQUALS funccall afcn1 .)


state 205

    (59) afcn1 -> empty .

    ID              reduce using rule 59 (afcn1 -> empty .)
    IF              reduce using rule 59 (afcn1 -> empty .)
    PRINT           reduce using rule 59 (afcn1 -> empty .)
    PLOT            reduce using rule 59 (afcn1 -> empty .)
    COUNT           reduce using rule 59 (afcn1 -> empty .)
    COUNTIF         reduce using rule 59 (afcn1 -> empty .)
    MEAN            reduce using rule 59 (afcn1 -> empty .)
    MEDIAN          reduce using rule 59 (afcn1 -> empty .)
    MODE            reduce using rule 59 (afcn1 -> empty .)
    STDV            reduce using rule 59 (afcn1 -> empty .)
    KMEANS          reduce using rule 59 (afcn1 -> empty .)
    DERL            reduce using rule 59 (afcn1 -> empty .)
    DBERN           reduce using rule 59 (afcn1 -> empty .)
    DPOI            reduce using rule 59 (afcn1 -> empty .)
    TRANSPOSE       reduce using rule 59 (afcn1 -> empty .)
    INVERSE         reduce using rule 59 (afcn1 -> empty .)
    ROTATE          reduce using rule 59 (afcn1 -> empty .)
    REF             reduce using rule 59 (afcn1 -> empty .)
    RREF            reduce using rule 59 (afcn1 -> empty .)
    EULER           reduce using rule 59 (afcn1 -> empty .)
    DO              reduce using rule 59 (afcn1 -> empty .)
    READ            reduce using rule 59 (afcn1 -> empty .)
    RETURN          reduce using rule 59 (afcn1 -> empty .)
    CBRACKET        reduce using rule 59 (afcn1 -> empty .)


state 206

    (63) asign -> ID asign2 EQUALS ID . SCOLON
    (65) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 266
    MULT            reduce using rule 117 (varcte -> ID .)
    DIV             reduce using rule 117 (varcte -> ID .)
    PLUS            reduce using rule 117 (varcte -> ID .)
    MINUS           reduce using rule 117 (varcte -> ID .)
    RELOP           reduce using rule 117 (varcte -> ID .)
    LCOR            shift and go to state 87

  ! SCOLON          [ reduce using rule 117 (varcte -> ID .) ]

    asign2                         shift and go to state 265

state 207

    (64) asign -> ID asign2 EQUALS expresion . SCOLON
    (108) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 267
    RELOP           shift and go to state 90


state 208

    (25) funccall -> ID OPAREN fcn1 ID . fcn2 funccall2 CPAREN
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (27) fcn2 -> . empty
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR
    (178) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 117 (varcte -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 117 (varcte -> ID .)
  ! reduce/reduce conflict for CPAREN resolved using rule 117 (varcte -> ID .)
    MULT            reduce using rule 117 (varcte -> ID .)
    DIV             reduce using rule 117 (varcte -> ID .)
    PLUS            reduce using rule 117 (varcte -> ID .)
    MINUS           reduce using rule 117 (varcte -> ID .)
    RELOP           reduce using rule 117 (varcte -> ID .)
    COMMA           reduce using rule 117 (varcte -> ID .)
    ID              reduce using rule 117 (varcte -> ID .)
    CPAREN          reduce using rule 117 (varcte -> ID .)
    LCOR            shift and go to state 87

  ! COMMA           [ reduce using rule 178 (empty -> .) ]
  ! ID              [ reduce using rule 178 (empty -> .) ]
  ! CPAREN          [ reduce using rule 178 (empty -> .) ]

    fcn2                           shift and go to state 268
    asign2                         shift and go to state 86
    empty                          shift and go to state 269

state 209

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (108) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (178) empty -> .

    RELOP           shift and go to state 90
    COMMA           reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CPAREN          reduce using rule 178 (empty -> .)

    fcn2                           shift and go to state 270
    empty                          shift and go to state 269

state 210

    (88) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (89) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 271


state 211

    (90) cn1 -> empty .

    CPAREN          reduce using rule 90 (cn1 -> empty .)


state 212

    (76) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (80) escrt2 -> . COMMA escrt3
    (81) escrt2 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 218
    CPAREN          reduce using rule 178 (empty -> .)

    escrt2                         shift and go to state 272
    empty                          shift and go to state 219

state 213

    (87) en3 -> empty .

    COMMA           reduce using rule 87 (en3 -> empty .)
    CPAREN          reduce using rule 87 (en3 -> empty .)


state 214

    (77) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 273


state 215

    (85) en1 -> empty .

    CPAREN          reduce using rule 85 (en1 -> empty .)


state 216

    (78) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (86) en2 -> . empty
    (178) empty -> .

    SCOLON          reduce using rule 178 (empty -> .)

    en2                            shift and go to state 274
    empty                          shift and go to state 275

state 217

    (79) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 276


state 218

    (80) escrt2 -> COMMA . escrt3
    (82) escrt3 -> . ID escrt2
    (83) escrt3 -> . ID
    (84) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 278
    STRING          shift and go to state 279

    escrt3                         shift and go to state 277

state 219

    (81) escrt2 -> empty .

    CPAREN          reduce using rule 81 (escrt2 -> empty .)
    COMMA           reduce using rule 81 (escrt2 -> empty .)


state 220

    (99) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 280


state 221

    (100) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 281


state 222

    (104) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 282
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 223

    (105) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 283
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 224

    (101) plot2 -> LCOR varcte . COMMA varcte RCOR
    (102) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 284


state 225

    (97) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 285

state 226

    (98) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 286

state 227

    (130) metodos -> MEAN fe1 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 287


state 228

    (150) arrfun -> LCOR . datasetarr RCOR
    (153) datasetarr -> . varcte
    (154) datasetarr -> . varcte COMMA datasetarr
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    datasetarr                     shift and go to state 288
    varcte                         shift and go to state 289

state 229

    (131) metodos -> MEDIAN fe2 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 290


state 230

    (132) metodos -> MODE fe3 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 291


state 231

    (133) metodos -> STDV fe4 OPAREN arrfun . CPAREN SCOLON

    CPAREN          shift and go to state 292


state 232

    (134) metodos -> KMEANS fe5 OPAREN kval . CPAREN SCOLON

    CPAREN          shift and go to state 293


state 233

    (149) kval -> varcte . COMMA arrfun2 COMMA arrfun3

    COMMA           shift and go to state 294


state 234

    (135) metodos -> DERL dmn1 OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 295


state 235

    (166) expfunc -> ID . COMMA ID COMMA ID
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 296
    LCOR            shift and go to state 87

  ! COMMA           [ reduce using rule 117 (varcte -> ID .) ]

    asign2                         shift and go to state 86

state 236

    (167) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 297


state 237

    (136) metodos -> DBERN dbrn1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 298


state 238

    (168) expfunc2 -> ID . COMMA ID
    (117) varcte -> ID .
    (118) varcte -> ID . asign2
    (67) asign2 -> . LCOR expresion RCOR LCOR varcte RCOR
    (68) asign2 -> . LCOR expresion RCOR LCOR expresion RCOR
    (69) asign2 -> . LCOR varcte RCOR LCOR expresion RCOR
    (70) asign2 -> . LCOR varcte RCOR LCOR varcte RCOR
    (71) asign2 -> . LCOR expresion RCOR
    (72) asign2 -> . LCOR varcte RCOR

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 299
    LCOR            shift and go to state 87

  ! COMMA           [ reduce using rule 117 (varcte -> ID .) ]

    asign2                         shift and go to state 86

state 239

    (169) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 300


state 240

    (137) metodos -> DPOI dp1 OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 301


state 241

    (138) metodos -> TRANSPOSE tp1 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 302


state 242

    (170) mmmfunc -> LCOR . RCOR
    (171) mmmfunc -> LCOR . mmmarray RCOR
    (173) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (174) mmmarray -> . libero LCOR datasetarr4 RCOR
    (175) libero -> . empty
    (178) empty -> .

    RCOR            shift and go to state 303
    LCOR            reduce using rule 178 (empty -> .)

    mmmarray                       shift and go to state 304
    libero                         shift and go to state 305
    empty                          shift and go to state 306

state 243

    (172) mmmfunc -> ID .

    CPAREN          reduce using rule 172 (mmmfunc -> ID .)


state 244

    (139) metodos -> INVERSE tp2 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 307


state 245

    (140) metodos -> ROTATE tp3 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 308


state 246

    (141) metodos -> REF tp4 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 309


state 247

    (142) metodos -> RREF tp5 OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 310


state 248

    (143) metodos -> EULER tp6 OPAREN CPAREN . SCOLON

    SCOLON          shift and go to state 311


state 249

    (122) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 312


state 250

    (125) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 313


state 251

    (128) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 314


state 252

    (129) rn1 -> empty .

    CPAREN          reduce using rule 129 (rn1 -> empty .)


state 253

    (55) regreso -> RETURN OPAREN ID regnum1 . CPAREN SCOLON

    CPAREN          shift and go to state 315


state 254

    (56) regreso -> RETURN OPAREN expresion regnum2 . CPAREN SCOLON

    CPAREN          shift and go to state 316


state 255

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 317

state 256

    (32) modules2 -> vars .

    CPAREN          reduce using rule 32 (modules2 -> vars .)
    OBRACKET        reduce using rule 32 (modules2 -> vars .)


state 257

    (33) modules2 -> empty .

    CPAREN          reduce using rule 33 (modules2 -> empty .)
    OBRACKET        reduce using rule 33 (modules2 -> empty .)


state 258

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 318


state 259

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (178) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 178 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 178 (empty -> .) ]
  ! CPAREN          [ reduce using rule 178 (empty -> .) ]

    lugstat2                       shift and go to state 319
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 260

    (68) asign2 -> LCOR expresion RCOR LCOR expresion RCOR .

    COLON           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    ID              reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 68 (asign2 -> LCOR expresion RCOR LCOR expresion RCOR .)


state 261

    (67) asign2 -> LCOR expresion RCOR LCOR varcte RCOR .

    COLON           reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    ID              reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 67 (asign2 -> LCOR expresion RCOR LCOR varcte RCOR .)


state 262

    (70) asign2 -> LCOR varcte RCOR LCOR varcte RCOR .

    COLON           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    COMMA           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RCOR            reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MULT            reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    DIV             reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    PLUS            reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    MINUS           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    RELOP           reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    CPAREN          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    SCOLON          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    ID              reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    OPAREN          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMERIC         reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    NUMBER          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    LOGICAL         reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)
    EQUALS          reduce using rule 70 (asign2 -> LCOR varcte RCOR LCOR varcte RCOR .)


state 263

    (69) asign2 -> LCOR varcte RCOR LCOR expresion RCOR .

    COLON           reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    COMMA           reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RCOR            reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MULT            reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    DIV             reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    PLUS            reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    MINUS           reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    RELOP           reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    CPAREN          reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    SCOLON          reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    ID              reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    OPAREN          reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMERIC         reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    NUMBER          reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    LOGICAL         reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)
    EQUALS          reduce using rule 69 (asign2 -> LCOR varcte RCOR LCOR expresion RCOR .)


state 264

    (62) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    RETURN          reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 62 (asign -> ID EQUALS ID asign2 SCOLON .)


state 265

    (65) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (118) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 320
    MULT            reduce using rule 118 (varcte -> ID asign2 .)
    DIV             reduce using rule 118 (varcte -> ID asign2 .)
    PLUS            reduce using rule 118 (varcte -> ID asign2 .)
    MINUS           reduce using rule 118 (varcte -> ID asign2 .)
    RELOP           reduce using rule 118 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 118 (varcte -> ID asign2 .) ]


state 266

    (63) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    EULER           reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    RETURN          reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 63 (asign -> ID asign2 EQUALS ID SCOLON .)


state 267

    (64) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    EULER           reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RETURN          reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 64 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 268

    (25) funccall -> ID OPAREN fcn1 ID fcn2 . funccall2 CPAREN
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 323
    ID              shift and go to state 321
    CPAREN          reduce using rule 178 (empty -> .)

    funccall2                      shift and go to state 322
    empty                          shift and go to state 324

state 269

    (27) fcn2 -> empty .

    COMMA           reduce using rule 27 (fcn2 -> empty .)
    ID              reduce using rule 27 (fcn2 -> empty .)
    CPAREN          reduce using rule 27 (fcn2 -> empty .)


state 270

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 323
    ID              shift and go to state 321
    CPAREN          reduce using rule 178 (empty -> .)

    funccall2                      shift and go to state 325
    empty                          shift and go to state 324

state 271

    (88) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (89) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (93) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 327

    ifblock                        shift and go to state 326

state 272

    (76) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 328


state 273

    (77) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 329


state 274

    (78) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 330


state 275

    (86) en2 -> empty .

    SCOLON          reduce using rule 86 (en2 -> empty .)


state 276

    (79) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (86) en2 -> . empty
    (178) empty -> .

    SCOLON          reduce using rule 178 (empty -> .)

    en2                            shift and go to state 331
    empty                          shift and go to state 275

state 277

    (80) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 80 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 80 (escrt2 -> COMMA escrt3 .)


state 278

    (82) escrt3 -> ID . escrt2
    (83) escrt3 -> ID .
    (80) escrt2 -> . COMMA escrt3
    (81) escrt2 -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 83 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 83 (escrt3 -> ID .)
    COMMA           shift and go to state 218

  ! COMMA           [ reduce using rule 83 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 178 (empty -> .) ]
  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    escrt2                         shift and go to state 332
    empty                          shift and go to state 219

state 279

    (84) escrt3 -> STRING . escrt2 escrt2
    (80) escrt2 -> . COMMA escrt3
    (81) escrt2 -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 218
    CPAREN          reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    escrt2                         shift and go to state 333
    empty                          shift and go to state 219

state 280

    (99) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    EULER           reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RETURN          reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 99 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 281

    (100) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    EULER           reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RETURN          reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 100 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 282

    (104) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 334


state 283

    (105) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 335


state 284

    (101) plot2 -> LCOR varcte COMMA . varcte RCOR
    (102) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 336

state 285

    (97) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 337


state 286

    (98) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 338


state 287

    (130) metodos -> MEAN fe1 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 339


state 288

    (150) arrfun -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 340


state 289

    (153) datasetarr -> varcte .
    (154) datasetarr -> varcte . COMMA datasetarr

    RCOR            reduce using rule 153 (datasetarr -> varcte .)
    COMMA           shift and go to state 341


state 290

    (131) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 342


state 291

    (132) metodos -> MODE fe3 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 343


state 292

    (133) metodos -> STDV fe4 OPAREN arrfun CPAREN . SCOLON

    SCOLON          shift and go to state 344


state 293

    (134) metodos -> KMEANS fe5 OPAREN kval CPAREN . SCOLON

    SCOLON          shift and go to state 345


state 294

    (149) kval -> varcte COMMA . arrfun2 COMMA arrfun3
    (151) arrfun2 -> . LCOR datasetarr RCOR

    LCOR            shift and go to state 347

    arrfun2                        shift and go to state 346

state 295

    (135) metodos -> DERL dmn1 OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 348


state 296

    (166) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 349


state 297

    (167) expfunc -> varcte COMMA . varcte COMMA varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 350

state 298

    (136) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 351


state 299

    (168) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 352


state 300

    (169) expfunc2 -> varcte COMMA . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 353

state 301

    (137) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 354


state 302

    (138) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 355


state 303

    (170) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 170 (mmmfunc -> LCOR RCOR .)


state 304

    (171) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 356


state 305

    (173) mmmarray -> libero . LCOR datasetarr4 RCOR COMMA mmmarray
    (174) mmmarray -> libero . LCOR datasetarr4 RCOR

    LCOR            shift and go to state 357


state 306

    (175) libero -> empty .

    LCOR            reduce using rule 175 (libero -> empty .)


state 307

    (139) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 358


state 308

    (140) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 359


state 309

    (141) metodos -> REF tp4 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 360


state 310

    (142) metodos -> RREF tp5 OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 361


state 311

    (143) metodos -> EULER tp6 OPAREN CPAREN SCOLON .

    ID              reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    IF              reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    PRINT           reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    PLOT            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    COUNT           reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    COUNTIF         reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MEAN            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MEDIAN          reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    MODE            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    STDV            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    KMEANS          reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DERL            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DBERN           reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DPOI            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    INVERSE         reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    ROTATE          reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    REF             reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    RREF            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    EULER           reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    DO              reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    READ            reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    RETURN          reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)
    CBRACKET        reduce using rule 143 (metodos -> EULER tp6 OPAREN CPAREN SCOLON .)


state 312

    (122) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (126) dwhileconds -> . expresion dwhileconds
    (127) dwhileconds -> . empty
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (178) empty -> .
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    CPAREN          reduce using rule 178 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    dwhileconds                    shift and go to state 362
    expresion                      shift and go to state 363
    empty                          shift and go to state 364
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 313

    (125) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 125 (wblock -> OBRACKET block2 CBRACKET .)


state 314

    (128) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 365


state 315

    (55) regreso -> RETURN OPAREN ID regnum1 CPAREN . SCOLON

    SCOLON          shift and go to state 366


state 316

    (56) regreso -> RETURN OPAREN expresion regnum2 CPAREN . SCOLON

    SCOLON          shift and go to state 367


state 317

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 368


state 318

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 369

state 319

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 320

    (65) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RETURN          reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 65 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 321

    (30) funccall2 -> ID . fcn2 funccall2
    (27) fcn2 -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CPAREN          reduce using rule 178 (empty -> .)

    fcn2                           shift and go to state 370
    empty                          shift and go to state 269

state 322

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 . CPAREN

    CPAREN          shift and go to state 371


state 323

    (29) funccall2 -> COMMA . expresion fcn2 funccall2
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 372
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 324

    (31) funccall2 -> empty .

    CPAREN          reduce using rule 31 (funccall2 -> empty .)


state 325

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 373


state 326

    (88) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 374
    ELSE            shift and go to state 375


state 327

    (93) ifblock -> OBRACKET . ifblock2 CBRACKET
    (94) ifblock2 -> . estatuto
    (95) ifblock2 -> . estatuto ifblock2
    (96) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (54) estatuto -> . regreso
    (178) empty -> .
    (60) asign -> . ID EQUALS expresion SCOLON
    (61) asign -> . ID EQUALS ID SCOLON
    (62) asign -> . ID EQUALS ID asign2 SCOLON
    (63) asign -> . ID asign2 EQUALS ID SCOLON
    (64) asign -> . ID asign2 EQUALS expresion SCOLON
    (65) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (66) asign -> . ID EQUALS funccall afcn1
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (76) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (99) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (100) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (97) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (98) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (130) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (131) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (135) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (136) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (137) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (122) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (128) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (55) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 178 (empty -> .)
    ID              shift and go to state 61
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    PLOT            shift and go to state 64
    COUNT           shift and go to state 65
    COUNTIF         shift and go to state 66
    MEAN            shift and go to state 67
    MEDIAN          shift and go to state 68
    MODE            shift and go to state 69
    STDV            shift and go to state 70
    KMEANS          shift and go to state 71
    DERL            shift and go to state 72
    DBERN           shift and go to state 73
    DPOI            shift and go to state 74
    TRANSPOSE       shift and go to state 75
    INVERSE         shift and go to state 76
    ROTATE          shift and go to state 77
    REF             shift and go to state 78
    RREF            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82
    RETURN          shift and go to state 83

    ifblock2                       shift and go to state 376
    estatuto                       shift and go to state 377
    empty                          shift and go to state 378
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59
    regreso                        shift and go to state 60

state 328

    (76) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 379


state 329

    (77) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    EULER           reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RETURN          reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 77 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 330

    (78) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    EULER           reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RETURN          reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 78 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 331

    (79) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 380


state 332

    (82) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 82 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 82 (escrt3 -> ID escrt2 .)


state 333

    (84) escrt3 -> STRING escrt2 . escrt2
    (80) escrt2 -> . COMMA escrt3
    (81) escrt2 -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 218
    CPAREN          reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    escrt2                         shift and go to state 381
    empty                          shift and go to state 219

state 334

    (104) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (104) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (105) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (106) xyfunc -> . empty
    (178) empty -> .

    FX              shift and go to state 169
    FY              shift and go to state 170
    CPAREN          reduce using rule 178 (empty -> .)

    xyfunc                         shift and go to state 382
    empty                          shift and go to state 383

state 335

    (105) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (104) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (105) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (106) xyfunc -> . empty
    (178) empty -> .

    FX              shift and go to state 169
    FY              shift and go to state 170
    CPAREN          reduce using rule 178 (empty -> .)

    xyfunc                         shift and go to state 384
    empty                          shift and go to state 383

state 336

    (101) plot2 -> LCOR varcte COMMA varcte . RCOR
    (102) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 385


state 337

    (97) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 386

state 338

    (98) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 387

state 339

    (130) metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 130 (metodos -> MEAN fe1 OPAREN arrfun CPAREN SCOLON .)


state 340

    (150) arrfun -> LCOR datasetarr RCOR .

    CPAREN          reduce using rule 150 (arrfun -> LCOR datasetarr RCOR .)


state 341

    (154) datasetarr -> varcte COMMA . datasetarr
    (153) datasetarr -> . varcte
    (154) datasetarr -> . varcte COMMA datasetarr
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 289
    datasetarr                     shift and go to state 388

state 342

    (131) metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 131 (metodos -> MEDIAN fe2 OPAREN arrfun CPAREN SCOLON .)


state 343

    (132) metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> MODE fe3 OPAREN arrfun CPAREN SCOLON .)


state 344

    (133) metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .

    ID              reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    IF              reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PRINT           reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    PLOT            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNT           reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    COUNTIF         reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEAN            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MEDIAN          reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    MODE            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    STDV            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    KMEANS          reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DERL            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DBERN           reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DPOI            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    INVERSE         reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    ROTATE          reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    REF             reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RREF            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    EULER           reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    DO              reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    READ            reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    RETURN          reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)
    CBRACKET        reduce using rule 133 (metodos -> STDV fe4 OPAREN arrfun CPAREN SCOLON .)


state 345

    (134) metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .

    ID              reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    IF              reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PRINT           reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    PLOT            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNT           reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    COUNTIF         reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEAN            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MEDIAN          reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    MODE            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    STDV            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    KMEANS          reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DERL            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DBERN           reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DPOI            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    INVERSE         reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    ROTATE          reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    REF             reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RREF            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    EULER           reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    DO              reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    READ            reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    RETURN          reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)
    CBRACKET        reduce using rule 134 (metodos -> KMEANS fe5 OPAREN kval CPAREN SCOLON .)


state 346

    (149) kval -> varcte COMMA arrfun2 . COMMA arrfun3

    COMMA           shift and go to state 389


state 347

    (151) arrfun2 -> LCOR . datasetarr RCOR
    (153) datasetarr -> . varcte
    (154) datasetarr -> . varcte COMMA datasetarr
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    datasetarr                     shift and go to state 390
    varcte                         shift and go to state 289

state 348

    (135) metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    RETURN          reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 135 (metodos -> DERL dmn1 OPAREN expfunc CPAREN SCOLON .)


state 349

    (166) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 391


state 350

    (167) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 392


state 351

    (136) metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    RETURN          reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 136 (metodos -> DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON .)


state 352

    (168) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 168 (expfunc2 -> ID COMMA ID .)


state 353

    (169) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 169 (expfunc2 -> varcte COMMA varcte .)


state 354

    (137) metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    RETURN          reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 137 (metodos -> DPOI dp1 OPAREN expfunc2 CPAREN SCOLON .)


state 355

    (138) metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 138 (metodos -> TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON .)


state 356

    (171) mmmfunc -> LCOR mmmarray RCOR .

    CPAREN          reduce using rule 171 (mmmfunc -> LCOR mmmarray RCOR .)


state 357

    (173) mmmarray -> libero LCOR . datasetarr4 RCOR COMMA mmmarray
    (174) mmmarray -> libero LCOR . datasetarr4 RCOR
    (176) datasetarr4 -> . varcte
    (177) datasetarr4 -> . varcte COMMA datasetarr4
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    datasetarr4                    shift and go to state 393
    varcte                         shift and go to state 394

state 358

    (139) metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 139 (metodos -> INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON .)


state 359

    (140) metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 140 (metodos -> ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON .)


state 360

    (141) metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 141 (metodos -> REF tp4 OPAREN mmmfunc CPAREN SCOLON .)


state 361

    (142) metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    RETURN          reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 142 (metodos -> RREF tp5 OPAREN mmmfunc CPAREN SCOLON .)


state 362

    (122) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 395


state 363

    (126) dwhileconds -> expresion . dwhileconds
    (108) expresion -> expresion . RELOP exp
    (126) dwhileconds -> . expresion dwhileconds
    (127) dwhileconds -> . empty
    (107) expresion -> . exp
    (108) expresion -> . expresion RELOP exp
    (178) empty -> .
    (109) exp -> . termino
    (110) exp -> . termino PLUS exp
    (111) exp -> . termino MINUS exp
    (112) termino -> . factor
    (113) termino -> . factor MULT termino
    (114) termino -> . factor DIV termino
    (115) factor -> . OPAREN expresion CPAREN
    (116) factor -> . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    RELOP           shift and go to state 90
    CPAREN          reduce using rule 178 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 363
    dwhileconds                    shift and go to state 396
    exp                            shift and go to state 39
    empty                          shift and go to state 364
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 97

state 364

    (127) dwhileconds -> empty .

    CPAREN          reduce using rule 127 (dwhileconds -> empty .)


state 365

    (128) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    EULER           reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RETURN          reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 128 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 366

    (55) regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .

    ID              reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    IF              reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    PRINT           reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    PLOT            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    COUNT           reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MEAN            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    MODE            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    STDV            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    KMEANS          reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DERL            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DBERN           reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DPOI            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    INVERSE         reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    ROTATE          reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    REF             reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    RREF            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    EULER           reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    DO              reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    READ            reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    RETURN          reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 55 (regreso -> RETURN OPAREN ID regnum1 CPAREN SCOLON .)


state 367

    (56) regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .

    ID              reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    IF              reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    PRINT           reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    PLOT            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    COUNT           reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MEAN            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    MODE            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    STDV            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    KMEANS          reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DERL            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DBERN           reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DPOI            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    INVERSE         reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    ROTATE          reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    REF             reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    RREF            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    EULER           reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    DO              reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    READ            reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    RETURN          reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 56 (regreso -> RETURN OPAREN expresion regnum2 CPAREN SCOLON .)


state 368

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (178) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 178 (empty -> .)

    modules2                       shift and go to state 397
    vars                           shift and go to state 256
    empty                          shift and go to state 257

state 369

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 398


state 370

    (30) funccall2 -> ID fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 323
    ID              shift and go to state 321
    CPAREN          reduce using rule 178 (empty -> .)

    funccall2                      shift and go to state 399
    empty                          shift and go to state 324

state 371

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .

    ID              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    IF              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PRINT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PLOT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNTIF         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEAN            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEDIAN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MODE            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    STDV            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    KMEANS          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DERL            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DBERN           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DPOI            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    INVERSE         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    ROTATE          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    REF             reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RREF            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    EULER           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DO              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    READ            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RETURN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CBRACKET        reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)


state 372

    (29) funccall2 -> COMMA expresion . fcn2 funccall2
    (108) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (178) empty -> .

    RELOP           shift and go to state 90
    COMMA           reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CPAREN          reduce using rule 178 (empty -> .)

    fcn2                           shift and go to state 400
    empty                          shift and go to state 269

state 373

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (28) fcn3 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    PRINT           reduce using rule 178 (empty -> .)
    PLOT            reduce using rule 178 (empty -> .)
    COUNT           reduce using rule 178 (empty -> .)
    COUNTIF         reduce using rule 178 (empty -> .)
    MEAN            reduce using rule 178 (empty -> .)
    MEDIAN          reduce using rule 178 (empty -> .)
    MODE            reduce using rule 178 (empty -> .)
    STDV            reduce using rule 178 (empty -> .)
    KMEANS          reduce using rule 178 (empty -> .)
    DERL            reduce using rule 178 (empty -> .)
    DBERN           reduce using rule 178 (empty -> .)
    DPOI            reduce using rule 178 (empty -> .)
    TRANSPOSE       reduce using rule 178 (empty -> .)
    INVERSE         reduce using rule 178 (empty -> .)
    ROTATE          reduce using rule 178 (empty -> .)
    REF             reduce using rule 178 (empty -> .)
    RREF            reduce using rule 178 (empty -> .)
    EULER           reduce using rule 178 (empty -> .)
    DO              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    CBRACKET        reduce using rule 178 (empty -> .)

    fcn3                           shift and go to state 401
    empty                          shift and go to state 402

state 374

    (88) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (91) cn2 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    PRINT           reduce using rule 178 (empty -> .)
    PLOT            reduce using rule 178 (empty -> .)
    COUNT           reduce using rule 178 (empty -> .)
    COUNTIF         reduce using rule 178 (empty -> .)
    MEAN            reduce using rule 178 (empty -> .)
    MEDIAN          reduce using rule 178 (empty -> .)
    MODE            reduce using rule 178 (empty -> .)
    STDV            reduce using rule 178 (empty -> .)
    KMEANS          reduce using rule 178 (empty -> .)
    DERL            reduce using rule 178 (empty -> .)
    DBERN           reduce using rule 178 (empty -> .)
    DPOI            reduce using rule 178 (empty -> .)
    TRANSPOSE       reduce using rule 178 (empty -> .)
    INVERSE         reduce using rule 178 (empty -> .)
    ROTATE          reduce using rule 178 (empty -> .)
    REF             reduce using rule 178 (empty -> .)
    RREF            reduce using rule 178 (empty -> .)
    EULER           reduce using rule 178 (empty -> .)
    DO              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    CBRACKET        reduce using rule 178 (empty -> .)
    CPAREN          reduce using rule 178 (empty -> .)

    cn2                            shift and go to state 403
    empty                          shift and go to state 404

state 375

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (92) cn3 -> . empty
    (178) empty -> .

    OBRACKET        reduce using rule 178 (empty -> .)

    cn3                            shift and go to state 405
    empty                          shift and go to state 406

state 376

    (93) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 407


state 377

    (94) ifblock2 -> estatuto .
    (95) ifblock2 -> estatuto . ifblock2
    (94) ifblock2 -> . estatuto
    (95) ifblock2 -> . estatuto ifblock2
    (96) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (54) estatuto -> . regreso
    (178) empty -> .
    (60) asign -> . ID EQUALS expresion SCOLON
    (61) asign -> . ID EQUALS ID SCOLON
    (62) asign -> . ID EQUALS ID asign2 SCOLON
    (63) asign -> . ID asign2 EQUALS ID SCOLON
    (64) asign -> . ID asign2 EQUALS expresion SCOLON
    (65) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (66) asign -> . ID EQUALS funccall afcn1
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (76) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (99) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (100) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (97) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (98) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (130) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (131) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (135) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (136) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (137) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (122) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (128) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (55) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

  ! reduce/reduce conflict for CBRACKET resolved using rule 94 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 94 (ifblock2 -> estatuto .)
    ID              shift and go to state 61
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    PLOT            shift and go to state 64
    COUNT           shift and go to state 65
    COUNTIF         shift and go to state 66
    MEAN            shift and go to state 67
    MEDIAN          shift and go to state 68
    MODE            shift and go to state 69
    STDV            shift and go to state 70
    KMEANS          shift and go to state 71
    DERL            shift and go to state 72
    DBERN           shift and go to state 73
    DPOI            shift and go to state 74
    TRANSPOSE       shift and go to state 75
    INVERSE         shift and go to state 76
    ROTATE          shift and go to state 77
    REF             shift and go to state 78
    RREF            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82
    RETURN          shift and go to state 83

  ! CBRACKET        [ reduce using rule 178 (empty -> .) ]

    estatuto                       shift and go to state 377
    ifblock2                       shift and go to state 408
    empty                          shift and go to state 378
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59
    regreso                        shift and go to state 60

state 378

    (96) ifblock2 -> empty .

    CBRACKET        reduce using rule 96 (ifblock2 -> empty .)


state 379

    (76) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    EULER           reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RETURN          reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 76 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 380

    (79) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    EULER           reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RETURN          reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 79 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 381

    (84) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 84 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 84 (escrt3 -> STRING escrt2 escrt2 .)


state 382

    (104) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 104 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 383

    (106) xyfunc -> empty .

    CPAREN          reduce using rule 106 (xyfunc -> empty .)


state 384

    (105) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 105 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 385

    (101) plot2 -> LCOR varcte COMMA varcte RCOR .
    (102) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 101 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 409


state 386

    (97) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 410


state 387

    (98) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 411


state 388

    (154) datasetarr -> varcte COMMA datasetarr .

    RCOR            reduce using rule 154 (datasetarr -> varcte COMMA datasetarr .)


state 389

    (149) kval -> varcte COMMA arrfun2 COMMA . arrfun3
    (152) arrfun3 -> . LCOR datasetarr2 RCOR

    LCOR            shift and go to state 413

    arrfun3                        shift and go to state 412

state 390

    (151) arrfun2 -> LCOR datasetarr . RCOR

    RCOR            shift and go to state 414


state 391

    (166) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 415


state 392

    (167) expfunc -> varcte COMMA varcte COMMA . varcte
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 416

state 393

    (173) mmmarray -> libero LCOR datasetarr4 . RCOR COMMA mmmarray
    (174) mmmarray -> libero LCOR datasetarr4 . RCOR

    RCOR            shift and go to state 417


state 394

    (176) datasetarr4 -> varcte .
    (177) datasetarr4 -> varcte . COMMA datasetarr4

    RCOR            reduce using rule 176 (datasetarr4 -> varcte .)
    COMMA           shift and go to state 418


state 395

    (122) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (124) wn2 -> . empty
    (178) empty -> .

    SCOLON          reduce using rule 178 (empty -> .)

    wn2                            shift and go to state 419
    empty                          shift and go to state 420

state 396

    (126) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 126 (dwhileconds -> expresion dwhileconds .)


state 397

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (178) empty -> .

    OBRACKET        reduce using rule 178 (empty -> .)

    mn3                            shift and go to state 421
    empty                          shift and go to state 422

state 398

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (178) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 178 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 178 (empty -> .) ]
  ! CPAREN          [ reduce using rule 178 (empty -> .) ]

    lugstat2                       shift and go to state 423
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 399

    (30) funccall2 -> ID fcn2 funccall2 .

    CPAREN          reduce using rule 30 (funccall2 -> ID fcn2 funccall2 .)


state 400

    (29) funccall2 -> COMMA expresion fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 323
    ID              shift and go to state 321
    CPAREN          reduce using rule 178 (empty -> .)

    funccall2                      shift and go to state 424
    empty                          shift and go to state 324

state 401

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    EULER           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RETURN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 402

    (28) fcn3 -> empty .

    ID              reduce using rule 28 (fcn3 -> empty .)
    IF              reduce using rule 28 (fcn3 -> empty .)
    PRINT           reduce using rule 28 (fcn3 -> empty .)
    PLOT            reduce using rule 28 (fcn3 -> empty .)
    COUNT           reduce using rule 28 (fcn3 -> empty .)
    COUNTIF         reduce using rule 28 (fcn3 -> empty .)
    MEAN            reduce using rule 28 (fcn3 -> empty .)
    MEDIAN          reduce using rule 28 (fcn3 -> empty .)
    MODE            reduce using rule 28 (fcn3 -> empty .)
    STDV            reduce using rule 28 (fcn3 -> empty .)
    KMEANS          reduce using rule 28 (fcn3 -> empty .)
    DERL            reduce using rule 28 (fcn3 -> empty .)
    DBERN           reduce using rule 28 (fcn3 -> empty .)
    DPOI            reduce using rule 28 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 28 (fcn3 -> empty .)
    INVERSE         reduce using rule 28 (fcn3 -> empty .)
    ROTATE          reduce using rule 28 (fcn3 -> empty .)
    REF             reduce using rule 28 (fcn3 -> empty .)
    RREF            reduce using rule 28 (fcn3 -> empty .)
    EULER           reduce using rule 28 (fcn3 -> empty .)
    DO              reduce using rule 28 (fcn3 -> empty .)
    READ            reduce using rule 28 (fcn3 -> empty .)
    RETURN          reduce using rule 28 (fcn3 -> empty .)
    CBRACKET        reduce using rule 28 (fcn3 -> empty .)


state 403

    (88) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    EULER           reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RETURN          reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 88 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 404

    (91) cn2 -> empty .

    ID              reduce using rule 91 (cn2 -> empty .)
    IF              reduce using rule 91 (cn2 -> empty .)
    PRINT           reduce using rule 91 (cn2 -> empty .)
    PLOT            reduce using rule 91 (cn2 -> empty .)
    COUNT           reduce using rule 91 (cn2 -> empty .)
    COUNTIF         reduce using rule 91 (cn2 -> empty .)
    MEAN            reduce using rule 91 (cn2 -> empty .)
    MEDIAN          reduce using rule 91 (cn2 -> empty .)
    MODE            reduce using rule 91 (cn2 -> empty .)
    STDV            reduce using rule 91 (cn2 -> empty .)
    KMEANS          reduce using rule 91 (cn2 -> empty .)
    DERL            reduce using rule 91 (cn2 -> empty .)
    DBERN           reduce using rule 91 (cn2 -> empty .)
    DPOI            reduce using rule 91 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 91 (cn2 -> empty .)
    INVERSE         reduce using rule 91 (cn2 -> empty .)
    ROTATE          reduce using rule 91 (cn2 -> empty .)
    REF             reduce using rule 91 (cn2 -> empty .)
    RREF            reduce using rule 91 (cn2 -> empty .)
    EULER           reduce using rule 91 (cn2 -> empty .)
    DO              reduce using rule 91 (cn2 -> empty .)
    READ            reduce using rule 91 (cn2 -> empty .)
    RETURN          reduce using rule 91 (cn2 -> empty .)
    CBRACKET        reduce using rule 91 (cn2 -> empty .)
    CPAREN          reduce using rule 91 (cn2 -> empty .)


state 405

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (93) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 327

    ifblock                        shift and go to state 425

state 406

    (92) cn3 -> empty .

    OBRACKET        reduce using rule 92 (cn3 -> empty .)


state 407

    (93) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 93 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 93 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 408

    (95) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 95 (ifblock2 -> estatuto ifblock2 .)


state 409

    (102) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (101) plot2 -> . LCOR varcte COMMA varcte RCOR
    (102) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (103) plot2 -> . empty
    (178) empty -> .

    LCOR            shift and go to state 172
    CPAREN          reduce using rule 178 (empty -> .)

    plot2                          shift and go to state 426
    empty                          shift and go to state 427

state 410

    (97) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 428


state 411

    (98) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 62

    cond                           shift and go to state 429

state 412

    (149) kval -> varcte COMMA arrfun2 COMMA arrfun3 .

    CPAREN          reduce using rule 149 (kval -> varcte COMMA arrfun2 COMMA arrfun3 .)


state 413

    (152) arrfun3 -> LCOR . datasetarr2 RCOR
    (155) datasetarr2 -> . varcte
    (156) datasetarr2 -> . varcte COMMA datasetarr2
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    datasetarr2                    shift and go to state 430
    varcte                         shift and go to state 431

state 414

    (151) arrfun2 -> LCOR datasetarr RCOR .

    COMMA           reduce using rule 151 (arrfun2 -> LCOR datasetarr RCOR .)


state 415

    (166) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 166 (expfunc -> ID COMMA ID COMMA ID .)


state 416

    (167) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 167 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 417

    (173) mmmarray -> libero LCOR datasetarr4 RCOR . COMMA mmmarray
    (174) mmmarray -> libero LCOR datasetarr4 RCOR .

    COMMA           shift and go to state 432
    RCOR            reduce using rule 174 (mmmarray -> libero LCOR datasetarr4 RCOR .)


state 418

    (177) datasetarr4 -> varcte COMMA . datasetarr4
    (176) datasetarr4 -> . varcte
    (177) datasetarr4 -> . varcte COMMA datasetarr4
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 394
    datasetarr4                    shift and go to state 433

state 419

    (122) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 434


state 420

    (124) wn2 -> empty .

    SCOLON          reduce using rule 124 (wn2 -> empty .)


state 421

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (34) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 436

    funblock                       shift and go to state 435

state 422

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 423

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 424

    (29) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 29 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 425

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 437


state 426

    (102) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 102 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 427

    (103) plot2 -> empty .

    CPAREN          reduce using rule 103 (plot2 -> empty .)


state 428

    (97) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    EULER           reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RETURN          reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 97 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 429

    (98) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 438


state 430

    (152) arrfun3 -> LCOR datasetarr2 . RCOR

    RCOR            shift and go to state 439


state 431

    (155) datasetarr2 -> varcte .
    (156) datasetarr2 -> varcte . COMMA datasetarr2

    RCOR            reduce using rule 155 (datasetarr2 -> varcte .)
    COMMA           shift and go to state 440


state 432

    (173) mmmarray -> libero LCOR datasetarr4 RCOR COMMA . mmmarray
    (173) mmmarray -> . libero LCOR datasetarr4 RCOR COMMA mmmarray
    (174) mmmarray -> . libero LCOR datasetarr4 RCOR
    (175) libero -> . empty
    (178) empty -> .

    LCOR            reduce using rule 178 (empty -> .)

    libero                         shift and go to state 305
    mmmarray                       shift and go to state 441
    empty                          shift and go to state 306

state 433

    (177) datasetarr4 -> varcte COMMA datasetarr4 .

    RCOR            reduce using rule 177 (datasetarr4 -> varcte COMMA datasetarr4 .)


state 434

    (122) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    EULER           reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RETURN          reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 122 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 435

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (178) empty -> .

    FUNC            reduce using rule 178 (empty -> .)
    OBRACKET        reduce using rule 178 (empty -> .)

    mn7                            shift and go to state 442
    empty                          shift and go to state 443

state 436

    (34) funblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (54) estatuto -> . regreso
    (178) empty -> .
    (60) asign -> . ID EQUALS expresion SCOLON
    (61) asign -> . ID EQUALS ID SCOLON
    (62) asign -> . ID EQUALS ID asign2 SCOLON
    (63) asign -> . ID asign2 EQUALS ID SCOLON
    (64) asign -> . ID asign2 EQUALS expresion SCOLON
    (65) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (66) asign -> . ID EQUALS funccall afcn1
    (88) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (89) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (76) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (77) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (78) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (79) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (99) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (100) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (97) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (98) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (130) metodos -> . MEAN fe1 OPAREN arrfun CPAREN SCOLON
    (131) metodos -> . MEDIAN fe2 OPAREN arrfun CPAREN SCOLON
    (132) metodos -> . MODE fe3 OPAREN arrfun CPAREN SCOLON
    (133) metodos -> . STDV fe4 OPAREN arrfun CPAREN SCOLON
    (134) metodos -> . KMEANS fe5 OPAREN kval CPAREN SCOLON
    (135) metodos -> . DERL dmn1 OPAREN expfunc CPAREN SCOLON
    (136) metodos -> . DBERN dbrn1 OPAREN expfunc2 CPAREN SCOLON
    (137) metodos -> . DPOI dp1 OPAREN expfunc2 CPAREN SCOLON
    (138) metodos -> . TRANSPOSE tp1 OPAREN mmmfunc CPAREN SCOLON
    (139) metodos -> . INVERSE tp2 OPAREN mmmfunc CPAREN SCOLON
    (140) metodos -> . ROTATE tp3 OPAREN mmmfunc CPAREN SCOLON
    (141) metodos -> . REF tp4 OPAREN mmmfunc CPAREN SCOLON
    (142) metodos -> . RREF tp5 OPAREN mmmfunc CPAREN SCOLON
    (143) metodos -> . EULER tp6 OPAREN CPAREN SCOLON
    (122) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (128) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (55) regreso -> . RETURN OPAREN ID regnum1 CPAREN SCOLON
    (56) regreso -> . RETURN OPAREN expresion regnum2 CPAREN SCOLON

    CBRACKET        reduce using rule 178 (empty -> .)
    ID              shift and go to state 61
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    PLOT            shift and go to state 64
    COUNT           shift and go to state 65
    COUNTIF         shift and go to state 66
    MEAN            shift and go to state 67
    MEDIAN          shift and go to state 68
    MODE            shift and go to state 69
    STDV            shift and go to state 70
    KMEANS          shift and go to state 71
    DERL            shift and go to state 72
    DBERN           shift and go to state 73
    DPOI            shift and go to state 74
    TRANSPOSE       shift and go to state 75
    INVERSE         shift and go to state 76
    ROTATE          shift and go to state 77
    REF             shift and go to state 78
    RREF            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82
    RETURN          shift and go to state 83

    block2                         shift and go to state 444
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59
    regreso                        shift and go to state 60

state 437

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (91) cn2 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    PRINT           reduce using rule 178 (empty -> .)
    PLOT            reduce using rule 178 (empty -> .)
    COUNT           reduce using rule 178 (empty -> .)
    COUNTIF         reduce using rule 178 (empty -> .)
    MEAN            reduce using rule 178 (empty -> .)
    MEDIAN          reduce using rule 178 (empty -> .)
    MODE            reduce using rule 178 (empty -> .)
    STDV            reduce using rule 178 (empty -> .)
    KMEANS          reduce using rule 178 (empty -> .)
    DERL            reduce using rule 178 (empty -> .)
    DBERN           reduce using rule 178 (empty -> .)
    DPOI            reduce using rule 178 (empty -> .)
    TRANSPOSE       reduce using rule 178 (empty -> .)
    INVERSE         reduce using rule 178 (empty -> .)
    ROTATE          reduce using rule 178 (empty -> .)
    REF             reduce using rule 178 (empty -> .)
    RREF            reduce using rule 178 (empty -> .)
    EULER           reduce using rule 178 (empty -> .)
    DO              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    CBRACKET        reduce using rule 178 (empty -> .)
    CPAREN          reduce using rule 178 (empty -> .)

    cn2                            shift and go to state 445
    empty                          shift and go to state 404

state 438

    (98) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 446


state 439

    (152) arrfun3 -> LCOR datasetarr2 RCOR .

    CPAREN          reduce using rule 152 (arrfun3 -> LCOR datasetarr2 RCOR .)


state 440

    (156) datasetarr2 -> varcte COMMA . datasetarr2
    (155) datasetarr2 -> . varcte
    (156) datasetarr2 -> . varcte COMMA datasetarr2
    (117) varcte -> . ID
    (118) varcte -> . ID asign2
    (119) varcte -> . NUMERIC
    (120) varcte -> . NUMBER
    (121) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 98
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 431
    datasetarr2                    shift and go to state 447

state 441

    (173) mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .

    RCOR            reduce using rule 173 (mmmarray -> libero LCOR datasetarr4 RCOR COMMA mmmarray .)


state 442

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 443

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 444

    (34) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 448


state 445

    (89) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    EULER           reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RETURN          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 89 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 446

    (98) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    EULER           reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RETURN          reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 98 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 447

    (156) datasetarr2 -> varcte COMMA datasetarr2 .

    RCOR            reduce using rule 156 (datasetarr2 -> varcte COMMA datasetarr2 .)


state 448

    (34) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 36 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 38 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 157 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 166 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 198 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 199 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 202 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 206 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 235 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 238 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 265 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 278 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 278 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 279 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 333 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 48 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 164 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 164
WARNING: reduce/reduce conflict in state 171 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 171
WARNING: reduce/reduce conflict in state 192 resolved using rule (regnum1 -> <empty>)
WARNING: rejected rule (varcte -> ID) in state 192
WARNING: reduce/reduce conflict in state 208 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 208
WARNING: reduce/reduce conflict in state 259 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 259
WARNING: reduce/reduce conflict in state 278 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 278
WARNING: reduce/reduce conflict in state 377 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 377
WARNING: reduce/reduce conflict in state 398 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 398
