Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    COMMENT
    CTED
    CTEI
    DIFF
    EQ
    GRE
    GREATEQ
    GREATERTHAN
    INTEGER
    LESSEQ
    LESSTHAN
    PER
    QUOTE
    TIPO

Grammar

Rule 0     S' -> lugstat
Rule 1     lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block
Rule 2     addmain -> empty
Rule 3     mnv -> empty
Rule 4     lugstat2 -> vars
Rule 5     lugstat2 -> empty
Rule 6     lugstat3 -> modules
Rule 7     lugstat3 -> modules lugstat3
Rule 8     lugstat3 -> empty
Rule 9     vars -> VAR vars1
Rule 10    vars1 -> ID COMMA vars1
Rule 11    vars1 -> ID COLON tipo SCOLON lugstat2
Rule 12    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 13    vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON
Rule 14    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
Rule 15    vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
Rule 16    vars1 -> ID asign2 COLON tipo SCOLON
Rule 17    vars1 -> ID asign2 COMMA vars1
Rule 18    savename -> empty
Rule 19    modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
Rule 20    mn1 -> empty
Rule 21    mn7 -> empty
Rule 22    mn2 -> <empty>
Rule 23    mn3 -> empty
Rule 24    funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
Rule 25    funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN
Rule 26    fcn1 -> empty
Rule 27    fcn2 -> empty
Rule 28    fcn3 -> empty
Rule 29    funccall2 -> COMMA expresion fcn2 funccall2
Rule 30    funccall2 -> ID fcn2 funccall2
Rule 31    funccall2 -> empty
Rule 32    modules2 -> vars
Rule 33    modules2 -> empty
Rule 34    funblock -> OBRACKET block2 CBRACKET
Rule 35    block -> OBRACKET block2 CBRACKET
Rule 36    block2 -> estatuto
Rule 37    block2 -> estatuto block2
Rule 38    block2 -> empty
Rule 39    tipo -> INT
Rule 40    tipo -> BOOL
Rule 41    tipo -> DOUBLE
Rule 42    tipo -> STRING
Rule 43    tipo -> CHAR
Rule 44    estatuto -> asign
Rule 45    estatuto -> cond
Rule 46    estatuto -> escrt
Rule 47    estatuto -> plot
Rule 48    estatuto -> count
Rule 49    estatuto -> countif
Rule 50    estatuto -> metodos
Rule 51    estatuto -> dwhile
Rule 52    estatuto -> readln
Rule 53    estatuto -> funccall
Rule 54    asign -> ID EQUALS expresion SCOLON
Rule 55    asign -> ID EQUALS ID SCOLON
Rule 56    asign -> ID EQUALS ID asign2 SCOLON
Rule 57    asign -> ID asign2 EQUALS ID SCOLON
Rule 58    asign -> ID asign2 EQUALS expresion SCOLON
Rule 59    asign -> ID asign2 EQUALS ID asign2 SCOLON
Rule 60    asign2 -> LCOR expresion RCOR asign3
Rule 61    asign2 -> LCOR varcte RCOR asign3
Rule 62    asign3 -> LCOR expresion RCOR
Rule 63    asign3 -> LCOR varcte RCOR
Rule 64    asign3 -> empty
Rule 65    escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
Rule 66    escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON
Rule 67    escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON
Rule 68    escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
Rule 69    escrt2 -> COMMA escrt3
Rule 70    escrt2 -> empty
Rule 71    escrt3 -> ID escrt2
Rule 72    escrt3 -> ID
Rule 73    escrt3 -> STRING escrt2 escrt2
Rule 74    en1 -> empty
Rule 75    en2 -> empty
Rule 76    en3 -> empty
Rule 77    cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
Rule 78    cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
Rule 79    cn1 -> empty
Rule 80    cn2 -> empty
Rule 81    cn3 -> empty
Rule 82    ifblock -> OBRACKET ifblock2 CBRACKET
Rule 83    ifblock2 -> estatuto
Rule 84    ifblock2 -> estatuto ifblock2
Rule 85    ifblock2 -> empty
Rule 86    count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
Rule 87    countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
Rule 88    plot -> PLOT OPAREN xyfunc CPAREN SCOLON
Rule 89    plot -> PLOT OPAREN plot2 CPAREN SCOLON
Rule 90    plot2 -> LCOR varcte COMMA varcte RCOR
Rule 91    plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2
Rule 92    plot2 -> empty
Rule 93    xyfunc -> FX EQUALS exp SCOLON xyfunc
Rule 94    xyfunc -> FY EQUALS exp SCOLON xyfunc
Rule 95    xyfunc -> empty
Rule 96    expresion -> exp
Rule 97    expresion -> expresion RELOP exp
Rule 98    exp -> termino
Rule 99    exp -> termino PLUS exp
Rule 100   exp -> termino MINUS exp
Rule 101   termino -> factor
Rule 102   termino -> factor MULT termino
Rule 103   termino -> factor DIV termino
Rule 104   factor -> OPAREN expresion CPAREN
Rule 105   factor -> varcte
Rule 106   varcte -> ID
Rule 107   varcte -> ID asign2
Rule 108   varcte -> NUMERIC
Rule 109   varcte -> NUMBER
Rule 110   varcte -> LOGICAL
Rule 111   dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
Rule 112   wn1 -> empty
Rule 113   wn2 -> empty
Rule 114   wblock -> OBRACKET block2 CBRACKET
Rule 115   dwhileconds -> expresion dwhileconds
Rule 116   dwhileconds -> expresion AND dwhileconds
Rule 117   dwhileconds -> expresion OR dwhileconds
Rule 118   dwhileconds -> empty
Rule 119   readln -> READ OPAREN ID rn1 CPAREN SCOLON
Rule 120   rn1 -> empty
Rule 121   metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON
Rule 122   metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON
Rule 123   metodos -> MODE OPAREN mmmfunc CPAREN SCOLON
Rule 124   metodos -> STDV OPAREN mmmfunc CPAREN SCOLON
Rule 125   metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
Rule 126   metodos -> DERL OPAREN expfunc CPAREN SCOLON
Rule 127   metodos -> DBERN OPAREN expfunc CPAREN SCOLON
Rule 128   metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON
Rule 129   metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
Rule 130   metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON
Rule 131   metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON
Rule 132   metodos -> REF OPAREN mmmfunc CPAREN SCOLON
Rule 133   metodos -> RREF OPAREN mmmfunc CPAREN SCOLON
Rule 134   metodos -> MONT OPAREN mmmfunc CPAREN SCOLON
Rule 135   metodos -> EULER OPAREN CPAREN SCOLON
Rule 136   expfunc -> ID COMMA ID COMMA ID
Rule 137   expfunc -> varcte COMMA varcte COMMA varcte
Rule 138   expfunc2 -> ID COMMA ID
Rule 139   expfunc2 -> varcte COMMA varcte
Rule 140   mmmfunc -> LCOR RCOR
Rule 141   mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc
Rule 142   mmmfunc -> LCOR mmmarray RCOR
Rule 143   mmmfunc -> ID
Rule 144   mmmfunc -> empty
Rule 145   mmmarray -> varcte
Rule 146   mmmarray -> varcte COMMA mmmarray
Rule 147   mmmarray -> empty
Rule 148   empty -> <empty>

Terminals, with rules where they appear

AND                  : 116
BOOL                 : 40
CBRACKET             : 34 35 82 114
CHAR                 : 43
CHARACTER            : 
COLON                : 11 12 13 14 15 16 19
COMMA                : 10 17 29 69 86 86 87 87 87 90 91 91 125 136 136 137 137 138 139 141 146
COMMENT              : 
COUNT                : 86
COUNTIF              : 87
CPAREN               : 19 24 25 65 66 67 68 77 78 86 87 88 89 104 111 119 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135
CTED                 : 
CTEI                 : 
DBERN                : 127
DERL                 : 126
DIFF                 : 
DIV                  : 103
DO                   : 111
DOUBLE               : 41
DPOI                 : 128
ELSE                 : 78
EQ                   : 
EQUALS               : 54 55 56 57 58 59 93 94
EULER                : 135
FUNC                 : 19
FX                   : 93
FY                   : 94
GRE                  : 
GREATEQ              : 
GREATERTHAN          : 
ID                   : 1 10 11 12 13 14 15 16 17 19 24 25 25 30 54 55 55 56 56 57 57 58 59 59 65 71 72 86 87 106 107 119 136 136 136 138 138 143
IF                   : 77 78
INT                  : 39
INTEGER              : 
INVERSE              : 130
KMEANS               : 125
LCOR                 : 12 13 14 14 15 15 60 61 62 63 90 91 140 141 142
LESSEQ               : 
LESSTHAN             : 
LOGICAL              : 110
LUGSTAT              : 1
MEAN                 : 121
MEDIAN               : 122
MINUS                : 100
MODE                 : 123
MONT                 : 134
MULT                 : 102
NUMBER               : 12 13 14 14 15 15 109
NUMERIC              : 108
OBRACKET             : 34 35 82 114
OPAREN               : 19 24 25 65 66 67 68 77 78 86 87 88 89 104 111 119 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135
OR                   : 117
PER                  : 
PLOT                 : 88 89
PLUS                 : 99
PRINT                : 65 66 67 68
QUOTE                : 
RCOR                 : 12 13 14 14 15 15 60 61 62 63 90 91 140 141 142
READ                 : 119
REF                  : 132
RELOP                : 97
ROTATE               : 131
RREF                 : 133
SCOLON               : 1 11 12 13 14 15 16 54 55 56 57 58 59 65 66 67 68 77 78 86 87 88 89 93 94 111 119 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135
STDV                 : 124
STRING               : 42 67 68 73
TIPO                 : 
TRANSPOSE            : 129
VAR                  : 9
WHILE                : 111
error                : 

Nonterminals, with rules where they appear

addmain              : 1
asign                : 44
asign2               : 16 17 56 57 58 59 59 107
asign3               : 60 61
block                : 1
block2               : 34 35 37 114
cn1                  : 77 78
cn2                  : 77 78
cn3                  : 78
cond                 : 45 87
count                : 48
countif              : 49
dwhile               : 51
dwhileconds          : 111 115 116 117
empty                : 2 3 5 8 18 20 21 23 26 27 28 31 33 38 64 70 74 75 76 79 80 81 85 92 95 112 113 118 120 144 147
en1                  : 66
en2                  : 67 68
en3                  : 65
escrt                : 46
escrt2               : 65 68 71 73 73
escrt3               : 69
estatuto             : 36 37 83 84
exp                  : 93 94 96 97 99 100
expfunc              : 126 127
expfunc2             : 128
expresion            : 24 29 54 58 60 62 66 77 78 97 104 115 116 117
factor               : 101 102 103
fcn1                 : 24 25
fcn2                 : 24 25 29 30
fcn3                 : 24
funblock             : 19
funccall             : 53
funccall2            : 24 25 29 30
ifblock              : 77 78 78
ifblock2             : 82 84
lugstat              : 0
lugstat2             : 1 11 12 14
lugstat3             : 1 7
metodos              : 50
mmmarray             : 141 142 146
mmmfunc              : 121 122 123 124 125 129 130 131 132 133 134 141
mn1                  : 19
mn2                  : 19
mn3                  : 19
mn7                  : 19
mnv                  : 1
modules              : 6 7
modules2             : 19 19
plot                 : 47
plot2                : 89 91
readln               : 52
rn1                  : 119
savename             : 
termino              : 98 99 100 102 103
tipo                 : 11 12 13 14 15 16 19
varcte               : 61 63 86 86 87 87 90 90 91 91 105 125 137 137 137 139 139 145 146
vars                 : 4 32
vars1                : 9 10 17
wblock               : 111
wn1                  : 111
wn2                  : 111
xyfunc               : 88 93 94

Parsing method: LALR

state 0

    (0) S' -> . lugstat
    (1) lugstat -> . LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block

    LUGSTAT         shift and go to state 2

    lugstat                        shift and go to state 1

state 1

    (0) S' -> lugstat .



state 2

    (1) lugstat -> LUGSTAT . ID SCOLON addmain lugstat2 lugstat3 mnv block

    ID              shift and go to state 3


state 3

    (1) lugstat -> LUGSTAT ID . SCOLON addmain lugstat2 lugstat3 mnv block

    SCOLON          shift and go to state 4


state 4

    (1) lugstat -> LUGSTAT ID SCOLON . addmain lugstat2 lugstat3 mnv block
    (2) addmain -> . empty
    (148) empty -> .

    VAR             reduce using rule 148 (empty -> .)
    FUNC            reduce using rule 148 (empty -> .)
    OBRACKET        reduce using rule 148 (empty -> .)

    addmain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) lugstat -> LUGSTAT ID SCOLON addmain . lugstat2 lugstat3 mnv block
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (148) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 148 (empty -> .)
    OBRACKET        reduce using rule 148 (empty -> .)

    lugstat2                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) addmain -> empty .

    VAR             reduce using rule 2 (addmain -> empty .)
    FUNC            reduce using rule 2 (addmain -> empty .)
    OBRACKET        reduce using rule 2 (addmain -> empty .)


state 7

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 . lugstat3 mnv block
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (148) empty -> .

    FUNC            shift and go to state 14
    OBRACKET        reduce using rule 148 (empty -> .)

    lugstat3                       shift and go to state 11
    modules                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) lugstat2 -> vars .

    FUNC            reduce using rule 4 (lugstat2 -> vars .)
    OBRACKET        reduce using rule 4 (lugstat2 -> vars .)
    CPAREN          reduce using rule 4 (lugstat2 -> vars .)


state 9

    (5) lugstat2 -> empty .

    FUNC            reduce using rule 5 (lugstat2 -> empty .)
    OBRACKET        reduce using rule 5 (lugstat2 -> empty .)
    CPAREN          reduce using rule 5 (lugstat2 -> empty .)


state 10

    (9) vars -> VAR . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 15

state 11

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 . mnv block
    (3) mnv -> . empty
    (148) empty -> .

    OBRACKET        reduce using rule 148 (empty -> .)

    mnv                            shift and go to state 17
    empty                          shift and go to state 18

state 12

    (6) lugstat3 -> modules .
    (7) lugstat3 -> modules . lugstat3
    (6) lugstat3 -> . modules
    (7) lugstat3 -> . modules lugstat3
    (8) lugstat3 -> . empty
    (19) modules -> . FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (148) empty -> .

  ! reduce/reduce conflict for OBRACKET resolved using rule 6 (lugstat3 -> modules .)
    OBRACKET        reduce using rule 6 (lugstat3 -> modules .)
    FUNC            shift and go to state 14

  ! OBRACKET        [ reduce using rule 148 (empty -> .) ]

    modules                        shift and go to state 12
    lugstat3                       shift and go to state 19
    empty                          shift and go to state 13

state 13

    (8) lugstat3 -> empty .

    OBRACKET        reduce using rule 8 (lugstat3 -> empty .)


state 14

    (19) modules -> FUNC . ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    ID              shift and go to state 20


state 15

    (9) vars -> VAR vars1 .

    FUNC            reduce using rule 9 (vars -> VAR vars1 .)
    OBRACKET        reduce using rule 9 (vars -> VAR vars1 .)
    CPAREN          reduce using rule 9 (vars -> VAR vars1 .)


state 16

    (10) vars1 -> ID . COMMA vars1
    (11) vars1 -> ID . COLON tipo SCOLON lugstat2
    (12) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID . LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID . LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> ID . asign2 COLON tipo SCOLON
    (17) vars1 -> ID . asign2 COMMA vars1
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

    COMMA           shift and go to state 21
    COLON           shift and go to state 22
    LCOR            shift and go to state 23

    asign2                         shift and go to state 24

state 17

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv . block
    (35) block -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 26

    block                          shift and go to state 25

state 18

    (3) mnv -> empty .

    OBRACKET        reduce using rule 3 (mnv -> empty .)


state 19

    (7) lugstat3 -> modules lugstat3 .

    OBRACKET        reduce using rule 7 (lugstat3 -> modules lugstat3 .)


state 20

    (19) modules -> FUNC ID . COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    COLON           shift and go to state 27


state 21

    (10) vars1 -> ID COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 28

state 22

    (11) vars1 -> ID COLON . tipo SCOLON lugstat2
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 29

state 23

    (12) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR . NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR . NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (60) asign2 -> LCOR . expresion RCOR asign3
    (61) asign2 -> LCOR . varcte RCOR asign3
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte

    NUMBER          shift and go to state 36
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 24

    (16) vars1 -> ID asign2 . COLON tipo SCOLON
    (17) vars1 -> ID asign2 . COMMA vars1

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 25

    (1) lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .

    $end            reduce using rule 1 (lugstat -> LUGSTAT ID SCOLON addmain lugstat2 lugstat3 mnv block .)


state 26

    (35) block -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (148) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (65) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (88) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (89) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (86) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (87) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (121) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (125) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (126) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (127) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (128) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (129) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . EULER OPAREN CPAREN SCOLON
    (111) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (119) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 148 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    block2                         shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 27

    (19) modules -> FUNC ID COLON . tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 83

state 28

    (10) vars1 -> ID COMMA vars1 .

    FUNC            reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    OBRACKET        reduce using rule 10 (vars1 -> ID COMMA vars1 .)
    CPAREN          reduce using rule 10 (vars1 -> ID COMMA vars1 .)


state 29

    (11) vars1 -> ID COLON tipo . SCOLON lugstat2

    SCOLON          shift and go to state 84


state 30

    (39) tipo -> INT .

    SCOLON          reduce using rule 39 (tipo -> INT .)
    OPAREN          reduce using rule 39 (tipo -> INT .)


state 31

    (40) tipo -> BOOL .

    SCOLON          reduce using rule 40 (tipo -> BOOL .)
    OPAREN          reduce using rule 40 (tipo -> BOOL .)


state 32

    (41) tipo -> DOUBLE .

    SCOLON          reduce using rule 41 (tipo -> DOUBLE .)
    OPAREN          reduce using rule 41 (tipo -> DOUBLE .)


state 33

    (42) tipo -> STRING .

    SCOLON          reduce using rule 42 (tipo -> STRING .)
    OPAREN          reduce using rule 42 (tipo -> STRING .)


state 34

    (43) tipo -> CHAR .

    SCOLON          reduce using rule 43 (tipo -> CHAR .)
    OPAREN          reduce using rule 43 (tipo -> CHAR .)


state 35

    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

    RCOR            reduce using rule 106 (varcte -> ID .)
    MULT            reduce using rule 106 (varcte -> ID .)
    DIV             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    RELOP           reduce using rule 106 (varcte -> ID .)
    CPAREN          reduce using rule 106 (varcte -> ID .)
    SCOLON          reduce using rule 106 (varcte -> ID .)
    COMMA           reduce using rule 106 (varcte -> ID .)
    ID              reduce using rule 106 (varcte -> ID .)
    AND             reduce using rule 106 (varcte -> ID .)
    OR              reduce using rule 106 (varcte -> ID .)
    OPAREN          reduce using rule 106 (varcte -> ID .)
    NUMERIC         reduce using rule 106 (varcte -> ID .)
    NUMBER          reduce using rule 106 (varcte -> ID .)
    LOGICAL         reduce using rule 106 (varcte -> ID .)
    LCOR            shift and go to state 86

    asign2                         shift and go to state 85

state 36

    (12) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER . RCOR COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER . RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (109) varcte -> NUMBER .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 87
    MULT            reduce using rule 109 (varcte -> NUMBER .)
    DIV             reduce using rule 109 (varcte -> NUMBER .)
    PLUS            reduce using rule 109 (varcte -> NUMBER .)
    MINUS           reduce using rule 109 (varcte -> NUMBER .)
    RELOP           reduce using rule 109 (varcte -> NUMBER .)

  ! RCOR            [ reduce using rule 109 (varcte -> NUMBER .) ]


state 37

    (60) asign2 -> LCOR expresion . RCOR asign3
    (97) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 88
    RELOP           shift and go to state 89


state 38

    (61) asign2 -> LCOR varcte . RCOR asign3
    (105) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 90
    MULT            reduce using rule 105 (factor -> varcte .)
    DIV             reduce using rule 105 (factor -> varcte .)
    PLUS            reduce using rule 105 (factor -> varcte .)
    MINUS           reduce using rule 105 (factor -> varcte .)
    RELOP           reduce using rule 105 (factor -> varcte .)

  ! RCOR            [ reduce using rule 105 (factor -> varcte .) ]


state 39

    (96) expresion -> exp .

    RCOR            reduce using rule 96 (expresion -> exp .)
    RELOP           reduce using rule 96 (expresion -> exp .)
    CPAREN          reduce using rule 96 (expresion -> exp .)
    SCOLON          reduce using rule 96 (expresion -> exp .)
    COMMA           reduce using rule 96 (expresion -> exp .)
    ID              reduce using rule 96 (expresion -> exp .)
    AND             reduce using rule 96 (expresion -> exp .)
    OR              reduce using rule 96 (expresion -> exp .)
    OPAREN          reduce using rule 96 (expresion -> exp .)
    NUMERIC         reduce using rule 96 (expresion -> exp .)
    NUMBER          reduce using rule 96 (expresion -> exp .)
    LOGICAL         reduce using rule 96 (expresion -> exp .)


state 40

    (108) varcte -> NUMERIC .

    RCOR            reduce using rule 108 (varcte -> NUMERIC .)
    MULT            reduce using rule 108 (varcte -> NUMERIC .)
    DIV             reduce using rule 108 (varcte -> NUMERIC .)
    PLUS            reduce using rule 108 (varcte -> NUMERIC .)
    MINUS           reduce using rule 108 (varcte -> NUMERIC .)
    RELOP           reduce using rule 108 (varcte -> NUMERIC .)
    CPAREN          reduce using rule 108 (varcte -> NUMERIC .)
    SCOLON          reduce using rule 108 (varcte -> NUMERIC .)
    COMMA           reduce using rule 108 (varcte -> NUMERIC .)
    ID              reduce using rule 108 (varcte -> NUMERIC .)
    AND             reduce using rule 108 (varcte -> NUMERIC .)
    OR              reduce using rule 108 (varcte -> NUMERIC .)
    OPAREN          reduce using rule 108 (varcte -> NUMERIC .)
    NUMERIC         reduce using rule 108 (varcte -> NUMERIC .)
    NUMBER          reduce using rule 108 (varcte -> NUMERIC .)
    LOGICAL         reduce using rule 108 (varcte -> NUMERIC .)


state 41

    (110) varcte -> LOGICAL .

    RCOR            reduce using rule 110 (varcte -> LOGICAL .)
    MULT            reduce using rule 110 (varcte -> LOGICAL .)
    DIV             reduce using rule 110 (varcte -> LOGICAL .)
    PLUS            reduce using rule 110 (varcte -> LOGICAL .)
    MINUS           reduce using rule 110 (varcte -> LOGICAL .)
    RELOP           reduce using rule 110 (varcte -> LOGICAL .)
    CPAREN          reduce using rule 110 (varcte -> LOGICAL .)
    SCOLON          reduce using rule 110 (varcte -> LOGICAL .)
    COMMA           reduce using rule 110 (varcte -> LOGICAL .)
    ID              reduce using rule 110 (varcte -> LOGICAL .)
    AND             reduce using rule 110 (varcte -> LOGICAL .)
    OR              reduce using rule 110 (varcte -> LOGICAL .)
    OPAREN          reduce using rule 110 (varcte -> LOGICAL .)
    NUMERIC         reduce using rule 110 (varcte -> LOGICAL .)
    NUMBER          reduce using rule 110 (varcte -> LOGICAL .)
    LOGICAL         reduce using rule 110 (varcte -> LOGICAL .)


state 42

    (98) exp -> termino .
    (99) exp -> termino . PLUS exp
    (100) exp -> termino . MINUS exp

    RCOR            reduce using rule 98 (exp -> termino .)
    RELOP           reduce using rule 98 (exp -> termino .)
    CPAREN          reduce using rule 98 (exp -> termino .)
    SCOLON          reduce using rule 98 (exp -> termino .)
    COMMA           reduce using rule 98 (exp -> termino .)
    ID              reduce using rule 98 (exp -> termino .)
    AND             reduce using rule 98 (exp -> termino .)
    OR              reduce using rule 98 (exp -> termino .)
    OPAREN          reduce using rule 98 (exp -> termino .)
    NUMERIC         reduce using rule 98 (exp -> termino .)
    NUMBER          reduce using rule 98 (exp -> termino .)
    LOGICAL         reduce using rule 98 (exp -> termino .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92


state 43

    (101) termino -> factor .
    (102) termino -> factor . MULT termino
    (103) termino -> factor . DIV termino

    PLUS            reduce using rule 101 (termino -> factor .)
    MINUS           reduce using rule 101 (termino -> factor .)
    RCOR            reduce using rule 101 (termino -> factor .)
    RELOP           reduce using rule 101 (termino -> factor .)
    CPAREN          reduce using rule 101 (termino -> factor .)
    SCOLON          reduce using rule 101 (termino -> factor .)
    COMMA           reduce using rule 101 (termino -> factor .)
    ID              reduce using rule 101 (termino -> factor .)
    AND             reduce using rule 101 (termino -> factor .)
    OR              reduce using rule 101 (termino -> factor .)
    OPAREN          reduce using rule 101 (termino -> factor .)
    NUMERIC         reduce using rule 101 (termino -> factor .)
    NUMBER          reduce using rule 101 (termino -> factor .)
    LOGICAL         reduce using rule 101 (termino -> factor .)
    MULT            shift and go to state 93
    DIV             shift and go to state 94


state 44

    (104) factor -> OPAREN . expresion CPAREN
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 95
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 45

    (16) vars1 -> ID asign2 COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 98

state 46

    (17) vars1 -> ID asign2 COMMA . vars1
    (10) vars1 -> . ID COMMA vars1
    (11) vars1 -> . ID COLON tipo SCOLON lugstat2
    (12) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (13) vars1 -> . ID LCOR NUMBER RCOR COLON tipo SCOLON
    (14) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> . ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON
    (16) vars1 -> . ID asign2 COLON tipo SCOLON
    (17) vars1 -> . ID asign2 COMMA vars1

    ID              shift and go to state 16

    vars1                          shift and go to state 99

state 47

    (35) block -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 100


state 48

    (36) block2 -> estatuto .
    (37) block2 -> estatuto . block2
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (148) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (65) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (88) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (89) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (86) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (87) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (121) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (125) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (126) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (127) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (128) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (129) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . EULER OPAREN CPAREN SCOLON
    (111) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (119) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 36 (block2 -> estatuto .)
    CBRACKET        reduce using rule 36 (block2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

  ! CBRACKET        [ reduce using rule 148 (empty -> .) ]

    estatuto                       shift and go to state 48
    block2                         shift and go to state 101
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 49

    (38) block2 -> empty .

    CBRACKET        reduce using rule 38 (block2 -> empty .)


state 50

    (44) estatuto -> asign .

    ID              reduce using rule 44 (estatuto -> asign .)
    IF              reduce using rule 44 (estatuto -> asign .)
    PRINT           reduce using rule 44 (estatuto -> asign .)
    PLOT            reduce using rule 44 (estatuto -> asign .)
    COUNT           reduce using rule 44 (estatuto -> asign .)
    COUNTIF         reduce using rule 44 (estatuto -> asign .)
    MEAN            reduce using rule 44 (estatuto -> asign .)
    MEDIAN          reduce using rule 44 (estatuto -> asign .)
    MODE            reduce using rule 44 (estatuto -> asign .)
    STDV            reduce using rule 44 (estatuto -> asign .)
    KMEANS          reduce using rule 44 (estatuto -> asign .)
    DERL            reduce using rule 44 (estatuto -> asign .)
    DBERN           reduce using rule 44 (estatuto -> asign .)
    DPOI            reduce using rule 44 (estatuto -> asign .)
    TRANSPOSE       reduce using rule 44 (estatuto -> asign .)
    INVERSE         reduce using rule 44 (estatuto -> asign .)
    ROTATE          reduce using rule 44 (estatuto -> asign .)
    REF             reduce using rule 44 (estatuto -> asign .)
    RREF            reduce using rule 44 (estatuto -> asign .)
    MONT            reduce using rule 44 (estatuto -> asign .)
    EULER           reduce using rule 44 (estatuto -> asign .)
    DO              reduce using rule 44 (estatuto -> asign .)
    READ            reduce using rule 44 (estatuto -> asign .)
    CBRACKET        reduce using rule 44 (estatuto -> asign .)


state 51

    (45) estatuto -> cond .

    ID              reduce using rule 45 (estatuto -> cond .)
    IF              reduce using rule 45 (estatuto -> cond .)
    PRINT           reduce using rule 45 (estatuto -> cond .)
    PLOT            reduce using rule 45 (estatuto -> cond .)
    COUNT           reduce using rule 45 (estatuto -> cond .)
    COUNTIF         reduce using rule 45 (estatuto -> cond .)
    MEAN            reduce using rule 45 (estatuto -> cond .)
    MEDIAN          reduce using rule 45 (estatuto -> cond .)
    MODE            reduce using rule 45 (estatuto -> cond .)
    STDV            reduce using rule 45 (estatuto -> cond .)
    KMEANS          reduce using rule 45 (estatuto -> cond .)
    DERL            reduce using rule 45 (estatuto -> cond .)
    DBERN           reduce using rule 45 (estatuto -> cond .)
    DPOI            reduce using rule 45 (estatuto -> cond .)
    TRANSPOSE       reduce using rule 45 (estatuto -> cond .)
    INVERSE         reduce using rule 45 (estatuto -> cond .)
    ROTATE          reduce using rule 45 (estatuto -> cond .)
    REF             reduce using rule 45 (estatuto -> cond .)
    RREF            reduce using rule 45 (estatuto -> cond .)
    MONT            reduce using rule 45 (estatuto -> cond .)
    EULER           reduce using rule 45 (estatuto -> cond .)
    DO              reduce using rule 45 (estatuto -> cond .)
    READ            reduce using rule 45 (estatuto -> cond .)
    CBRACKET        reduce using rule 45 (estatuto -> cond .)


state 52

    (46) estatuto -> escrt .

    ID              reduce using rule 46 (estatuto -> escrt .)
    IF              reduce using rule 46 (estatuto -> escrt .)
    PRINT           reduce using rule 46 (estatuto -> escrt .)
    PLOT            reduce using rule 46 (estatuto -> escrt .)
    COUNT           reduce using rule 46 (estatuto -> escrt .)
    COUNTIF         reduce using rule 46 (estatuto -> escrt .)
    MEAN            reduce using rule 46 (estatuto -> escrt .)
    MEDIAN          reduce using rule 46 (estatuto -> escrt .)
    MODE            reduce using rule 46 (estatuto -> escrt .)
    STDV            reduce using rule 46 (estatuto -> escrt .)
    KMEANS          reduce using rule 46 (estatuto -> escrt .)
    DERL            reduce using rule 46 (estatuto -> escrt .)
    DBERN           reduce using rule 46 (estatuto -> escrt .)
    DPOI            reduce using rule 46 (estatuto -> escrt .)
    TRANSPOSE       reduce using rule 46 (estatuto -> escrt .)
    INVERSE         reduce using rule 46 (estatuto -> escrt .)
    ROTATE          reduce using rule 46 (estatuto -> escrt .)
    REF             reduce using rule 46 (estatuto -> escrt .)
    RREF            reduce using rule 46 (estatuto -> escrt .)
    MONT            reduce using rule 46 (estatuto -> escrt .)
    EULER           reduce using rule 46 (estatuto -> escrt .)
    DO              reduce using rule 46 (estatuto -> escrt .)
    READ            reduce using rule 46 (estatuto -> escrt .)
    CBRACKET        reduce using rule 46 (estatuto -> escrt .)


state 53

    (47) estatuto -> plot .

    ID              reduce using rule 47 (estatuto -> plot .)
    IF              reduce using rule 47 (estatuto -> plot .)
    PRINT           reduce using rule 47 (estatuto -> plot .)
    PLOT            reduce using rule 47 (estatuto -> plot .)
    COUNT           reduce using rule 47 (estatuto -> plot .)
    COUNTIF         reduce using rule 47 (estatuto -> plot .)
    MEAN            reduce using rule 47 (estatuto -> plot .)
    MEDIAN          reduce using rule 47 (estatuto -> plot .)
    MODE            reduce using rule 47 (estatuto -> plot .)
    STDV            reduce using rule 47 (estatuto -> plot .)
    KMEANS          reduce using rule 47 (estatuto -> plot .)
    DERL            reduce using rule 47 (estatuto -> plot .)
    DBERN           reduce using rule 47 (estatuto -> plot .)
    DPOI            reduce using rule 47 (estatuto -> plot .)
    TRANSPOSE       reduce using rule 47 (estatuto -> plot .)
    INVERSE         reduce using rule 47 (estatuto -> plot .)
    ROTATE          reduce using rule 47 (estatuto -> plot .)
    REF             reduce using rule 47 (estatuto -> plot .)
    RREF            reduce using rule 47 (estatuto -> plot .)
    MONT            reduce using rule 47 (estatuto -> plot .)
    EULER           reduce using rule 47 (estatuto -> plot .)
    DO              reduce using rule 47 (estatuto -> plot .)
    READ            reduce using rule 47 (estatuto -> plot .)
    CBRACKET        reduce using rule 47 (estatuto -> plot .)


state 54

    (48) estatuto -> count .

    ID              reduce using rule 48 (estatuto -> count .)
    IF              reduce using rule 48 (estatuto -> count .)
    PRINT           reduce using rule 48 (estatuto -> count .)
    PLOT            reduce using rule 48 (estatuto -> count .)
    COUNT           reduce using rule 48 (estatuto -> count .)
    COUNTIF         reduce using rule 48 (estatuto -> count .)
    MEAN            reduce using rule 48 (estatuto -> count .)
    MEDIAN          reduce using rule 48 (estatuto -> count .)
    MODE            reduce using rule 48 (estatuto -> count .)
    STDV            reduce using rule 48 (estatuto -> count .)
    KMEANS          reduce using rule 48 (estatuto -> count .)
    DERL            reduce using rule 48 (estatuto -> count .)
    DBERN           reduce using rule 48 (estatuto -> count .)
    DPOI            reduce using rule 48 (estatuto -> count .)
    TRANSPOSE       reduce using rule 48 (estatuto -> count .)
    INVERSE         reduce using rule 48 (estatuto -> count .)
    ROTATE          reduce using rule 48 (estatuto -> count .)
    REF             reduce using rule 48 (estatuto -> count .)
    RREF            reduce using rule 48 (estatuto -> count .)
    MONT            reduce using rule 48 (estatuto -> count .)
    EULER           reduce using rule 48 (estatuto -> count .)
    DO              reduce using rule 48 (estatuto -> count .)
    READ            reduce using rule 48 (estatuto -> count .)
    CBRACKET        reduce using rule 48 (estatuto -> count .)


state 55

    (49) estatuto -> countif .

    ID              reduce using rule 49 (estatuto -> countif .)
    IF              reduce using rule 49 (estatuto -> countif .)
    PRINT           reduce using rule 49 (estatuto -> countif .)
    PLOT            reduce using rule 49 (estatuto -> countif .)
    COUNT           reduce using rule 49 (estatuto -> countif .)
    COUNTIF         reduce using rule 49 (estatuto -> countif .)
    MEAN            reduce using rule 49 (estatuto -> countif .)
    MEDIAN          reduce using rule 49 (estatuto -> countif .)
    MODE            reduce using rule 49 (estatuto -> countif .)
    STDV            reduce using rule 49 (estatuto -> countif .)
    KMEANS          reduce using rule 49 (estatuto -> countif .)
    DERL            reduce using rule 49 (estatuto -> countif .)
    DBERN           reduce using rule 49 (estatuto -> countif .)
    DPOI            reduce using rule 49 (estatuto -> countif .)
    TRANSPOSE       reduce using rule 49 (estatuto -> countif .)
    INVERSE         reduce using rule 49 (estatuto -> countif .)
    ROTATE          reduce using rule 49 (estatuto -> countif .)
    REF             reduce using rule 49 (estatuto -> countif .)
    RREF            reduce using rule 49 (estatuto -> countif .)
    MONT            reduce using rule 49 (estatuto -> countif .)
    EULER           reduce using rule 49 (estatuto -> countif .)
    DO              reduce using rule 49 (estatuto -> countif .)
    READ            reduce using rule 49 (estatuto -> countif .)
    CBRACKET        reduce using rule 49 (estatuto -> countif .)


state 56

    (50) estatuto -> metodos .

    ID              reduce using rule 50 (estatuto -> metodos .)
    IF              reduce using rule 50 (estatuto -> metodos .)
    PRINT           reduce using rule 50 (estatuto -> metodos .)
    PLOT            reduce using rule 50 (estatuto -> metodos .)
    COUNT           reduce using rule 50 (estatuto -> metodos .)
    COUNTIF         reduce using rule 50 (estatuto -> metodos .)
    MEAN            reduce using rule 50 (estatuto -> metodos .)
    MEDIAN          reduce using rule 50 (estatuto -> metodos .)
    MODE            reduce using rule 50 (estatuto -> metodos .)
    STDV            reduce using rule 50 (estatuto -> metodos .)
    KMEANS          reduce using rule 50 (estatuto -> metodos .)
    DERL            reduce using rule 50 (estatuto -> metodos .)
    DBERN           reduce using rule 50 (estatuto -> metodos .)
    DPOI            reduce using rule 50 (estatuto -> metodos .)
    TRANSPOSE       reduce using rule 50 (estatuto -> metodos .)
    INVERSE         reduce using rule 50 (estatuto -> metodos .)
    ROTATE          reduce using rule 50 (estatuto -> metodos .)
    REF             reduce using rule 50 (estatuto -> metodos .)
    RREF            reduce using rule 50 (estatuto -> metodos .)
    MONT            reduce using rule 50 (estatuto -> metodos .)
    EULER           reduce using rule 50 (estatuto -> metodos .)
    DO              reduce using rule 50 (estatuto -> metodos .)
    READ            reduce using rule 50 (estatuto -> metodos .)
    CBRACKET        reduce using rule 50 (estatuto -> metodos .)


state 57

    (51) estatuto -> dwhile .

    ID              reduce using rule 51 (estatuto -> dwhile .)
    IF              reduce using rule 51 (estatuto -> dwhile .)
    PRINT           reduce using rule 51 (estatuto -> dwhile .)
    PLOT            reduce using rule 51 (estatuto -> dwhile .)
    COUNT           reduce using rule 51 (estatuto -> dwhile .)
    COUNTIF         reduce using rule 51 (estatuto -> dwhile .)
    MEAN            reduce using rule 51 (estatuto -> dwhile .)
    MEDIAN          reduce using rule 51 (estatuto -> dwhile .)
    MODE            reduce using rule 51 (estatuto -> dwhile .)
    STDV            reduce using rule 51 (estatuto -> dwhile .)
    KMEANS          reduce using rule 51 (estatuto -> dwhile .)
    DERL            reduce using rule 51 (estatuto -> dwhile .)
    DBERN           reduce using rule 51 (estatuto -> dwhile .)
    DPOI            reduce using rule 51 (estatuto -> dwhile .)
    TRANSPOSE       reduce using rule 51 (estatuto -> dwhile .)
    INVERSE         reduce using rule 51 (estatuto -> dwhile .)
    ROTATE          reduce using rule 51 (estatuto -> dwhile .)
    REF             reduce using rule 51 (estatuto -> dwhile .)
    RREF            reduce using rule 51 (estatuto -> dwhile .)
    MONT            reduce using rule 51 (estatuto -> dwhile .)
    EULER           reduce using rule 51 (estatuto -> dwhile .)
    DO              reduce using rule 51 (estatuto -> dwhile .)
    READ            reduce using rule 51 (estatuto -> dwhile .)
    CBRACKET        reduce using rule 51 (estatuto -> dwhile .)


state 58

    (52) estatuto -> readln .

    ID              reduce using rule 52 (estatuto -> readln .)
    IF              reduce using rule 52 (estatuto -> readln .)
    PRINT           reduce using rule 52 (estatuto -> readln .)
    PLOT            reduce using rule 52 (estatuto -> readln .)
    COUNT           reduce using rule 52 (estatuto -> readln .)
    COUNTIF         reduce using rule 52 (estatuto -> readln .)
    MEAN            reduce using rule 52 (estatuto -> readln .)
    MEDIAN          reduce using rule 52 (estatuto -> readln .)
    MODE            reduce using rule 52 (estatuto -> readln .)
    STDV            reduce using rule 52 (estatuto -> readln .)
    KMEANS          reduce using rule 52 (estatuto -> readln .)
    DERL            reduce using rule 52 (estatuto -> readln .)
    DBERN           reduce using rule 52 (estatuto -> readln .)
    DPOI            reduce using rule 52 (estatuto -> readln .)
    TRANSPOSE       reduce using rule 52 (estatuto -> readln .)
    INVERSE         reduce using rule 52 (estatuto -> readln .)
    ROTATE          reduce using rule 52 (estatuto -> readln .)
    REF             reduce using rule 52 (estatuto -> readln .)
    RREF            reduce using rule 52 (estatuto -> readln .)
    MONT            reduce using rule 52 (estatuto -> readln .)
    EULER           reduce using rule 52 (estatuto -> readln .)
    DO              reduce using rule 52 (estatuto -> readln .)
    READ            reduce using rule 52 (estatuto -> readln .)
    CBRACKET        reduce using rule 52 (estatuto -> readln .)


state 59

    (53) estatuto -> funccall .

    ID              reduce using rule 53 (estatuto -> funccall .)
    IF              reduce using rule 53 (estatuto -> funccall .)
    PRINT           reduce using rule 53 (estatuto -> funccall .)
    PLOT            reduce using rule 53 (estatuto -> funccall .)
    COUNT           reduce using rule 53 (estatuto -> funccall .)
    COUNTIF         reduce using rule 53 (estatuto -> funccall .)
    MEAN            reduce using rule 53 (estatuto -> funccall .)
    MEDIAN          reduce using rule 53 (estatuto -> funccall .)
    MODE            reduce using rule 53 (estatuto -> funccall .)
    STDV            reduce using rule 53 (estatuto -> funccall .)
    KMEANS          reduce using rule 53 (estatuto -> funccall .)
    DERL            reduce using rule 53 (estatuto -> funccall .)
    DBERN           reduce using rule 53 (estatuto -> funccall .)
    DPOI            reduce using rule 53 (estatuto -> funccall .)
    TRANSPOSE       reduce using rule 53 (estatuto -> funccall .)
    INVERSE         reduce using rule 53 (estatuto -> funccall .)
    ROTATE          reduce using rule 53 (estatuto -> funccall .)
    REF             reduce using rule 53 (estatuto -> funccall .)
    RREF            reduce using rule 53 (estatuto -> funccall .)
    MONT            reduce using rule 53 (estatuto -> funccall .)
    EULER           reduce using rule 53 (estatuto -> funccall .)
    DO              reduce using rule 53 (estatuto -> funccall .)
    READ            reduce using rule 53 (estatuto -> funccall .)
    CBRACKET        reduce using rule 53 (estatuto -> funccall .)


state 60

    (54) asign -> ID . EQUALS expresion SCOLON
    (55) asign -> ID . EQUALS ID SCOLON
    (56) asign -> ID . EQUALS ID asign2 SCOLON
    (57) asign -> ID . asign2 EQUALS ID SCOLON
    (58) asign -> ID . asign2 EQUALS expresion SCOLON
    (59) asign -> ID . asign2 EQUALS ID asign2 SCOLON
    (24) funccall -> ID . OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID . OPAREN fcn1 ID fcn2 funccall2 CPAREN
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

    EQUALS          shift and go to state 102
    OPAREN          shift and go to state 104
    LCOR            shift and go to state 86

    asign2                         shift and go to state 103

state 61

    (77) cond -> IF . OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> IF . OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    OPAREN          shift and go to state 105


state 62

    (65) escrt -> PRINT . OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> PRINT . OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> PRINT . OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> PRINT . OPAREN STRING escrt2 CPAREN en2 SCOLON

    OPAREN          shift and go to state 106


state 63

    (88) plot -> PLOT . OPAREN xyfunc CPAREN SCOLON
    (89) plot -> PLOT . OPAREN plot2 CPAREN SCOLON

    OPAREN          shift and go to state 107


state 64

    (86) count -> COUNT . OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON

    OPAREN          shift and go to state 108


state 65

    (87) countif -> COUNTIF . OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    OPAREN          shift and go to state 109


state 66

    (121) metodos -> MEAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 110


state 67

    (122) metodos -> MEDIAN . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 111


state 68

    (123) metodos -> MODE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 112


state 69

    (124) metodos -> STDV . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 113


state 70

    (125) metodos -> KMEANS . OPAREN varcte COMMA mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 114


state 71

    (126) metodos -> DERL . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 115


state 72

    (127) metodos -> DBERN . OPAREN expfunc CPAREN SCOLON

    OPAREN          shift and go to state 116


state 73

    (128) metodos -> DPOI . OPAREN expfunc2 CPAREN SCOLON

    OPAREN          shift and go to state 117


state 74

    (129) metodos -> TRANSPOSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 118


state 75

    (130) metodos -> INVERSE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 119


state 76

    (131) metodos -> ROTATE . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 120


state 77

    (132) metodos -> REF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 121


state 78

    (133) metodos -> RREF . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 122


state 79

    (134) metodos -> MONT . OPAREN mmmfunc CPAREN SCOLON

    OPAREN          shift and go to state 123


state 80

    (135) metodos -> EULER . OPAREN CPAREN SCOLON

    OPAREN          shift and go to state 124


state 81

    (111) dwhile -> DO . wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (112) wn1 -> . empty
    (148) empty -> .

    OBRACKET        reduce using rule 148 (empty -> .)

    wn1                            shift and go to state 125
    empty                          shift and go to state 126

state 82

    (119) readln -> READ . OPAREN ID rn1 CPAREN SCOLON

    OPAREN          shift and go to state 127


state 83

    (19) modules -> FUNC ID COLON tipo . mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (20) mn1 -> . empty
    (148) empty -> .

    OPAREN          reduce using rule 148 (empty -> .)

    mn1                            shift and go to state 128
    empty                          shift and go to state 129

state 84

    (11) vars1 -> ID COLON tipo SCOLON . lugstat2
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (148) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 148 (empty -> .)
    OBRACKET        reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)

    lugstat2                       shift and go to state 130
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 85

    (107) varcte -> ID asign2 .

    RCOR            reduce using rule 107 (varcte -> ID asign2 .)
    MULT            reduce using rule 107 (varcte -> ID asign2 .)
    DIV             reduce using rule 107 (varcte -> ID asign2 .)
    PLUS            reduce using rule 107 (varcte -> ID asign2 .)
    MINUS           reduce using rule 107 (varcte -> ID asign2 .)
    RELOP           reduce using rule 107 (varcte -> ID asign2 .)
    CPAREN          reduce using rule 107 (varcte -> ID asign2 .)
    SCOLON          reduce using rule 107 (varcte -> ID asign2 .)
    COMMA           reduce using rule 107 (varcte -> ID asign2 .)
    ID              reduce using rule 107 (varcte -> ID asign2 .)
    AND             reduce using rule 107 (varcte -> ID asign2 .)
    OR              reduce using rule 107 (varcte -> ID asign2 .)
    OPAREN          reduce using rule 107 (varcte -> ID asign2 .)
    NUMERIC         reduce using rule 107 (varcte -> ID asign2 .)
    NUMBER          reduce using rule 107 (varcte -> ID asign2 .)
    LOGICAL         reduce using rule 107 (varcte -> ID asign2 .)


state 86

    (60) asign2 -> LCOR . expresion RCOR asign3
    (61) asign2 -> LCOR . varcte RCOR asign3
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 37
    varcte                         shift and go to state 38
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 87

    (12) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR . COLON tipo SCOLON
    (14) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR . LCOR NUMBER RCOR COLON tipo SCOLON

    COLON           shift and go to state 132
    LCOR            shift and go to state 131


state 88

    (60) asign2 -> LCOR expresion RCOR . asign3
    (62) asign3 -> . LCOR expresion RCOR
    (63) asign3 -> . LCOR varcte RCOR
    (64) asign3 -> . empty
    (148) empty -> .

    LCOR            shift and go to state 133
    COLON           reduce using rule 148 (empty -> .)
    COMMA           reduce using rule 148 (empty -> .)
    RCOR            reduce using rule 148 (empty -> .)
    MULT            reduce using rule 148 (empty -> .)
    DIV             reduce using rule 148 (empty -> .)
    PLUS            reduce using rule 148 (empty -> .)
    MINUS           reduce using rule 148 (empty -> .)
    RELOP           reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)
    SCOLON          reduce using rule 148 (empty -> .)
    ID              reduce using rule 148 (empty -> .)
    AND             reduce using rule 148 (empty -> .)
    OR              reduce using rule 148 (empty -> .)
    OPAREN          reduce using rule 148 (empty -> .)
    NUMERIC         reduce using rule 148 (empty -> .)
    NUMBER          reduce using rule 148 (empty -> .)
    LOGICAL         reduce using rule 148 (empty -> .)
    EQUALS          reduce using rule 148 (empty -> .)

    asign3                         shift and go to state 134
    empty                          shift and go to state 135

state 89

    (97) expresion -> expresion RELOP . exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 136
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 90

    (61) asign2 -> LCOR varcte RCOR . asign3
    (62) asign3 -> . LCOR expresion RCOR
    (63) asign3 -> . LCOR varcte RCOR
    (64) asign3 -> . empty
    (148) empty -> .

    LCOR            shift and go to state 133
    COLON           reduce using rule 148 (empty -> .)
    COMMA           reduce using rule 148 (empty -> .)
    RCOR            reduce using rule 148 (empty -> .)
    MULT            reduce using rule 148 (empty -> .)
    DIV             reduce using rule 148 (empty -> .)
    PLUS            reduce using rule 148 (empty -> .)
    MINUS           reduce using rule 148 (empty -> .)
    RELOP           reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)
    SCOLON          reduce using rule 148 (empty -> .)
    ID              reduce using rule 148 (empty -> .)
    AND             reduce using rule 148 (empty -> .)
    OR              reduce using rule 148 (empty -> .)
    OPAREN          reduce using rule 148 (empty -> .)
    NUMERIC         reduce using rule 148 (empty -> .)
    NUMBER          reduce using rule 148 (empty -> .)
    LOGICAL         reduce using rule 148 (empty -> .)
    EQUALS          reduce using rule 148 (empty -> .)

    asign3                         shift and go to state 137
    empty                          shift and go to state 135

state 91

    (99) exp -> termino PLUS . exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 138
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 92

    (100) exp -> termino MINUS . exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    termino                        shift and go to state 42
    exp                            shift and go to state 139
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 93

    (102) termino -> factor MULT . termino
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 140
    varcte                         shift and go to state 96

state 94

    (103) termino -> factor DIV . termino
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    factor                         shift and go to state 43
    termino                        shift and go to state 141
    varcte                         shift and go to state 96

state 95

    (104) factor -> OPAREN expresion . CPAREN
    (97) expresion -> expresion . RELOP exp

    CPAREN          shift and go to state 142
    RELOP           shift and go to state 89


state 96

    (105) factor -> varcte .

    MULT            reduce using rule 105 (factor -> varcte .)
    DIV             reduce using rule 105 (factor -> varcte .)
    PLUS            reduce using rule 105 (factor -> varcte .)
    MINUS           reduce using rule 105 (factor -> varcte .)
    CPAREN          reduce using rule 105 (factor -> varcte .)
    RELOP           reduce using rule 105 (factor -> varcte .)
    RCOR            reduce using rule 105 (factor -> varcte .)
    SCOLON          reduce using rule 105 (factor -> varcte .)
    COMMA           reduce using rule 105 (factor -> varcte .)
    ID              reduce using rule 105 (factor -> varcte .)
    AND             reduce using rule 105 (factor -> varcte .)
    OR              reduce using rule 105 (factor -> varcte .)
    OPAREN          reduce using rule 105 (factor -> varcte .)
    NUMERIC         reduce using rule 105 (factor -> varcte .)
    NUMBER          reduce using rule 105 (factor -> varcte .)
    LOGICAL         reduce using rule 105 (factor -> varcte .)


state 97

    (109) varcte -> NUMBER .

    MULT            reduce using rule 109 (varcte -> NUMBER .)
    DIV             reduce using rule 109 (varcte -> NUMBER .)
    PLUS            reduce using rule 109 (varcte -> NUMBER .)
    MINUS           reduce using rule 109 (varcte -> NUMBER .)
    CPAREN          reduce using rule 109 (varcte -> NUMBER .)
    RELOP           reduce using rule 109 (varcte -> NUMBER .)
    RCOR            reduce using rule 109 (varcte -> NUMBER .)
    SCOLON          reduce using rule 109 (varcte -> NUMBER .)
    COMMA           reduce using rule 109 (varcte -> NUMBER .)
    ID              reduce using rule 109 (varcte -> NUMBER .)
    AND             reduce using rule 109 (varcte -> NUMBER .)
    OR              reduce using rule 109 (varcte -> NUMBER .)
    OPAREN          reduce using rule 109 (varcte -> NUMBER .)
    NUMERIC         reduce using rule 109 (varcte -> NUMBER .)
    NUMBER          reduce using rule 109 (varcte -> NUMBER .)
    LOGICAL         reduce using rule 109 (varcte -> NUMBER .)


state 98

    (16) vars1 -> ID asign2 COLON tipo . SCOLON

    SCOLON          shift and go to state 143


state 99

    (17) vars1 -> ID asign2 COMMA vars1 .

    FUNC            reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    OBRACKET        reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)
    CPAREN          reduce using rule 17 (vars1 -> ID asign2 COMMA vars1 .)


state 100

    (35) block -> OBRACKET block2 CBRACKET .

    $end            reduce using rule 35 (block -> OBRACKET block2 CBRACKET .)


state 101

    (37) block2 -> estatuto block2 .

    CBRACKET        reduce using rule 37 (block2 -> estatuto block2 .)


state 102

    (54) asign -> ID EQUALS . expresion SCOLON
    (55) asign -> ID EQUALS . ID SCOLON
    (56) asign -> ID EQUALS . ID asign2 SCOLON
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 144
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 145
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 103

    (57) asign -> ID asign2 . EQUALS ID SCOLON
    (58) asign -> ID asign2 . EQUALS expresion SCOLON
    (59) asign -> ID asign2 . EQUALS ID asign2 SCOLON

    EQUALS          shift and go to state 146


state 104

    (24) funccall -> ID OPAREN . fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN . fcn1 ID fcn2 funccall2 CPAREN
    (26) fcn1 -> . empty
    (148) empty -> .

    ID              reduce using rule 148 (empty -> .)
    OPAREN          reduce using rule 148 (empty -> .)
    NUMERIC         reduce using rule 148 (empty -> .)
    NUMBER          reduce using rule 148 (empty -> .)
    LOGICAL         reduce using rule 148 (empty -> .)

    fcn1                           shift and go to state 147
    empty                          shift and go to state 148

state 105

    (77) cond -> IF OPAREN . expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> IF OPAREN . expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 149
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 106

    (65) escrt -> PRINT OPAREN . ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> PRINT OPAREN . expresion en1 CPAREN SCOLON
    (67) escrt -> PRINT OPAREN . STRING CPAREN en2 SCOLON
    (68) escrt -> PRINT OPAREN . STRING escrt2 CPAREN en2 SCOLON
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 150
    STRING          shift and go to state 152
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 151
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 107

    (88) plot -> PLOT OPAREN . xyfunc CPAREN SCOLON
    (89) plot -> PLOT OPAREN . plot2 CPAREN SCOLON
    (93) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (94) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (95) xyfunc -> . empty
    (90) plot2 -> . LCOR varcte COMMA varcte RCOR
    (91) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (92) plot2 -> . empty
    (148) empty -> .

    FX              shift and go to state 155
    FY              shift and go to state 156
    LCOR            shift and go to state 158
    CPAREN          reduce using rule 148 (empty -> .)

    xyfunc                         shift and go to state 153
    plot2                          shift and go to state 154
    empty                          shift and go to state 157

state 108

    (86) count -> COUNT OPAREN . ID COMMA varcte COMMA varcte CPAREN SCOLON

    ID              shift and go to state 159


state 109

    (87) countif -> COUNTIF OPAREN . ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    ID              shift and go to state 160


state 110

    (121) metodos -> MEAN OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 161
    empty                          shift and go to state 164

state 111

    (122) metodos -> MEDIAN OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 165
    empty                          shift and go to state 164

state 112

    (123) metodos -> MODE OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 166
    empty                          shift and go to state 164

state 113

    (124) metodos -> STDV OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 167
    empty                          shift and go to state 164

state 114

    (125) metodos -> KMEANS OPAREN . varcte COMMA mmmfunc CPAREN SCOLON
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 168

state 115

    (126) metodos -> DERL OPAREN . expfunc CPAREN SCOLON
    (136) expfunc -> . ID COMMA ID COMMA ID
    (137) expfunc -> . varcte COMMA varcte COMMA varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 170
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 169
    varcte                         shift and go to state 171

state 116

    (127) metodos -> DBERN OPAREN . expfunc CPAREN SCOLON
    (136) expfunc -> . ID COMMA ID COMMA ID
    (137) expfunc -> . varcte COMMA varcte COMMA varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 170
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expfunc                        shift and go to state 172
    varcte                         shift and go to state 171

state 117

    (128) metodos -> DPOI OPAREN . expfunc2 CPAREN SCOLON
    (138) expfunc2 -> . ID COMMA ID
    (139) expfunc2 -> . varcte COMMA varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 174
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expfunc2                       shift and go to state 173
    varcte                         shift and go to state 175

state 118

    (129) metodos -> TRANSPOSE OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 176
    empty                          shift and go to state 164

state 119

    (130) metodos -> INVERSE OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 177
    empty                          shift and go to state 164

state 120

    (131) metodos -> ROTATE OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 178
    empty                          shift and go to state 164

state 121

    (132) metodos -> REF OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 179
    empty                          shift and go to state 164

state 122

    (133) metodos -> RREF OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 180
    empty                          shift and go to state 164

state 123

    (134) metodos -> MONT OPAREN . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 181
    empty                          shift and go to state 164

state 124

    (135) metodos -> EULER OPAREN . CPAREN SCOLON

    CPAREN          shift and go to state 182


state 125

    (111) dwhile -> DO wn1 . wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (114) wblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 184

    wblock                         shift and go to state 183

state 126

    (112) wn1 -> empty .

    OBRACKET        reduce using rule 112 (wn1 -> empty .)


state 127

    (119) readln -> READ OPAREN . ID rn1 CPAREN SCOLON

    ID              shift and go to state 185


state 128

    (19) modules -> FUNC ID COLON tipo mn1 . OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7

    OPAREN          shift and go to state 186


state 129

    (20) mn1 -> empty .

    OPAREN          reduce using rule 20 (mn1 -> empty .)


state 130

    (11) vars1 -> ID COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 11 (vars1 -> ID COLON tipo SCOLON lugstat2 .)


state 131

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR . NUMBER RCOR COLON tipo SCOLON

    NUMBER          shift and go to state 187


state 132

    (12) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 188

state 133

    (62) asign3 -> LCOR . expresion RCOR
    (63) asign3 -> LCOR . varcte RCOR
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    OPAREN          shift and go to state 44

    expresion                      shift and go to state 189
    varcte                         shift and go to state 190
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 134

    (60) asign2 -> LCOR expresion RCOR asign3 .

    COLON           reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    COMMA           reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    RCOR            reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    MULT            reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    DIV             reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    PLUS            reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    MINUS           reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    RELOP           reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    CPAREN          reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    SCOLON          reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    ID              reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    AND             reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    OR              reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    OPAREN          reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMERIC         reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    NUMBER          reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    LOGICAL         reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)
    EQUALS          reduce using rule 60 (asign2 -> LCOR expresion RCOR asign3 .)


state 135

    (64) asign3 -> empty .

    COLON           reduce using rule 64 (asign3 -> empty .)
    COMMA           reduce using rule 64 (asign3 -> empty .)
    RCOR            reduce using rule 64 (asign3 -> empty .)
    MULT            reduce using rule 64 (asign3 -> empty .)
    DIV             reduce using rule 64 (asign3 -> empty .)
    PLUS            reduce using rule 64 (asign3 -> empty .)
    MINUS           reduce using rule 64 (asign3 -> empty .)
    RELOP           reduce using rule 64 (asign3 -> empty .)
    CPAREN          reduce using rule 64 (asign3 -> empty .)
    SCOLON          reduce using rule 64 (asign3 -> empty .)
    ID              reduce using rule 64 (asign3 -> empty .)
    AND             reduce using rule 64 (asign3 -> empty .)
    OR              reduce using rule 64 (asign3 -> empty .)
    OPAREN          reduce using rule 64 (asign3 -> empty .)
    NUMERIC         reduce using rule 64 (asign3 -> empty .)
    NUMBER          reduce using rule 64 (asign3 -> empty .)
    LOGICAL         reduce using rule 64 (asign3 -> empty .)
    EQUALS          reduce using rule 64 (asign3 -> empty .)


state 136

    (97) expresion -> expresion RELOP exp .

    RCOR            reduce using rule 97 (expresion -> expresion RELOP exp .)
    RELOP           reduce using rule 97 (expresion -> expresion RELOP exp .)
    CPAREN          reduce using rule 97 (expresion -> expresion RELOP exp .)
    SCOLON          reduce using rule 97 (expresion -> expresion RELOP exp .)
    COMMA           reduce using rule 97 (expresion -> expresion RELOP exp .)
    ID              reduce using rule 97 (expresion -> expresion RELOP exp .)
    AND             reduce using rule 97 (expresion -> expresion RELOP exp .)
    OR              reduce using rule 97 (expresion -> expresion RELOP exp .)
    OPAREN          reduce using rule 97 (expresion -> expresion RELOP exp .)
    NUMERIC         reduce using rule 97 (expresion -> expresion RELOP exp .)
    NUMBER          reduce using rule 97 (expresion -> expresion RELOP exp .)
    LOGICAL         reduce using rule 97 (expresion -> expresion RELOP exp .)


state 137

    (61) asign2 -> LCOR varcte RCOR asign3 .

    COLON           reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    COMMA           reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    RCOR            reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    MULT            reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    DIV             reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    PLUS            reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    MINUS           reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    RELOP           reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    CPAREN          reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    SCOLON          reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    ID              reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    AND             reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    OR              reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    OPAREN          reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMERIC         reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    NUMBER          reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    LOGICAL         reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)
    EQUALS          reduce using rule 61 (asign2 -> LCOR varcte RCOR asign3 .)


state 138

    (99) exp -> termino PLUS exp .

    RCOR            reduce using rule 99 (exp -> termino PLUS exp .)
    RELOP           reduce using rule 99 (exp -> termino PLUS exp .)
    CPAREN          reduce using rule 99 (exp -> termino PLUS exp .)
    SCOLON          reduce using rule 99 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 99 (exp -> termino PLUS exp .)
    ID              reduce using rule 99 (exp -> termino PLUS exp .)
    AND             reduce using rule 99 (exp -> termino PLUS exp .)
    OR              reduce using rule 99 (exp -> termino PLUS exp .)
    OPAREN          reduce using rule 99 (exp -> termino PLUS exp .)
    NUMERIC         reduce using rule 99 (exp -> termino PLUS exp .)
    NUMBER          reduce using rule 99 (exp -> termino PLUS exp .)
    LOGICAL         reduce using rule 99 (exp -> termino PLUS exp .)


state 139

    (100) exp -> termino MINUS exp .

    RCOR            reduce using rule 100 (exp -> termino MINUS exp .)
    RELOP           reduce using rule 100 (exp -> termino MINUS exp .)
    CPAREN          reduce using rule 100 (exp -> termino MINUS exp .)
    SCOLON          reduce using rule 100 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 100 (exp -> termino MINUS exp .)
    ID              reduce using rule 100 (exp -> termino MINUS exp .)
    AND             reduce using rule 100 (exp -> termino MINUS exp .)
    OR              reduce using rule 100 (exp -> termino MINUS exp .)
    OPAREN          reduce using rule 100 (exp -> termino MINUS exp .)
    NUMERIC         reduce using rule 100 (exp -> termino MINUS exp .)
    NUMBER          reduce using rule 100 (exp -> termino MINUS exp .)
    LOGICAL         reduce using rule 100 (exp -> termino MINUS exp .)


state 140

    (102) termino -> factor MULT termino .

    PLUS            reduce using rule 102 (termino -> factor MULT termino .)
    MINUS           reduce using rule 102 (termino -> factor MULT termino .)
    RCOR            reduce using rule 102 (termino -> factor MULT termino .)
    RELOP           reduce using rule 102 (termino -> factor MULT termino .)
    CPAREN          reduce using rule 102 (termino -> factor MULT termino .)
    SCOLON          reduce using rule 102 (termino -> factor MULT termino .)
    COMMA           reduce using rule 102 (termino -> factor MULT termino .)
    ID              reduce using rule 102 (termino -> factor MULT termino .)
    AND             reduce using rule 102 (termino -> factor MULT termino .)
    OR              reduce using rule 102 (termino -> factor MULT termino .)
    OPAREN          reduce using rule 102 (termino -> factor MULT termino .)
    NUMERIC         reduce using rule 102 (termino -> factor MULT termino .)
    NUMBER          reduce using rule 102 (termino -> factor MULT termino .)
    LOGICAL         reduce using rule 102 (termino -> factor MULT termino .)


state 141

    (103) termino -> factor DIV termino .

    PLUS            reduce using rule 103 (termino -> factor DIV termino .)
    MINUS           reduce using rule 103 (termino -> factor DIV termino .)
    RCOR            reduce using rule 103 (termino -> factor DIV termino .)
    RELOP           reduce using rule 103 (termino -> factor DIV termino .)
    CPAREN          reduce using rule 103 (termino -> factor DIV termino .)
    SCOLON          reduce using rule 103 (termino -> factor DIV termino .)
    COMMA           reduce using rule 103 (termino -> factor DIV termino .)
    ID              reduce using rule 103 (termino -> factor DIV termino .)
    AND             reduce using rule 103 (termino -> factor DIV termino .)
    OR              reduce using rule 103 (termino -> factor DIV termino .)
    OPAREN          reduce using rule 103 (termino -> factor DIV termino .)
    NUMERIC         reduce using rule 103 (termino -> factor DIV termino .)
    NUMBER          reduce using rule 103 (termino -> factor DIV termino .)
    LOGICAL         reduce using rule 103 (termino -> factor DIV termino .)


state 142

    (104) factor -> OPAREN expresion CPAREN .

    MULT            reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    DIV             reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    PLUS            reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    MINUS           reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    RCOR            reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    RELOP           reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    CPAREN          reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    SCOLON          reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    COMMA           reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    ID              reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    AND             reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    OR              reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    OPAREN          reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    NUMERIC         reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    NUMBER          reduce using rule 104 (factor -> OPAREN expresion CPAREN .)
    LOGICAL         reduce using rule 104 (factor -> OPAREN expresion CPAREN .)


state 143

    (16) vars1 -> ID asign2 COLON tipo SCOLON .

    FUNC            reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    OBRACKET        reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)
    CPAREN          reduce using rule 16 (vars1 -> ID asign2 COLON tipo SCOLON .)


state 144

    (55) asign -> ID EQUALS ID . SCOLON
    (56) asign -> ID EQUALS ID . asign2 SCOLON
    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 191
    MULT            reduce using rule 106 (varcte -> ID .)
    DIV             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    RELOP           reduce using rule 106 (varcte -> ID .)
    LCOR            shift and go to state 86

  ! SCOLON          [ reduce using rule 106 (varcte -> ID .) ]

    asign2                         shift and go to state 192

state 145

    (54) asign -> ID EQUALS expresion . SCOLON
    (97) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 193
    RELOP           shift and go to state 89


state 146

    (57) asign -> ID asign2 EQUALS . ID SCOLON
    (58) asign -> ID asign2 EQUALS . expresion SCOLON
    (59) asign -> ID asign2 EQUALS . ID asign2 SCOLON
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 194
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 195
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 147

    (24) funccall -> ID OPAREN fcn1 . expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> ID OPAREN fcn1 . ID fcn2 funccall2 CPAREN
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 196
    OPAREN          shift and go to state 44
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 197
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 148

    (26) fcn1 -> empty .

    ID              reduce using rule 26 (fcn1 -> empty .)
    OPAREN          reduce using rule 26 (fcn1 -> empty .)
    NUMERIC         reduce using rule 26 (fcn1 -> empty .)
    NUMBER          reduce using rule 26 (fcn1 -> empty .)
    LOGICAL         reduce using rule 26 (fcn1 -> empty .)


state 149

    (77) cond -> IF OPAREN expresion . cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> IF OPAREN expresion . cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (97) expresion -> expresion . RELOP exp
    (79) cn1 -> . empty
    (148) empty -> .

    RELOP           shift and go to state 89
    CPAREN          reduce using rule 148 (empty -> .)

    cn1                            shift and go to state 198
    empty                          shift and go to state 199

state 150

    (65) escrt -> PRINT OPAREN ID . en3 escrt2 CPAREN SCOLON
    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (76) en3 -> . empty
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3
    (148) empty -> .

  ! reduce/reduce conflict for CPAREN resolved using rule 106 (varcte -> ID .)
    MULT            reduce using rule 106 (varcte -> ID .)
    DIV             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    RELOP           reduce using rule 106 (varcte -> ID .)
    CPAREN          reduce using rule 106 (varcte -> ID .)
    LCOR            shift and go to state 86
    COMMA           reduce using rule 148 (empty -> .)

  ! CPAREN          [ reduce using rule 148 (empty -> .) ]

    en3                            shift and go to state 200
    asign2                         shift and go to state 85
    empty                          shift and go to state 201

state 151

    (66) escrt -> PRINT OPAREN expresion . en1 CPAREN SCOLON
    (97) expresion -> expresion . RELOP exp
    (74) en1 -> . empty
    (148) empty -> .

    RELOP           shift and go to state 89
    CPAREN          reduce using rule 148 (empty -> .)

    en1                            shift and go to state 202
    empty                          shift and go to state 203

state 152

    (67) escrt -> PRINT OPAREN STRING . CPAREN en2 SCOLON
    (68) escrt -> PRINT OPAREN STRING . escrt2 CPAREN en2 SCOLON
    (69) escrt2 -> . COMMA escrt3
    (70) escrt2 -> . empty
    (148) empty -> .

  ! shift/reduce conflict for CPAREN resolved as shift
    CPAREN          shift and go to state 204
    COMMA           shift and go to state 206

  ! CPAREN          [ reduce using rule 148 (empty -> .) ]

    escrt2                         shift and go to state 205
    empty                          shift and go to state 207

state 153

    (88) plot -> PLOT OPAREN xyfunc . CPAREN SCOLON

    CPAREN          shift and go to state 208


state 154

    (89) plot -> PLOT OPAREN plot2 . CPAREN SCOLON

    CPAREN          shift and go to state 209


state 155

    (93) xyfunc -> FX . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 210


state 156

    (94) xyfunc -> FY . EQUALS exp SCOLON xyfunc

    EQUALS          shift and go to state 211


state 157

    (95) xyfunc -> empty .
    (92) plot2 -> empty .

  ! reduce/reduce conflict for CPAREN resolved using rule 92 (plot2 -> empty .)
    CPAREN          reduce using rule 92 (plot2 -> empty .)

  ! CPAREN          [ reduce using rule 95 (xyfunc -> empty .) ]


state 158

    (90) plot2 -> LCOR . varcte COMMA varcte RCOR
    (91) plot2 -> LCOR . varcte COMMA varcte RCOR COMMA plot2
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 212

state 159

    (86) count -> COUNT OPAREN ID . COMMA varcte COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 213


state 160

    (87) countif -> COUNTIF OPAREN ID . COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 214


state 161

    (121) metodos -> MEAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 215


state 162

    (140) mmmfunc -> LCOR . RCOR
    (141) mmmfunc -> LCOR . mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> LCOR . mmmarray RCOR
    (145) mmmarray -> . varcte
    (146) mmmarray -> . varcte COMMA mmmarray
    (147) mmmarray -> . empty
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL
    (148) empty -> .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 216
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

  ! RCOR            [ reduce using rule 148 (empty -> .) ]

    mmmarray                       shift and go to state 217
    varcte                         shift and go to state 218
    empty                          shift and go to state 219

state 163

    (143) mmmfunc -> ID .

    CPAREN          reduce using rule 143 (mmmfunc -> ID .)


state 164

    (144) mmmfunc -> empty .

    CPAREN          reduce using rule 144 (mmmfunc -> empty .)


state 165

    (122) metodos -> MEDIAN OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 220


state 166

    (123) metodos -> MODE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 221


state 167

    (124) metodos -> STDV OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 222


state 168

    (125) metodos -> KMEANS OPAREN varcte . COMMA mmmfunc CPAREN SCOLON

    COMMA           shift and go to state 223


state 169

    (126) metodos -> DERL OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 224


state 170

    (136) expfunc -> ID . COMMA ID COMMA ID
    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 225
    LCOR            shift and go to state 86

  ! COMMA           [ reduce using rule 106 (varcte -> ID .) ]

    asign2                         shift and go to state 85

state 171

    (137) expfunc -> varcte . COMMA varcte COMMA varcte

    COMMA           shift and go to state 226


state 172

    (127) metodos -> DBERN OPAREN expfunc . CPAREN SCOLON

    CPAREN          shift and go to state 227


state 173

    (128) metodos -> DPOI OPAREN expfunc2 . CPAREN SCOLON

    CPAREN          shift and go to state 228


state 174

    (138) expfunc2 -> ID . COMMA ID
    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 229
    LCOR            shift and go to state 86

  ! COMMA           [ reduce using rule 106 (varcte -> ID .) ]

    asign2                         shift and go to state 85

state 175

    (139) expfunc2 -> varcte . COMMA varcte

    COMMA           shift and go to state 230


state 176

    (129) metodos -> TRANSPOSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 231


state 177

    (130) metodos -> INVERSE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 232


state 178

    (131) metodos -> ROTATE OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 233


state 179

    (132) metodos -> REF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 234


state 180

    (133) metodos -> RREF OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 235


state 181

    (134) metodos -> MONT OPAREN mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 236


state 182

    (135) metodos -> EULER OPAREN CPAREN . SCOLON

    SCOLON          shift and go to state 237


state 183

    (111) dwhile -> DO wn1 wblock . WHILE OPAREN dwhileconds CPAREN wn2 SCOLON

    WHILE           shift and go to state 238


state 184

    (114) wblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (148) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (65) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (88) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (89) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (86) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (87) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (121) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (125) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (126) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (127) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (128) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (129) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . EULER OPAREN CPAREN SCOLON
    (111) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (119) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 148 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    block2                         shift and go to state 239
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 185

    (119) readln -> READ OPAREN ID . rn1 CPAREN SCOLON
    (120) rn1 -> . empty
    (148) empty -> .

    CPAREN          reduce using rule 148 (empty -> .)

    rn1                            shift and go to state 240
    empty                          shift and go to state 241

state 186

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN . modules2 mn2 CPAREN modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (148) empty -> .

    VAR             shift and go to state 10
    CPAREN          reduce using rule 148 (empty -> .)

    modules2                       shift and go to state 242
    vars                           shift and go to state 243
    empty                          shift and go to state 244

state 187

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER . RCOR COLON tipo SCOLON

    RCOR            shift and go to state 245


state 188

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 246


state 189

    (62) asign3 -> LCOR expresion . RCOR
    (97) expresion -> expresion . RELOP exp

    RCOR            shift and go to state 247
    RELOP           shift and go to state 89


state 190

    (63) asign3 -> LCOR varcte . RCOR
    (105) factor -> varcte .

  ! shift/reduce conflict for RCOR resolved as shift
    RCOR            shift and go to state 248
    MULT            reduce using rule 105 (factor -> varcte .)
    DIV             reduce using rule 105 (factor -> varcte .)
    PLUS            reduce using rule 105 (factor -> varcte .)
    MINUS           reduce using rule 105 (factor -> varcte .)
    RELOP           reduce using rule 105 (factor -> varcte .)

  ! RCOR            [ reduce using rule 105 (factor -> varcte .) ]


state 191

    (55) asign -> ID EQUALS ID SCOLON .

    ID              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    IF              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    PRINT           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    PLOT            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    COUNT           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MEAN            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MODE            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    STDV            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    KMEANS          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DERL            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DBERN           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DPOI            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    INVERSE         reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    ROTATE          reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    REF             reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    RREF            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    MONT            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    EULER           reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    DO              reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    READ            reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 55 (asign -> ID EQUALS ID SCOLON .)


state 192

    (56) asign -> ID EQUALS ID asign2 . SCOLON
    (107) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 249
    MULT            reduce using rule 107 (varcte -> ID asign2 .)
    DIV             reduce using rule 107 (varcte -> ID asign2 .)
    PLUS            reduce using rule 107 (varcte -> ID asign2 .)
    MINUS           reduce using rule 107 (varcte -> ID asign2 .)
    RELOP           reduce using rule 107 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 107 (varcte -> ID asign2 .) ]


state 193

    (54) asign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    PRINT           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    PLOT            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    COUNT           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MEAN            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MODE            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    STDV            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DERL            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DBERN           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DPOI            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    REF             reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    RREF            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    MONT            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    EULER           reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    READ            reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 54 (asign -> ID EQUALS expresion SCOLON .)


state 194

    (57) asign -> ID asign2 EQUALS ID . SCOLON
    (59) asign -> ID asign2 EQUALS ID . asign2 SCOLON
    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 251
    MULT            reduce using rule 106 (varcte -> ID .)
    DIV             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    RELOP           reduce using rule 106 (varcte -> ID .)
    LCOR            shift and go to state 86

  ! SCOLON          [ reduce using rule 106 (varcte -> ID .) ]

    asign2                         shift and go to state 250

state 195

    (58) asign -> ID asign2 EQUALS expresion . SCOLON
    (97) expresion -> expresion . RELOP exp

    SCOLON          shift and go to state 252
    RELOP           shift and go to state 89


state 196

    (25) funccall -> ID OPAREN fcn1 ID . fcn2 funccall2 CPAREN
    (106) varcte -> ID .
    (107) varcte -> ID . asign2
    (27) fcn2 -> . empty
    (60) asign2 -> . LCOR expresion RCOR asign3
    (61) asign2 -> . LCOR varcte RCOR asign3
    (148) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 106 (varcte -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 106 (varcte -> ID .)
  ! reduce/reduce conflict for CPAREN resolved using rule 106 (varcte -> ID .)
    MULT            reduce using rule 106 (varcte -> ID .)
    DIV             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    RELOP           reduce using rule 106 (varcte -> ID .)
    COMMA           reduce using rule 106 (varcte -> ID .)
    ID              reduce using rule 106 (varcte -> ID .)
    CPAREN          reduce using rule 106 (varcte -> ID .)
    LCOR            shift and go to state 86

  ! COMMA           [ reduce using rule 148 (empty -> .) ]
  ! ID              [ reduce using rule 148 (empty -> .) ]
  ! CPAREN          [ reduce using rule 148 (empty -> .) ]

    fcn2                           shift and go to state 253
    asign2                         shift and go to state 85
    empty                          shift and go to state 254

state 197

    (24) funccall -> ID OPAREN fcn1 expresion . fcn2 funccall2 CPAREN fcn3
    (97) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (148) empty -> .

    RELOP           shift and go to state 89
    COMMA           reduce using rule 148 (empty -> .)
    ID              reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)

    fcn2                           shift and go to state 255
    empty                          shift and go to state 254

state 198

    (77) cond -> IF OPAREN expresion cn1 . CPAREN ifblock SCOLON cn2
    (78) cond -> IF OPAREN expresion cn1 . CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    CPAREN          shift and go to state 256


state 199

    (79) cn1 -> empty .

    CPAREN          reduce using rule 79 (cn1 -> empty .)


state 200

    (65) escrt -> PRINT OPAREN ID en3 . escrt2 CPAREN SCOLON
    (69) escrt2 -> . COMMA escrt3
    (70) escrt2 -> . empty
    (148) empty -> .

    COMMA           shift and go to state 206
    CPAREN          reduce using rule 148 (empty -> .)

    escrt2                         shift and go to state 257
    empty                          shift and go to state 207

state 201

    (76) en3 -> empty .

    COMMA           reduce using rule 76 (en3 -> empty .)
    CPAREN          reduce using rule 76 (en3 -> empty .)


state 202

    (66) escrt -> PRINT OPAREN expresion en1 . CPAREN SCOLON

    CPAREN          shift and go to state 258


state 203

    (74) en1 -> empty .

    CPAREN          reduce using rule 74 (en1 -> empty .)


state 204

    (67) escrt -> PRINT OPAREN STRING CPAREN . en2 SCOLON
    (75) en2 -> . empty
    (148) empty -> .

    SCOLON          reduce using rule 148 (empty -> .)

    en2                            shift and go to state 259
    empty                          shift and go to state 260

state 205

    (68) escrt -> PRINT OPAREN STRING escrt2 . CPAREN en2 SCOLON

    CPAREN          shift and go to state 261


state 206

    (69) escrt2 -> COMMA . escrt3
    (71) escrt3 -> . ID escrt2
    (72) escrt3 -> . ID
    (73) escrt3 -> . STRING escrt2 escrt2

    ID              shift and go to state 263
    STRING          shift and go to state 264

    escrt3                         shift and go to state 262

state 207

    (70) escrt2 -> empty .

    CPAREN          reduce using rule 70 (escrt2 -> empty .)
    COMMA           reduce using rule 70 (escrt2 -> empty .)


state 208

    (88) plot -> PLOT OPAREN xyfunc CPAREN . SCOLON

    SCOLON          shift and go to state 265


state 209

    (89) plot -> PLOT OPAREN plot2 CPAREN . SCOLON

    SCOLON          shift and go to state 266


state 210

    (93) xyfunc -> FX EQUALS . exp SCOLON xyfunc
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 267
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 211

    (94) xyfunc -> FY EQUALS . exp SCOLON xyfunc
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    exp                            shift and go to state 268
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 212

    (90) plot2 -> LCOR varcte . COMMA varcte RCOR
    (91) plot2 -> LCOR varcte . COMMA varcte RCOR COMMA plot2

    COMMA           shift and go to state 269


state 213

    (86) count -> COUNT OPAREN ID COMMA . varcte COMMA varcte CPAREN SCOLON
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 270

state 214

    (87) countif -> COUNTIF OPAREN ID COMMA . varcte COMMA varcte COMMA cond CPAREN SCOLON
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 271

state 215

    (121) metodos -> MEAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 272


state 216

    (140) mmmfunc -> LCOR RCOR .

    CPAREN          reduce using rule 140 (mmmfunc -> LCOR RCOR .)


state 217

    (141) mmmfunc -> LCOR mmmarray . RCOR COMMA mmmfunc
    (142) mmmfunc -> LCOR mmmarray . RCOR

    RCOR            shift and go to state 273


state 218

    (145) mmmarray -> varcte .
    (146) mmmarray -> varcte . COMMA mmmarray

    RCOR            reduce using rule 145 (mmmarray -> varcte .)
    COMMA           shift and go to state 274


state 219

    (147) mmmarray -> empty .

    RCOR            reduce using rule 147 (mmmarray -> empty .)


state 220

    (122) metodos -> MEDIAN OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 275


state 221

    (123) metodos -> MODE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 276


state 222

    (124) metodos -> STDV OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 277


state 223

    (125) metodos -> KMEANS OPAREN varcte COMMA . mmmfunc CPAREN SCOLON
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 278
    empty                          shift and go to state 164

state 224

    (126) metodos -> DERL OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 279


state 225

    (136) expfunc -> ID COMMA . ID COMMA ID

    ID              shift and go to state 280


state 226

    (137) expfunc -> varcte COMMA . varcte COMMA varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 281

state 227

    (127) metodos -> DBERN OPAREN expfunc CPAREN . SCOLON

    SCOLON          shift and go to state 282


state 228

    (128) metodos -> DPOI OPAREN expfunc2 CPAREN . SCOLON

    SCOLON          shift and go to state 283


state 229

    (138) expfunc2 -> ID COMMA . ID

    ID              shift and go to state 284


state 230

    (139) expfunc2 -> varcte COMMA . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 285

state 231

    (129) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 286


state 232

    (130) metodos -> INVERSE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 287


state 233

    (131) metodos -> ROTATE OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 288


state 234

    (132) metodos -> REF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 289


state 235

    (133) metodos -> RREF OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 290


state 236

    (134) metodos -> MONT OPAREN mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 291


state 237

    (135) metodos -> EULER OPAREN CPAREN SCOLON .

    ID              reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    IF              reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    PRINT           reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    PLOT            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    COUNT           reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    COUNTIF         reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MEAN            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MEDIAN          reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MODE            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    STDV            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    KMEANS          reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DERL            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DBERN           reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DPOI            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    INVERSE         reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    ROTATE          reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    REF             reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    RREF            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    MONT            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    EULER           reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    DO              reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    READ            reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)
    CBRACKET        reduce using rule 135 (metodos -> EULER OPAREN CPAREN SCOLON .)


state 238

    (111) dwhile -> DO wn1 wblock WHILE . OPAREN dwhileconds CPAREN wn2 SCOLON

    OPAREN          shift and go to state 292


state 239

    (114) wblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 293


state 240

    (119) readln -> READ OPAREN ID rn1 . CPAREN SCOLON

    CPAREN          shift and go to state 294


state 241

    (120) rn1 -> empty .

    CPAREN          reduce using rule 120 (rn1 -> empty .)


state 242

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 . mn2 CPAREN modules2 mn3 funblock mn7
    (22) mn2 -> .

    CPAREN          reduce using rule 22 (mn2 -> .)

    mn2                            shift and go to state 295

state 243

    (32) modules2 -> vars .

    CPAREN          reduce using rule 32 (modules2 -> vars .)
    OBRACKET        reduce using rule 32 (modules2 -> vars .)


state 244

    (33) modules2 -> empty .

    CPAREN          reduce using rule 33 (modules2 -> empty .)
    OBRACKET        reduce using rule 33 (modules2 -> empty .)


state 245

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR . COLON tipo SCOLON

    COLON           shift and go to state 296


state 246

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (13) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (148) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 13 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 148 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 148 (empty -> .) ]
  ! CPAREN          [ reduce using rule 148 (empty -> .) ]

    lugstat2                       shift and go to state 297
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 247

    (62) asign3 -> LCOR expresion RCOR .

    COLON           reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    COMMA           reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    RCOR            reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    MULT            reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    DIV             reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    PLUS            reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    MINUS           reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    RELOP           reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    CPAREN          reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    SCOLON          reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    ID              reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    AND             reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    OR              reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    OPAREN          reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    NUMERIC         reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    NUMBER          reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    LOGICAL         reduce using rule 62 (asign3 -> LCOR expresion RCOR .)
    EQUALS          reduce using rule 62 (asign3 -> LCOR expresion RCOR .)


state 248

    (63) asign3 -> LCOR varcte RCOR .

    COLON           reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    COMMA           reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    RCOR            reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    MULT            reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    DIV             reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    PLUS            reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    MINUS           reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    RELOP           reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    CPAREN          reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    SCOLON          reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    ID              reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    AND             reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    OR              reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    OPAREN          reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    NUMERIC         reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    NUMBER          reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    LOGICAL         reduce using rule 63 (asign3 -> LCOR varcte RCOR .)
    EQUALS          reduce using rule 63 (asign3 -> LCOR varcte RCOR .)


state 249

    (56) asign -> ID EQUALS ID asign2 SCOLON .

    ID              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 56 (asign -> ID EQUALS ID asign2 SCOLON .)


state 250

    (59) asign -> ID asign2 EQUALS ID asign2 . SCOLON
    (107) varcte -> ID asign2 .

  ! shift/reduce conflict for SCOLON resolved as shift
    SCOLON          shift and go to state 298
    MULT            reduce using rule 107 (varcte -> ID asign2 .)
    DIV             reduce using rule 107 (varcte -> ID asign2 .)
    PLUS            reduce using rule 107 (varcte -> ID asign2 .)
    MINUS           reduce using rule 107 (varcte -> ID asign2 .)
    RELOP           reduce using rule 107 (varcte -> ID asign2 .)

  ! SCOLON          [ reduce using rule 107 (varcte -> ID asign2 .) ]


state 251

    (57) asign -> ID asign2 EQUALS ID SCOLON .

    ID              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    IF              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    PRINT           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    PLOT            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNT           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    COUNTIF         reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEAN            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MEDIAN          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MODE            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    STDV            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    KMEANS          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DERL            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DBERN           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DPOI            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    TRANSPOSE       reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    INVERSE         reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    ROTATE          reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    REF             reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    RREF            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    MONT            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    EULER           reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    DO              reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    READ            reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)
    CBRACKET        reduce using rule 57 (asign -> ID asign2 EQUALS ID SCOLON .)


state 252

    (58) asign -> ID asign2 EQUALS expresion SCOLON .

    ID              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    IF              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PRINT           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    PLOT            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNT           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    COUNTIF         reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEAN            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MEDIAN          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MODE            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    STDV            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    KMEANS          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DERL            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DBERN           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DPOI            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    TRANSPOSE       reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    INVERSE         reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    ROTATE          reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    REF             reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    RREF            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    MONT            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    EULER           reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    DO              reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    READ            reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)
    CBRACKET        reduce using rule 58 (asign -> ID asign2 EQUALS expresion SCOLON .)


state 253

    (25) funccall -> ID OPAREN fcn1 ID fcn2 . funccall2 CPAREN
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (148) empty -> .

    COMMA           shift and go to state 301
    ID              shift and go to state 299
    CPAREN          reduce using rule 148 (empty -> .)

    funccall2                      shift and go to state 300
    empty                          shift and go to state 302

state 254

    (27) fcn2 -> empty .

    COMMA           reduce using rule 27 (fcn2 -> empty .)
    ID              reduce using rule 27 (fcn2 -> empty .)
    CPAREN          reduce using rule 27 (fcn2 -> empty .)


state 255

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 . funccall2 CPAREN fcn3
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (148) empty -> .

    COMMA           shift and go to state 301
    ID              shift and go to state 299
    CPAREN          reduce using rule 148 (empty -> .)

    funccall2                      shift and go to state 303
    empty                          shift and go to state 302

state 256

    (77) cond -> IF OPAREN expresion cn1 CPAREN . ifblock SCOLON cn2
    (78) cond -> IF OPAREN expresion cn1 CPAREN . ifblock ELSE cn3 ifblock SCOLON cn2
    (82) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 305

    ifblock                        shift and go to state 304

state 257

    (65) escrt -> PRINT OPAREN ID en3 escrt2 . CPAREN SCOLON

    CPAREN          shift and go to state 306


state 258

    (66) escrt -> PRINT OPAREN expresion en1 CPAREN . SCOLON

    SCOLON          shift and go to state 307


state 259

    (67) escrt -> PRINT OPAREN STRING CPAREN en2 . SCOLON

    SCOLON          shift and go to state 308


state 260

    (75) en2 -> empty .

    SCOLON          reduce using rule 75 (en2 -> empty .)


state 261

    (68) escrt -> PRINT OPAREN STRING escrt2 CPAREN . en2 SCOLON
    (75) en2 -> . empty
    (148) empty -> .

    SCOLON          reduce using rule 148 (empty -> .)

    en2                            shift and go to state 309
    empty                          shift and go to state 260

state 262

    (69) escrt2 -> COMMA escrt3 .

    CPAREN          reduce using rule 69 (escrt2 -> COMMA escrt3 .)
    COMMA           reduce using rule 69 (escrt2 -> COMMA escrt3 .)


state 263

    (71) escrt3 -> ID . escrt2
    (72) escrt3 -> ID .
    (69) escrt2 -> . COMMA escrt3
    (70) escrt2 -> . empty
    (148) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPAREN resolved using rule 72 (escrt3 -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
    CPAREN          reduce using rule 72 (escrt3 -> ID .)
    COMMA           shift and go to state 206

  ! COMMA           [ reduce using rule 72 (escrt3 -> ID .) ]
  ! CPAREN          [ reduce using rule 148 (empty -> .) ]
  ! COMMA           [ reduce using rule 148 (empty -> .) ]

    escrt2                         shift and go to state 310
    empty                          shift and go to state 207

state 264

    (73) escrt3 -> STRING . escrt2 escrt2
    (69) escrt2 -> . COMMA escrt3
    (70) escrt2 -> . empty
    (148) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 206
    CPAREN          reduce using rule 148 (empty -> .)

  ! COMMA           [ reduce using rule 148 (empty -> .) ]

    escrt2                         shift and go to state 311
    empty                          shift and go to state 207

state 265

    (88) plot -> PLOT OPAREN xyfunc CPAREN SCOLON .

    ID              reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    IF              reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PRINT           reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    PLOT            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNT           reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEAN            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MODE            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    STDV            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DERL            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DBERN           reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DPOI            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    REF             reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    RREF            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    MONT            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    EULER           reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    DO              reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    READ            reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 88 (plot -> PLOT OPAREN xyfunc CPAREN SCOLON .)


state 266

    (89) plot -> PLOT OPAREN plot2 CPAREN SCOLON .

    ID              reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    IF              reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PRINT           reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    PLOT            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNT           reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEAN            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MODE            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    STDV            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    KMEANS          reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DERL            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DBERN           reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DPOI            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    INVERSE         reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    ROTATE          reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    REF             reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    RREF            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    MONT            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    EULER           reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    DO              reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    READ            reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 89 (plot -> PLOT OPAREN plot2 CPAREN SCOLON .)


state 267

    (93) xyfunc -> FX EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 312


state 268

    (94) xyfunc -> FY EQUALS exp . SCOLON xyfunc

    SCOLON          shift and go to state 313


state 269

    (90) plot2 -> LCOR varcte COMMA . varcte RCOR
    (91) plot2 -> LCOR varcte COMMA . varcte RCOR COMMA plot2
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 314

state 270

    (86) count -> COUNT OPAREN ID COMMA varcte . COMMA varcte CPAREN SCOLON

    COMMA           shift and go to state 315


state 271

    (87) countif -> COUNTIF OPAREN ID COMMA varcte . COMMA varcte COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 316


state 272

    (121) metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 121 (metodos -> MEAN OPAREN mmmfunc CPAREN SCOLON .)


state 273

    (141) mmmfunc -> LCOR mmmarray RCOR . COMMA mmmfunc
    (142) mmmfunc -> LCOR mmmarray RCOR .

    COMMA           shift and go to state 317
    CPAREN          reduce using rule 142 (mmmfunc -> LCOR mmmarray RCOR .)


state 274

    (146) mmmarray -> varcte COMMA . mmmarray
    (145) mmmarray -> . varcte
    (146) mmmarray -> . varcte COMMA mmmarray
    (147) mmmarray -> . empty
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL
    (148) empty -> .

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41
    RCOR            reduce using rule 148 (empty -> .)

    varcte                         shift and go to state 218
    mmmarray                       shift and go to state 318
    empty                          shift and go to state 219

state 275

    (122) metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 122 (metodos -> MEDIAN OPAREN mmmfunc CPAREN SCOLON .)


state 276

    (123) metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 123 (metodos -> MODE OPAREN mmmfunc CPAREN SCOLON .)


state 277

    (124) metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 124 (metodos -> STDV OPAREN mmmfunc CPAREN SCOLON .)


state 278

    (125) metodos -> KMEANS OPAREN varcte COMMA mmmfunc . CPAREN SCOLON

    CPAREN          shift and go to state 319


state 279

    (126) metodos -> DERL OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 126 (metodos -> DERL OPAREN expfunc CPAREN SCOLON .)


state 280

    (136) expfunc -> ID COMMA ID . COMMA ID

    COMMA           shift and go to state 320


state 281

    (137) expfunc -> varcte COMMA varcte . COMMA varcte

    COMMA           shift and go to state 321


state 282

    (127) metodos -> DBERN OPAREN expfunc CPAREN SCOLON .

    ID              reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    IF              reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PRINT           reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    PLOT            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNT           reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEAN            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MODE            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    STDV            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DERL            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DBERN           reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DPOI            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    REF             reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    RREF            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    MONT            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    EULER           reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    DO              reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    READ            reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 127 (metodos -> DBERN OPAREN expfunc CPAREN SCOLON .)


state 283

    (128) metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .

    ID              reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    IF              reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PRINT           reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    PLOT            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNT           reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEAN            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MODE            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    STDV            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    KMEANS          reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DERL            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DBERN           reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DPOI            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    INVERSE         reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    ROTATE          reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    REF             reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    RREF            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    MONT            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    EULER           reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    DO              reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    READ            reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 128 (metodos -> DPOI OPAREN expfunc2 CPAREN SCOLON .)


state 284

    (138) expfunc2 -> ID COMMA ID .

    CPAREN          reduce using rule 138 (expfunc2 -> ID COMMA ID .)


state 285

    (139) expfunc2 -> varcte COMMA varcte .

    CPAREN          reduce using rule 139 (expfunc2 -> varcte COMMA varcte .)


state 286

    (129) metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 129 (metodos -> TRANSPOSE OPAREN mmmfunc CPAREN SCOLON .)


state 287

    (130) metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 130 (metodos -> INVERSE OPAREN mmmfunc CPAREN SCOLON .)


state 288

    (131) metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 131 (metodos -> ROTATE OPAREN mmmfunc CPAREN SCOLON .)


state 289

    (132) metodos -> REF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 132 (metodos -> REF OPAREN mmmfunc CPAREN SCOLON .)


state 290

    (133) metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 133 (metodos -> RREF OPAREN mmmfunc CPAREN SCOLON .)


state 291

    (134) metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .

    ID              reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 134 (metodos -> MONT OPAREN mmmfunc CPAREN SCOLON .)


state 292

    (111) dwhile -> DO wn1 wblock WHILE OPAREN . dwhileconds CPAREN wn2 SCOLON
    (115) dwhileconds -> . expresion dwhileconds
    (116) dwhileconds -> . expresion AND dwhileconds
    (117) dwhileconds -> . expresion OR dwhileconds
    (118) dwhileconds -> . empty
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (148) empty -> .
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    CPAREN          reduce using rule 148 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    dwhileconds                    shift and go to state 322
    expresion                      shift and go to state 323
    empty                          shift and go to state 324
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 293

    (114) wblock -> OBRACKET block2 CBRACKET .

    WHILE           reduce using rule 114 (wblock -> OBRACKET block2 CBRACKET .)


state 294

    (119) readln -> READ OPAREN ID rn1 CPAREN . SCOLON

    SCOLON          shift and go to state 325


state 295

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 . CPAREN modules2 mn3 funblock mn7

    CPAREN          shift and go to state 326


state 296

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON . tipo SCOLON
    (39) tipo -> . INT
    (40) tipo -> . BOOL
    (41) tipo -> . DOUBLE
    (42) tipo -> . STRING
    (43) tipo -> . CHAR

    INT             shift and go to state 30
    BOOL            shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    CHAR            shift and go to state 34

    tipo                           shift and go to state 327

state 297

    (12) vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 12 (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 298

    (59) asign -> ID asign2 EQUALS ID asign2 SCOLON .

    ID              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    IF              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PRINT           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    PLOT            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNT           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    COUNTIF         reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEAN            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MEDIAN          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MODE            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    STDV            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    KMEANS          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DERL            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DBERN           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DPOI            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    TRANSPOSE       reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    INVERSE         reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    ROTATE          reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    REF             reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    RREF            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    MONT            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    EULER           reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    DO              reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    READ            reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)
    CBRACKET        reduce using rule 59 (asign -> ID asign2 EQUALS ID asign2 SCOLON .)


state 299

    (30) funccall2 -> ID . fcn2 funccall2
    (27) fcn2 -> . empty
    (148) empty -> .

    COMMA           reduce using rule 148 (empty -> .)
    ID              reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)

    fcn2                           shift and go to state 328
    empty                          shift and go to state 254

state 300

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 . CPAREN

    CPAREN          shift and go to state 329


state 301

    (29) funccall2 -> COMMA . expresion fcn2 funccall2
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 330
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 302

    (31) funccall2 -> empty .

    CPAREN          reduce using rule 31 (funccall2 -> empty .)


state 303

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 . CPAREN fcn3

    CPAREN          shift and go to state 331


state 304

    (77) cond -> IF OPAREN expresion cn1 CPAREN ifblock . SCOLON cn2
    (78) cond -> IF OPAREN expresion cn1 CPAREN ifblock . ELSE cn3 ifblock SCOLON cn2

    SCOLON          shift and go to state 332
    ELSE            shift and go to state 333


state 305

    (82) ifblock -> OBRACKET . ifblock2 CBRACKET
    (83) ifblock2 -> . estatuto
    (84) ifblock2 -> . estatuto ifblock2
    (85) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (148) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (65) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (88) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (89) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (86) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (87) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (121) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (125) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (126) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (127) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (128) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (129) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . EULER OPAREN CPAREN SCOLON
    (111) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (119) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 148 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    ifblock2                       shift and go to state 334
    estatuto                       shift and go to state 335
    empty                          shift and go to state 336
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 306

    (65) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN . SCOLON

    SCOLON          shift and go to state 337


state 307

    (66) escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .

    ID              reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    IF              reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PRINT           reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    PLOT            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNT           reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEAN            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MODE            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    STDV            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    KMEANS          reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DERL            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DBERN           reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DPOI            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    INVERSE         reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    ROTATE          reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    REF             reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    RREF            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    MONT            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    EULER           reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    DO              reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    READ            reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 66 (escrt -> PRINT OPAREN expresion en1 CPAREN SCOLON .)


state 308

    (67) escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .

    ID              reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    IF              reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PRINT           reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    PLOT            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNT           reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEAN            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MODE            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    STDV            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DERL            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DBERN           reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DPOI            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    REF             reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    RREF            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    MONT            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    EULER           reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    DO              reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    READ            reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 67 (escrt -> PRINT OPAREN STRING CPAREN en2 SCOLON .)


state 309

    (68) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 . SCOLON

    SCOLON          shift and go to state 338


state 310

    (71) escrt3 -> ID escrt2 .

    CPAREN          reduce using rule 71 (escrt3 -> ID escrt2 .)
    COMMA           reduce using rule 71 (escrt3 -> ID escrt2 .)


state 311

    (73) escrt3 -> STRING escrt2 . escrt2
    (69) escrt2 -> . COMMA escrt3
    (70) escrt2 -> . empty
    (148) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 206
    CPAREN          reduce using rule 148 (empty -> .)

  ! COMMA           [ reduce using rule 148 (empty -> .) ]

    escrt2                         shift and go to state 339
    empty                          shift and go to state 207

state 312

    (93) xyfunc -> FX EQUALS exp SCOLON . xyfunc
    (93) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (94) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (95) xyfunc -> . empty
    (148) empty -> .

    FX              shift and go to state 155
    FY              shift and go to state 156
    CPAREN          reduce using rule 148 (empty -> .)

    xyfunc                         shift and go to state 340
    empty                          shift and go to state 341

state 313

    (94) xyfunc -> FY EQUALS exp SCOLON . xyfunc
    (93) xyfunc -> . FX EQUALS exp SCOLON xyfunc
    (94) xyfunc -> . FY EQUALS exp SCOLON xyfunc
    (95) xyfunc -> . empty
    (148) empty -> .

    FX              shift and go to state 155
    FY              shift and go to state 156
    CPAREN          reduce using rule 148 (empty -> .)

    xyfunc                         shift and go to state 342
    empty                          shift and go to state 341

state 314

    (90) plot2 -> LCOR varcte COMMA varcte . RCOR
    (91) plot2 -> LCOR varcte COMMA varcte . RCOR COMMA plot2

    RCOR            shift and go to state 343


state 315

    (86) count -> COUNT OPAREN ID COMMA varcte COMMA . varcte CPAREN SCOLON
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 344

state 316

    (87) countif -> COUNTIF OPAREN ID COMMA varcte COMMA . varcte COMMA cond CPAREN SCOLON
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 345

state 317

    (141) mmmfunc -> LCOR mmmarray RCOR COMMA . mmmfunc
    (140) mmmfunc -> . LCOR RCOR
    (141) mmmfunc -> . LCOR mmmarray RCOR COMMA mmmfunc
    (142) mmmfunc -> . LCOR mmmarray RCOR
    (143) mmmfunc -> . ID
    (144) mmmfunc -> . empty
    (148) empty -> .

    LCOR            shift and go to state 162
    ID              shift and go to state 163
    CPAREN          reduce using rule 148 (empty -> .)

    mmmfunc                        shift and go to state 346
    empty                          shift and go to state 164

state 318

    (146) mmmarray -> varcte COMMA mmmarray .

    RCOR            reduce using rule 146 (mmmarray -> varcte COMMA mmmarray .)


state 319

    (125) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN . SCOLON

    SCOLON          shift and go to state 347


state 320

    (136) expfunc -> ID COMMA ID COMMA . ID

    ID              shift and go to state 348


state 321

    (137) expfunc -> varcte COMMA varcte COMMA . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    varcte                         shift and go to state 349

state 322

    (111) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds . CPAREN wn2 SCOLON

    CPAREN          shift and go to state 350


state 323

    (115) dwhileconds -> expresion . dwhileconds
    (116) dwhileconds -> expresion . AND dwhileconds
    (117) dwhileconds -> expresion . OR dwhileconds
    (97) expresion -> expresion . RELOP exp
    (115) dwhileconds -> . expresion dwhileconds
    (116) dwhileconds -> . expresion AND dwhileconds
    (117) dwhileconds -> . expresion OR dwhileconds
    (118) dwhileconds -> . empty
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (148) empty -> .
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    AND             shift and go to state 352
    OR              shift and go to state 353
    RELOP           shift and go to state 89
    CPAREN          reduce using rule 148 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 323
    dwhileconds                    shift and go to state 351
    exp                            shift and go to state 39
    empty                          shift and go to state 324
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 324

    (118) dwhileconds -> empty .

    CPAREN          reduce using rule 118 (dwhileconds -> empty .)


state 325

    (119) readln -> READ OPAREN ID rn1 CPAREN SCOLON .

    ID              reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    IF              reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PRINT           reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    PLOT            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNT           reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    COUNTIF         reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEAN            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MEDIAN          reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MODE            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    STDV            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    KMEANS          reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DERL            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DBERN           reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DPOI            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    INVERSE         reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    ROTATE          reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    REF             reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    RREF            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    MONT            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    EULER           reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    DO              reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    READ            reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)
    CBRACKET        reduce using rule 119 (readln -> READ OPAREN ID rn1 CPAREN SCOLON .)


state 326

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN . modules2 mn3 funblock mn7
    (32) modules2 -> . vars
    (33) modules2 -> . empty
    (9) vars -> . VAR vars1
    (148) empty -> .

    VAR             shift and go to state 10
    OBRACKET        reduce using rule 148 (empty -> .)

    modules2                       shift and go to state 354
    vars                           shift and go to state 243
    empty                          shift and go to state 244

state 327

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo . SCOLON

    SCOLON          shift and go to state 355


state 328

    (30) funccall2 -> ID fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (148) empty -> .

    COMMA           shift and go to state 301
    ID              shift and go to state 299
    CPAREN          reduce using rule 148 (empty -> .)

    funccall2                      shift and go to state 356
    empty                          shift and go to state 302

state 329

    (25) funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .

    ID              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    IF              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PRINT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    PLOT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNT           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    COUNTIF         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEAN            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MEDIAN          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MODE            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    STDV            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    KMEANS          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DERL            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DBERN           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DPOI            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    TRANSPOSE       reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    INVERSE         reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    ROTATE          reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    REF             reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    RREF            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    MONT            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    EULER           reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    DO              reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    READ            reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)
    CBRACKET        reduce using rule 25 (funccall -> ID OPAREN fcn1 ID fcn2 funccall2 CPAREN .)


state 330

    (29) funccall2 -> COMMA expresion . fcn2 funccall2
    (97) expresion -> expresion . RELOP exp
    (27) fcn2 -> . empty
    (148) empty -> .

    RELOP           shift and go to state 89
    COMMA           reduce using rule 148 (empty -> .)
    ID              reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)

    fcn2                           shift and go to state 357
    empty                          shift and go to state 254

state 331

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN . fcn3
    (28) fcn3 -> . empty
    (148) empty -> .

    ID              reduce using rule 148 (empty -> .)
    IF              reduce using rule 148 (empty -> .)
    PRINT           reduce using rule 148 (empty -> .)
    PLOT            reduce using rule 148 (empty -> .)
    COUNT           reduce using rule 148 (empty -> .)
    COUNTIF         reduce using rule 148 (empty -> .)
    MEAN            reduce using rule 148 (empty -> .)
    MEDIAN          reduce using rule 148 (empty -> .)
    MODE            reduce using rule 148 (empty -> .)
    STDV            reduce using rule 148 (empty -> .)
    KMEANS          reduce using rule 148 (empty -> .)
    DERL            reduce using rule 148 (empty -> .)
    DBERN           reduce using rule 148 (empty -> .)
    DPOI            reduce using rule 148 (empty -> .)
    TRANSPOSE       reduce using rule 148 (empty -> .)
    INVERSE         reduce using rule 148 (empty -> .)
    ROTATE          reduce using rule 148 (empty -> .)
    REF             reduce using rule 148 (empty -> .)
    RREF            reduce using rule 148 (empty -> .)
    MONT            reduce using rule 148 (empty -> .)
    EULER           reduce using rule 148 (empty -> .)
    DO              reduce using rule 148 (empty -> .)
    READ            reduce using rule 148 (empty -> .)
    CBRACKET        reduce using rule 148 (empty -> .)

    fcn3                           shift and go to state 358
    empty                          shift and go to state 359

state 332

    (77) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON . cn2
    (80) cn2 -> . empty
    (148) empty -> .

    ID              reduce using rule 148 (empty -> .)
    IF              reduce using rule 148 (empty -> .)
    PRINT           reduce using rule 148 (empty -> .)
    PLOT            reduce using rule 148 (empty -> .)
    COUNT           reduce using rule 148 (empty -> .)
    COUNTIF         reduce using rule 148 (empty -> .)
    MEAN            reduce using rule 148 (empty -> .)
    MEDIAN          reduce using rule 148 (empty -> .)
    MODE            reduce using rule 148 (empty -> .)
    STDV            reduce using rule 148 (empty -> .)
    KMEANS          reduce using rule 148 (empty -> .)
    DERL            reduce using rule 148 (empty -> .)
    DBERN           reduce using rule 148 (empty -> .)
    DPOI            reduce using rule 148 (empty -> .)
    TRANSPOSE       reduce using rule 148 (empty -> .)
    INVERSE         reduce using rule 148 (empty -> .)
    ROTATE          reduce using rule 148 (empty -> .)
    REF             reduce using rule 148 (empty -> .)
    RREF            reduce using rule 148 (empty -> .)
    MONT            reduce using rule 148 (empty -> .)
    EULER           reduce using rule 148 (empty -> .)
    DO              reduce using rule 148 (empty -> .)
    READ            reduce using rule 148 (empty -> .)
    CBRACKET        reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)

    cn2                            shift and go to state 360
    empty                          shift and go to state 361

state 333

    (78) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE . cn3 ifblock SCOLON cn2
    (81) cn3 -> . empty
    (148) empty -> .

    OBRACKET        reduce using rule 148 (empty -> .)

    cn3                            shift and go to state 362
    empty                          shift and go to state 363

state 334

    (82) ifblock -> OBRACKET ifblock2 . CBRACKET

    CBRACKET        shift and go to state 364


state 335

    (83) ifblock2 -> estatuto .
    (84) ifblock2 -> estatuto . ifblock2
    (83) ifblock2 -> . estatuto
    (84) ifblock2 -> . estatuto ifblock2
    (85) ifblock2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (148) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (65) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (88) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (89) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (86) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (87) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (121) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (125) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (126) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (127) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (128) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (129) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . EULER OPAREN CPAREN SCOLON
    (111) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (119) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

  ! reduce/reduce conflict for CBRACKET resolved using rule 83 (ifblock2 -> estatuto .)
    CBRACKET        reduce using rule 83 (ifblock2 -> estatuto .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

  ! CBRACKET        [ reduce using rule 148 (empty -> .) ]

    estatuto                       shift and go to state 335
    ifblock2                       shift and go to state 365
    empty                          shift and go to state 336
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 336

    (85) ifblock2 -> empty .

    CBRACKET        reduce using rule 85 (ifblock2 -> empty .)


state 337

    (65) escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .

    ID              reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    IF              reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PRINT           reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    PLOT            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNT           reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    COUNTIF         reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEAN            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MEDIAN          reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MODE            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    STDV            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    KMEANS          reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DERL            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DBERN           reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DPOI            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    INVERSE         reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    ROTATE          reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    REF             reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    RREF            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    MONT            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    EULER           reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    DO              reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    READ            reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)
    CBRACKET        reduce using rule 65 (escrt -> PRINT OPAREN ID en3 escrt2 CPAREN SCOLON .)


state 338

    (68) escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .

    ID              reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    IF              reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PRINT           reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    PLOT            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNT           reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    COUNTIF         reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEAN            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MEDIAN          reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MODE            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    STDV            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    KMEANS          reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DERL            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DBERN           reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DPOI            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    TRANSPOSE       reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    INVERSE         reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    ROTATE          reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    REF             reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    RREF            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    MONT            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    EULER           reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    DO              reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    READ            reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)
    CBRACKET        reduce using rule 68 (escrt -> PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON .)


state 339

    (73) escrt3 -> STRING escrt2 escrt2 .

    CPAREN          reduce using rule 73 (escrt3 -> STRING escrt2 escrt2 .)
    COMMA           reduce using rule 73 (escrt3 -> STRING escrt2 escrt2 .)


state 340

    (93) xyfunc -> FX EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 93 (xyfunc -> FX EQUALS exp SCOLON xyfunc .)


state 341

    (95) xyfunc -> empty .

    CPAREN          reduce using rule 95 (xyfunc -> empty .)


state 342

    (94) xyfunc -> FY EQUALS exp SCOLON xyfunc .

    CPAREN          reduce using rule 94 (xyfunc -> FY EQUALS exp SCOLON xyfunc .)


state 343

    (90) plot2 -> LCOR varcte COMMA varcte RCOR .
    (91) plot2 -> LCOR varcte COMMA varcte RCOR . COMMA plot2

    CPAREN          reduce using rule 90 (plot2 -> LCOR varcte COMMA varcte RCOR .)
    COMMA           shift and go to state 366


state 344

    (86) count -> COUNT OPAREN ID COMMA varcte COMMA varcte . CPAREN SCOLON

    CPAREN          shift and go to state 367


state 345

    (87) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte . COMMA cond CPAREN SCOLON

    COMMA           shift and go to state 368


state 346

    (141) mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc .

    CPAREN          reduce using rule 141 (mmmfunc -> LCOR mmmarray RCOR COMMA mmmfunc .)


state 347

    (125) metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .

    ID              reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    IF              reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PRINT           reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    PLOT            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNT           reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    COUNTIF         reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEAN            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MEDIAN          reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MODE            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    STDV            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    KMEANS          reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DERL            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DBERN           reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DPOI            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    INVERSE         reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    ROTATE          reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    REF             reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    RREF            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    MONT            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    EULER           reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    DO              reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    READ            reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)
    CBRACKET        reduce using rule 125 (metodos -> KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON .)


state 348

    (136) expfunc -> ID COMMA ID COMMA ID .

    CPAREN          reduce using rule 136 (expfunc -> ID COMMA ID COMMA ID .)


state 349

    (137) expfunc -> varcte COMMA varcte COMMA varcte .

    CPAREN          reduce using rule 137 (expfunc -> varcte COMMA varcte COMMA varcte .)


state 350

    (111) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN . wn2 SCOLON
    (113) wn2 -> . empty
    (148) empty -> .

    SCOLON          reduce using rule 148 (empty -> .)

    wn2                            shift and go to state 369
    empty                          shift and go to state 370

state 351

    (115) dwhileconds -> expresion dwhileconds .

    CPAREN          reduce using rule 115 (dwhileconds -> expresion dwhileconds .)


state 352

    (116) dwhileconds -> expresion AND . dwhileconds
    (115) dwhileconds -> . expresion dwhileconds
    (116) dwhileconds -> . expresion AND dwhileconds
    (117) dwhileconds -> . expresion OR dwhileconds
    (118) dwhileconds -> . empty
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (148) empty -> .
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    CPAREN          reduce using rule 148 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 323
    dwhileconds                    shift and go to state 371
    empty                          shift and go to state 324
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 353

    (117) dwhileconds -> expresion OR . dwhileconds
    (115) dwhileconds -> . expresion dwhileconds
    (116) dwhileconds -> . expresion AND dwhileconds
    (117) dwhileconds -> . expresion OR dwhileconds
    (118) dwhileconds -> . empty
    (96) expresion -> . exp
    (97) expresion -> . expresion RELOP exp
    (148) empty -> .
    (98) exp -> . termino
    (99) exp -> . termino PLUS exp
    (100) exp -> . termino MINUS exp
    (101) termino -> . factor
    (102) termino -> . factor MULT termino
    (103) termino -> . factor DIV termino
    (104) factor -> . OPAREN expresion CPAREN
    (105) factor -> . varcte
    (106) varcte -> . ID
    (107) varcte -> . ID asign2
    (108) varcte -> . NUMERIC
    (109) varcte -> . NUMBER
    (110) varcte -> . LOGICAL

    CPAREN          reduce using rule 148 (empty -> .)
    OPAREN          shift and go to state 44
    ID              shift and go to state 35
    NUMERIC         shift and go to state 40
    NUMBER          shift and go to state 97
    LOGICAL         shift and go to state 41

    expresion                      shift and go to state 323
    dwhileconds                    shift and go to state 372
    empty                          shift and go to state 324
    exp                            shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    varcte                         shift and go to state 96

state 354

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 . mn3 funblock mn7
    (23) mn3 -> . empty
    (148) empty -> .

    OBRACKET        reduce using rule 148 (empty -> .)

    mn3                            shift and go to state 373
    empty                          shift and go to state 374

state 355

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON . lugstat2
    (15) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .
    (4) lugstat2 -> . vars
    (5) lugstat2 -> . empty
    (9) vars -> . VAR vars1
    (148) empty -> .

  ! reduce/reduce conflict for FUNC resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for OBRACKET resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
  ! reduce/reduce conflict for CPAREN resolved using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    FUNC            reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    OBRACKET        reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    CPAREN          reduce using rule 15 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON .)
    VAR             shift and go to state 10

  ! FUNC            [ reduce using rule 148 (empty -> .) ]
  ! OBRACKET        [ reduce using rule 148 (empty -> .) ]
  ! CPAREN          [ reduce using rule 148 (empty -> .) ]

    lugstat2                       shift and go to state 375
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 356

    (30) funccall2 -> ID fcn2 funccall2 .

    CPAREN          reduce using rule 30 (funccall2 -> ID fcn2 funccall2 .)


state 357

    (29) funccall2 -> COMMA expresion fcn2 . funccall2
    (29) funccall2 -> . COMMA expresion fcn2 funccall2
    (30) funccall2 -> . ID fcn2 funccall2
    (31) funccall2 -> . empty
    (148) empty -> .

    COMMA           shift and go to state 301
    ID              shift and go to state 299
    CPAREN          reduce using rule 148 (empty -> .)

    funccall2                      shift and go to state 376
    empty                          shift and go to state 302

state 358

    (24) funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .

    ID              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    IF              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PRINT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    PLOT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNT           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    COUNTIF         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEAN            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MEDIAN          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MODE            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    STDV            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    KMEANS          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DERL            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DBERN           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DPOI            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    TRANSPOSE       reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    INVERSE         reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    ROTATE          reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    REF             reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    RREF            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    MONT            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    EULER           reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    DO              reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    READ            reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)
    CBRACKET        reduce using rule 24 (funccall -> ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3 .)


state 359

    (28) fcn3 -> empty .

    ID              reduce using rule 28 (fcn3 -> empty .)
    IF              reduce using rule 28 (fcn3 -> empty .)
    PRINT           reduce using rule 28 (fcn3 -> empty .)
    PLOT            reduce using rule 28 (fcn3 -> empty .)
    COUNT           reduce using rule 28 (fcn3 -> empty .)
    COUNTIF         reduce using rule 28 (fcn3 -> empty .)
    MEAN            reduce using rule 28 (fcn3 -> empty .)
    MEDIAN          reduce using rule 28 (fcn3 -> empty .)
    MODE            reduce using rule 28 (fcn3 -> empty .)
    STDV            reduce using rule 28 (fcn3 -> empty .)
    KMEANS          reduce using rule 28 (fcn3 -> empty .)
    DERL            reduce using rule 28 (fcn3 -> empty .)
    DBERN           reduce using rule 28 (fcn3 -> empty .)
    DPOI            reduce using rule 28 (fcn3 -> empty .)
    TRANSPOSE       reduce using rule 28 (fcn3 -> empty .)
    INVERSE         reduce using rule 28 (fcn3 -> empty .)
    ROTATE          reduce using rule 28 (fcn3 -> empty .)
    REF             reduce using rule 28 (fcn3 -> empty .)
    RREF            reduce using rule 28 (fcn3 -> empty .)
    MONT            reduce using rule 28 (fcn3 -> empty .)
    EULER           reduce using rule 28 (fcn3 -> empty .)
    DO              reduce using rule 28 (fcn3 -> empty .)
    READ            reduce using rule 28 (fcn3 -> empty .)
    CBRACKET        reduce using rule 28 (fcn3 -> empty .)


state 360

    (77) cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .

    ID              reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    IF              reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PRINT           reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    PLOT            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNT           reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEAN            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MODE            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    STDV            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DERL            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DBERN           reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DPOI            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    REF             reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    RREF            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    MONT            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    EULER           reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    DO              reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    READ            reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 77 (cond -> IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2 .)


state 361

    (80) cn2 -> empty .

    ID              reduce using rule 80 (cn2 -> empty .)
    IF              reduce using rule 80 (cn2 -> empty .)
    PRINT           reduce using rule 80 (cn2 -> empty .)
    PLOT            reduce using rule 80 (cn2 -> empty .)
    COUNT           reduce using rule 80 (cn2 -> empty .)
    COUNTIF         reduce using rule 80 (cn2 -> empty .)
    MEAN            reduce using rule 80 (cn2 -> empty .)
    MEDIAN          reduce using rule 80 (cn2 -> empty .)
    MODE            reduce using rule 80 (cn2 -> empty .)
    STDV            reduce using rule 80 (cn2 -> empty .)
    KMEANS          reduce using rule 80 (cn2 -> empty .)
    DERL            reduce using rule 80 (cn2 -> empty .)
    DBERN           reduce using rule 80 (cn2 -> empty .)
    DPOI            reduce using rule 80 (cn2 -> empty .)
    TRANSPOSE       reduce using rule 80 (cn2 -> empty .)
    INVERSE         reduce using rule 80 (cn2 -> empty .)
    ROTATE          reduce using rule 80 (cn2 -> empty .)
    REF             reduce using rule 80 (cn2 -> empty .)
    RREF            reduce using rule 80 (cn2 -> empty .)
    MONT            reduce using rule 80 (cn2 -> empty .)
    EULER           reduce using rule 80 (cn2 -> empty .)
    DO              reduce using rule 80 (cn2 -> empty .)
    READ            reduce using rule 80 (cn2 -> empty .)
    CBRACKET        reduce using rule 80 (cn2 -> empty .)
    CPAREN          reduce using rule 80 (cn2 -> empty .)


state 362

    (78) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 . ifblock SCOLON cn2
    (82) ifblock -> . OBRACKET ifblock2 CBRACKET

    OBRACKET        shift and go to state 305

    ifblock                        shift and go to state 377

state 363

    (81) cn3 -> empty .

    OBRACKET        reduce using rule 81 (cn3 -> empty .)


state 364

    (82) ifblock -> OBRACKET ifblock2 CBRACKET .

    SCOLON          reduce using rule 82 (ifblock -> OBRACKET ifblock2 CBRACKET .)
    ELSE            reduce using rule 82 (ifblock -> OBRACKET ifblock2 CBRACKET .)


state 365

    (84) ifblock2 -> estatuto ifblock2 .

    CBRACKET        reduce using rule 84 (ifblock2 -> estatuto ifblock2 .)


state 366

    (91) plot2 -> LCOR varcte COMMA varcte RCOR COMMA . plot2
    (90) plot2 -> . LCOR varcte COMMA varcte RCOR
    (91) plot2 -> . LCOR varcte COMMA varcte RCOR COMMA plot2
    (92) plot2 -> . empty
    (148) empty -> .

    LCOR            shift and go to state 158
    CPAREN          reduce using rule 148 (empty -> .)

    plot2                          shift and go to state 378
    empty                          shift and go to state 379

state 367

    (86) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN . SCOLON

    SCOLON          shift and go to state 380


state 368

    (87) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA . cond CPAREN SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2

    IF              shift and go to state 61

    cond                           shift and go to state 381

state 369

    (111) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 . SCOLON

    SCOLON          shift and go to state 382


state 370

    (113) wn2 -> empty .

    SCOLON          reduce using rule 113 (wn2 -> empty .)


state 371

    (116) dwhileconds -> expresion AND dwhileconds .

    CPAREN          reduce using rule 116 (dwhileconds -> expresion AND dwhileconds .)


state 372

    (117) dwhileconds -> expresion OR dwhileconds .

    CPAREN          reduce using rule 117 (dwhileconds -> expresion OR dwhileconds .)


state 373

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 . funblock mn7
    (34) funblock -> . OBRACKET block2 CBRACKET

    OBRACKET        shift and go to state 384

    funblock                       shift and go to state 383

state 374

    (23) mn3 -> empty .

    OBRACKET        reduce using rule 23 (mn3 -> empty .)


state 375

    (14) vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .

    FUNC            reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    OBRACKET        reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)
    CPAREN          reduce using rule 14 (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON lugstat2 .)


state 376

    (29) funccall2 -> COMMA expresion fcn2 funccall2 .

    CPAREN          reduce using rule 29 (funccall2 -> COMMA expresion fcn2 funccall2 .)


state 377

    (78) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock . SCOLON cn2

    SCOLON          shift and go to state 385


state 378

    (91) plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .

    CPAREN          reduce using rule 91 (plot2 -> LCOR varcte COMMA varcte RCOR COMMA plot2 .)


state 379

    (92) plot2 -> empty .

    CPAREN          reduce using rule 92 (plot2 -> empty .)


state 380

    (86) count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .

    ID              reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    IF              reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PRINT           reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    PLOT            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNT           reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    COUNTIF         reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEAN            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MEDIAN          reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MODE            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    STDV            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    KMEANS          reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DERL            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DBERN           reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DPOI            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    INVERSE         reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    ROTATE          reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    REF             reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    RREF            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    MONT            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    EULER           reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    DO              reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    READ            reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)
    CBRACKET        reduce using rule 86 (count -> COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON .)


state 381

    (87) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond . CPAREN SCOLON

    CPAREN          shift and go to state 386


state 382

    (111) dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .

    ID              reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    IF              reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PRINT           reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    PLOT            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNT           reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    COUNTIF         reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEAN            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MEDIAN          reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MODE            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    STDV            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    KMEANS          reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DERL            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DBERN           reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DPOI            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    TRANSPOSE       reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    INVERSE         reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    ROTATE          reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    REF             reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    RREF            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    MONT            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    EULER           reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    DO              reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    READ            reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)
    CBRACKET        reduce using rule 111 (dwhile -> DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON .)


state 383

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock . mn7
    (21) mn7 -> . empty
    (148) empty -> .

    FUNC            reduce using rule 148 (empty -> .)
    OBRACKET        reduce using rule 148 (empty -> .)

    mn7                            shift and go to state 387
    empty                          shift and go to state 388

state 384

    (34) funblock -> OBRACKET . block2 CBRACKET
    (36) block2 -> . estatuto
    (37) block2 -> . estatuto block2
    (38) block2 -> . empty
    (44) estatuto -> . asign
    (45) estatuto -> . cond
    (46) estatuto -> . escrt
    (47) estatuto -> . plot
    (48) estatuto -> . count
    (49) estatuto -> . countif
    (50) estatuto -> . metodos
    (51) estatuto -> . dwhile
    (52) estatuto -> . readln
    (53) estatuto -> . funccall
    (148) empty -> .
    (54) asign -> . ID EQUALS expresion SCOLON
    (55) asign -> . ID EQUALS ID SCOLON
    (56) asign -> . ID EQUALS ID asign2 SCOLON
    (57) asign -> . ID asign2 EQUALS ID SCOLON
    (58) asign -> . ID asign2 EQUALS expresion SCOLON
    (59) asign -> . ID asign2 EQUALS ID asign2 SCOLON
    (77) cond -> . IF OPAREN expresion cn1 CPAREN ifblock SCOLON cn2
    (78) cond -> . IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2
    (65) escrt -> . PRINT OPAREN ID en3 escrt2 CPAREN SCOLON
    (66) escrt -> . PRINT OPAREN expresion en1 CPAREN SCOLON
    (67) escrt -> . PRINT OPAREN STRING CPAREN en2 SCOLON
    (68) escrt -> . PRINT OPAREN STRING escrt2 CPAREN en2 SCOLON
    (88) plot -> . PLOT OPAREN xyfunc CPAREN SCOLON
    (89) plot -> . PLOT OPAREN plot2 CPAREN SCOLON
    (86) count -> . COUNT OPAREN ID COMMA varcte COMMA varcte CPAREN SCOLON
    (87) countif -> . COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON
    (121) metodos -> . MEAN OPAREN mmmfunc CPAREN SCOLON
    (122) metodos -> . MEDIAN OPAREN mmmfunc CPAREN SCOLON
    (123) metodos -> . MODE OPAREN mmmfunc CPAREN SCOLON
    (124) metodos -> . STDV OPAREN mmmfunc CPAREN SCOLON
    (125) metodos -> . KMEANS OPAREN varcte COMMA mmmfunc CPAREN SCOLON
    (126) metodos -> . DERL OPAREN expfunc CPAREN SCOLON
    (127) metodos -> . DBERN OPAREN expfunc CPAREN SCOLON
    (128) metodos -> . DPOI OPAREN expfunc2 CPAREN SCOLON
    (129) metodos -> . TRANSPOSE OPAREN mmmfunc CPAREN SCOLON
    (130) metodos -> . INVERSE OPAREN mmmfunc CPAREN SCOLON
    (131) metodos -> . ROTATE OPAREN mmmfunc CPAREN SCOLON
    (132) metodos -> . REF OPAREN mmmfunc CPAREN SCOLON
    (133) metodos -> . RREF OPAREN mmmfunc CPAREN SCOLON
    (134) metodos -> . MONT OPAREN mmmfunc CPAREN SCOLON
    (135) metodos -> . EULER OPAREN CPAREN SCOLON
    (111) dwhile -> . DO wn1 wblock WHILE OPAREN dwhileconds CPAREN wn2 SCOLON
    (119) readln -> . READ OPAREN ID rn1 CPAREN SCOLON
    (24) funccall -> . ID OPAREN fcn1 expresion fcn2 funccall2 CPAREN fcn3
    (25) funccall -> . ID OPAREN fcn1 ID fcn2 funccall2 CPAREN

    CBRACKET        reduce using rule 148 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    PRINT           shift and go to state 62
    PLOT            shift and go to state 63
    COUNT           shift and go to state 64
    COUNTIF         shift and go to state 65
    MEAN            shift and go to state 66
    MEDIAN          shift and go to state 67
    MODE            shift and go to state 68
    STDV            shift and go to state 69
    KMEANS          shift and go to state 70
    DERL            shift and go to state 71
    DBERN           shift and go to state 72
    DPOI            shift and go to state 73
    TRANSPOSE       shift and go to state 74
    INVERSE         shift and go to state 75
    ROTATE          shift and go to state 76
    REF             shift and go to state 77
    RREF            shift and go to state 78
    MONT            shift and go to state 79
    EULER           shift and go to state 80
    DO              shift and go to state 81
    READ            shift and go to state 82

    block2                         shift and go to state 389
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asign                          shift and go to state 50
    cond                           shift and go to state 51
    escrt                          shift and go to state 52
    plot                           shift and go to state 53
    count                          shift and go to state 54
    countif                        shift and go to state 55
    metodos                        shift and go to state 56
    dwhile                         shift and go to state 57
    readln                         shift and go to state 58
    funccall                       shift and go to state 59

state 385

    (78) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON . cn2
    (80) cn2 -> . empty
    (148) empty -> .

    ID              reduce using rule 148 (empty -> .)
    IF              reduce using rule 148 (empty -> .)
    PRINT           reduce using rule 148 (empty -> .)
    PLOT            reduce using rule 148 (empty -> .)
    COUNT           reduce using rule 148 (empty -> .)
    COUNTIF         reduce using rule 148 (empty -> .)
    MEAN            reduce using rule 148 (empty -> .)
    MEDIAN          reduce using rule 148 (empty -> .)
    MODE            reduce using rule 148 (empty -> .)
    STDV            reduce using rule 148 (empty -> .)
    KMEANS          reduce using rule 148 (empty -> .)
    DERL            reduce using rule 148 (empty -> .)
    DBERN           reduce using rule 148 (empty -> .)
    DPOI            reduce using rule 148 (empty -> .)
    TRANSPOSE       reduce using rule 148 (empty -> .)
    INVERSE         reduce using rule 148 (empty -> .)
    ROTATE          reduce using rule 148 (empty -> .)
    REF             reduce using rule 148 (empty -> .)
    RREF            reduce using rule 148 (empty -> .)
    MONT            reduce using rule 148 (empty -> .)
    EULER           reduce using rule 148 (empty -> .)
    DO              reduce using rule 148 (empty -> .)
    READ            reduce using rule 148 (empty -> .)
    CBRACKET        reduce using rule 148 (empty -> .)
    CPAREN          reduce using rule 148 (empty -> .)

    cn2                            shift and go to state 390
    empty                          shift and go to state 361

state 386

    (87) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN . SCOLON

    SCOLON          shift and go to state 391


state 387

    (19) modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .

    FUNC            reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)
    OBRACKET        reduce using rule 19 (modules -> FUNC ID COLON tipo mn1 OPAREN modules2 mn2 CPAREN modules2 mn3 funblock mn7 .)


state 388

    (21) mn7 -> empty .

    FUNC            reduce using rule 21 (mn7 -> empty .)
    OBRACKET        reduce using rule 21 (mn7 -> empty .)


state 389

    (34) funblock -> OBRACKET block2 . CBRACKET

    CBRACKET        shift and go to state 392


state 390

    (78) cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .

    ID              reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    IF              reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PRINT           reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    PLOT            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNT           reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    COUNTIF         reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEAN            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MEDIAN          reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MODE            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    STDV            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    KMEANS          reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DERL            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DBERN           reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DPOI            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    TRANSPOSE       reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    INVERSE         reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    ROTATE          reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    REF             reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    RREF            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    MONT            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    EULER           reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    DO              reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    READ            reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CBRACKET        reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)
    CPAREN          reduce using rule 78 (cond -> IF OPAREN expresion cn1 CPAREN ifblock ELSE cn3 ifblock SCOLON cn2 .)


state 391

    (87) countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .

    ID              reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    IF              reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PRINT           reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    PLOT            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNT           reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    COUNTIF         reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEAN            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MEDIAN          reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MODE            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    STDV            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    KMEANS          reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DERL            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DBERN           reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DPOI            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    TRANSPOSE       reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    INVERSE         reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    ROTATE          reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    REF             reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    RREF            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    MONT            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    EULER           reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    DO              reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    READ            reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)
    CBRACKET        reduce using rule 87 (countif -> COUNTIF OPAREN ID COMMA varcte COMMA varcte COMMA cond CPAREN SCOLON .)


state 392

    (34) funblock -> OBRACKET block2 CBRACKET .

    FUNC            reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)
    OBRACKET        reduce using rule 34 (funblock -> OBRACKET block2 CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RCOR in state 36 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 38 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 144 resolved as shift
WARNING: shift/reduce conflict for CPAREN in state 152 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 162 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 170 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 174 resolved as shift
WARNING: shift/reduce conflict for RCOR in state 190 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 192 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 194 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 250 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 263 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 263 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 264 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 311 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (lugstat3 -> modules)
WARNING: rejected rule (empty -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 48 resolved using rule (block2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 150 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 150
WARNING: reduce/reduce conflict in state 157 resolved using rule (plot2 -> empty)
WARNING: rejected rule (xyfunc -> empty) in state 157
WARNING: reduce/reduce conflict in state 196 resolved using rule (varcte -> ID)
WARNING: rejected rule (empty -> <empty>) in state 196
WARNING: reduce/reduce conflict in state 246 resolved using rule (vars1 -> ID LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 246
WARNING: reduce/reduce conflict in state 263 resolved using rule (escrt3 -> ID)
WARNING: rejected rule (empty -> <empty>) in state 263
WARNING: reduce/reduce conflict in state 335 resolved using rule (ifblock2 -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 335
WARNING: reduce/reduce conflict in state 355 resolved using rule (vars1 -> ID LCOR NUMBER RCOR LCOR NUMBER RCOR COLON tipo SCOLON)
WARNING: rejected rule (empty -> <empty>) in state 355
